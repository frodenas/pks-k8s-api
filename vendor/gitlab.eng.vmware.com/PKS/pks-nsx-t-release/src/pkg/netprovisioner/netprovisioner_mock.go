// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/netprovisioner/interface.go

// Package netprovisioner is a generated GoMock package.
package netprovisioner

import (
	logrus "github.com/Sirupsen/logrus"
	strfmt "github.com/go-openapi/strfmt"
	gomock "github.com/golang/mock/gomock"
	models "gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
	reflect "reflect"
)

// MockNsxNetworkProvisioner is a mock of NsxNetworkProvisioner interface
type MockNsxNetworkProvisioner struct {
	ctrl     *gomock.Controller
	recorder *MockNsxNetworkProvisionerMockRecorder
}

// MockNsxNetworkProvisionerMockRecorder is the mock recorder for MockNsxNetworkProvisioner
type MockNsxNetworkProvisionerMockRecorder struct {
	mock *MockNsxNetworkProvisioner
}

// NewMockNsxNetworkProvisioner creates a new mock instance
func NewMockNsxNetworkProvisioner(ctrl *gomock.Controller) *MockNsxNetworkProvisioner {
	mock := &MockNsxNetworkProvisioner{ctrl: ctrl}
	mock.recorder = &MockNsxNetworkProvisionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNsxNetworkProvisioner) EXPECT() *MockNsxNetworkProvisionerMockRecorder {
	return m.recorder
}

// SetLogger mocks base method
func (m *MockNsxNetworkProvisioner) SetLogger(arg0 logrus.FieldLogger) {
	m.ctrl.Call(m, "SetLogger", arg0)
}

// SetLogger indicates an expected call of SetLogger
func (mr *MockNsxNetworkProvisionerMockRecorder) SetLogger(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).SetLogger), arg0)
}

// Logger mocks base method
func (m *MockNsxNetworkProvisioner) Logger() logrus.FieldLogger {
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(logrus.FieldLogger)
	return ret0
}

// Logger indicates an expected call of Logger
func (mr *MockNsxNetworkProvisionerMockRecorder) Logger() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).Logger))
}

// CheckClusterStatus mocks base method
func (m *MockNsxNetworkProvisioner) CheckClusterStatus() error {
	ret := m.ctrl.Call(m, "CheckClusterStatus")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckClusterStatus indicates an expected call of CheckClusterStatus
func (mr *MockNsxNetworkProvisionerMockRecorder) CheckClusterStatus() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClusterStatus", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CheckClusterStatus))
}

// CheckTransportZone mocks base method
func (m *MockNsxNetworkProvisioner) CheckTransportZone(arg0 string) error {
	ret := m.ctrl.Call(m, "CheckTransportZone", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckTransportZone indicates an expected call of CheckTransportZone
func (mr *MockNsxNetworkProvisionerMockRecorder) CheckTransportZone(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTransportZone", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CheckTransportZone), arg0)
}

// CheckT0Router mocks base method
func (m *MockNsxNetworkProvisioner) CheckT0Router(arg0 string) error {
	ret := m.ctrl.Call(m, "CheckT0Router", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckT0Router indicates an expected call of CheckT0Router
func (mr *MockNsxNetworkProvisionerMockRecorder) CheckT0Router(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckT0Router", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CheckT0Router), arg0)
}

// CheckIPPool mocks base method
func (m *MockNsxNetworkProvisioner) CheckIPPool(arg0 string) error {
	ret := m.ctrl.Call(m, "CheckIPPool", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckIPPool indicates an expected call of CheckIPPool
func (mr *MockNsxNetworkProvisionerMockRecorder) CheckIPPool(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIPPool", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CheckIPPool), arg0)
}

// CheckIPBlockSubnetPrefix mocks base method
func (m *MockNsxNetworkProvisioner) CheckIPBlockSubnetPrefix(arg0 string, arg1 int) error {
	ret := m.ctrl.Call(m, "CheckIPBlockSubnetPrefix", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckIPBlockSubnetPrefix indicates an expected call of CheckIPBlockSubnetPrefix
func (mr *MockNsxNetworkProvisionerMockRecorder) CheckIPBlockSubnetPrefix(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIPBlockSubnetPrefix", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CheckIPBlockSubnetPrefix), arg0, arg1)
}

// CheckIPBlock mocks base method
func (m *MockNsxNetworkProvisioner) CheckIPBlock(arg0 string) error {
	ret := m.ctrl.Call(m, "CheckIPBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckIPBlock indicates an expected call of CheckIPBlock
func (mr *MockNsxNetworkProvisionerMockRecorder) CheckIPBlock(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIPBlock", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CheckIPBlock), arg0)
}

// CheckFabricNodes mocks base method
func (m *MockNsxNetworkProvisioner) CheckFabricNodes(arg0 []*FabricNode) error {
	ret := m.ctrl.Call(m, "CheckFabricNodes", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckFabricNodes indicates an expected call of CheckFabricNodes
func (mr *MockNsxNetworkProvisionerMockRecorder) CheckFabricNodes(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFabricNodes", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CheckFabricNodes), arg0)
}

// CheckFabricNodeState mocks base method
func (m *MockNsxNetworkProvisioner) CheckFabricNodeState(arg0 string) error {
	ret := m.ctrl.Call(m, "CheckFabricNodeState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckFabricNodeState indicates an expected call of CheckFabricNodeState
func (mr *MockNsxNetworkProvisionerMockRecorder) CheckFabricNodeState(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFabricNodeState", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CheckFabricNodeState), arg0)
}

// CheckFabricNodeStatus mocks base method
func (m *MockNsxNetworkProvisioner) CheckFabricNodeStatus(arg0 string) error {
	ret := m.ctrl.Call(m, "CheckFabricNodeStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckFabricNodeStatus indicates an expected call of CheckFabricNodeStatus
func (mr *MockNsxNetworkProvisionerMockRecorder) CheckFabricNodeStatus(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFabricNodeStatus", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CheckFabricNodeStatus), arg0)
}

// CheckNSGroup mocks base method
func (m *MockNsxNetworkProvisioner) CheckNSGroup(arg0 string) error {
	ret := m.ctrl.Call(m, "CheckNSGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckNSGroup indicates an expected call of CheckNSGroup
func (mr *MockNsxNetworkProvisionerMockRecorder) CheckNSGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNSGroup", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CheckNSGroup), arg0)
}

// GetFabricNodeGivenMgmtIP mocks base method
func (m *MockNsxNetworkProvisioner) GetFabricNodeGivenMgmtIP(arg0 []string) (*models.Node, error) {
	ret := m.ctrl.Call(m, "GetFabricNodeGivenMgmtIP", arg0)
	ret0, _ := ret[0].(*models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFabricNodeGivenMgmtIP indicates an expected call of GetFabricNodeGivenMgmtIP
func (mr *MockNsxNetworkProvisionerMockRecorder) GetFabricNodeGivenMgmtIP(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFabricNodeGivenMgmtIP", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).GetFabricNodeGivenMgmtIP), arg0)
}

// ExtractEdgeClusterIDFromT0Router mocks base method
func (m *MockNsxNetworkProvisioner) ExtractEdgeClusterIDFromT0Router(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "ExtractEdgeClusterIDFromT0Router", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractEdgeClusterIDFromT0Router indicates an expected call of ExtractEdgeClusterIDFromT0Router
func (mr *MockNsxNetworkProvisionerMockRecorder) ExtractEdgeClusterIDFromT0Router(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractEdgeClusterIDFromT0Router", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).ExtractEdgeClusterIDFromT0Router), arg0)
}

// ExtractTransportZoneIDFromEdgeCluster mocks base method
func (m *MockNsxNetworkProvisioner) ExtractTransportZoneIDFromEdgeCluster(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "ExtractTransportZoneIDFromEdgeCluster", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractTransportZoneIDFromEdgeCluster indicates an expected call of ExtractTransportZoneIDFromEdgeCluster
func (mr *MockNsxNetworkProvisionerMockRecorder) ExtractTransportZoneIDFromEdgeCluster(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTransportZoneIDFromEdgeCluster", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).ExtractTransportZoneIDFromEdgeCluster), arg0)
}

// UntagTransportZone mocks base method
func (m *MockNsxNetworkProvisioner) UntagTransportZone(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "UntagTransportZone", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UntagTransportZone indicates an expected call of UntagTransportZone
func (mr *MockNsxNetworkProvisionerMockRecorder) UntagTransportZone(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagTransportZone", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).UntagTransportZone), arg0, arg1)
}

// GetAllResources mocks base method
func (m *MockNsxNetworkProvisioner) GetAllResources(arg0 string, arg1 models.Tag) ([]*models.ManagedResource, error) {
	ret := m.ctrl.Call(m, "GetAllResources", arg0, arg1)
	ret0, _ := ret[0].([]*models.ManagedResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllResources indicates an expected call of GetAllResources
func (mr *MockNsxNetworkProvisionerMockRecorder) GetAllResources(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllResources", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).GetAllResources), arg0, arg1)
}

// CreateT1Router mocks base method
func (m *MockNsxNetworkProvisioner) CreateT1Router(arg0 CreateT1RouterSpec) (string, error) {
	ret := m.ctrl.Call(m, "CreateT1Router", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateT1Router indicates an expected call of CreateT1Router
func (mr *MockNsxNetworkProvisionerMockRecorder) CreateT1Router(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateT1Router", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CreateT1Router), arg0)
}

// CreateT0ToT1Port mocks base method
func (m *MockNsxNetworkProvisioner) CreateT0ToT1Port(arg0, arg1 string, arg2 []*models.Tag) (string, error) {
	ret := m.ctrl.Call(m, "CreateT0ToT1Port", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateT0ToT1Port indicates an expected call of CreateT0ToT1Port
func (mr *MockNsxNetworkProvisionerMockRecorder) CreateT0ToT1Port(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateT0ToT1Port", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CreateT0ToT1Port), arg0, arg1, arg2)
}

// CreateT1ToT0Port mocks base method
func (m *MockNsxNetworkProvisioner) CreateT1ToT0Port(arg0, arg1, arg2 string, arg3 []*models.Tag) (string, error) {
	ret := m.ctrl.Call(m, "CreateT1ToT0Port", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateT1ToT0Port indicates an expected call of CreateT1ToT0Port
func (mr *MockNsxNetworkProvisionerMockRecorder) CreateT1ToT0Port(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateT1ToT0Port", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CreateT1ToT0Port), arg0, arg1, arg2, arg3)
}

// EnableRouteAdvertisement mocks base method
func (m *MockNsxNetworkProvisioner) EnableRouteAdvertisement(arg0 string, arg1 bool) error {
	ret := m.ctrl.Call(m, "EnableRouteAdvertisement", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableRouteAdvertisement indicates an expected call of EnableRouteAdvertisement
func (mr *MockNsxNetworkProvisionerMockRecorder) EnableRouteAdvertisement(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRouteAdvertisement", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).EnableRouteAdvertisement), arg0, arg1)
}

// CreateDnatRule mocks base method
func (m *MockNsxNetworkProvisioner) CreateDnatRule(arg0, arg1, arg2, arg3 string, arg4 []*models.Tag) (string, error) {
	ret := m.ctrl.Call(m, "CreateDnatRule", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDnatRule indicates an expected call of CreateDnatRule
func (mr *MockNsxNetworkProvisionerMockRecorder) CreateDnatRule(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDnatRule", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CreateDnatRule), arg0, arg1, arg2, arg3, arg4)
}

// CreateSnatRule mocks base method
func (m *MockNsxNetworkProvisioner) CreateSnatRule(arg0, arg1, arg2, arg3 string, arg4 []*models.Tag) (string, error) {
	ret := m.ctrl.Call(m, "CreateSnatRule", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnatRule indicates an expected call of CreateSnatRule
func (mr *MockNsxNetworkProvisionerMockRecorder) CreateSnatRule(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnatRule", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CreateSnatRule), arg0, arg1, arg2, arg3, arg4)
}

// DeleteNatRule mocks base method
func (m *MockNsxNetworkProvisioner) DeleteNatRule(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "DeleteNatRule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNatRule indicates an expected call of DeleteNatRule
func (mr *MockNsxNetworkProvisionerMockRecorder) DeleteNatRule(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNatRule", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).DeleteNatRule), arg0, arg1)
}

// GetNatRule mocks base method
func (m *MockNsxNetworkProvisioner) GetNatRule(arg0, arg1 string) (*models.NatRule, error) {
	ret := m.ctrl.Call(m, "GetNatRule", arg0, arg1)
	ret0, _ := ret[0].(*models.NatRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNatRule indicates an expected call of GetNatRule
func (mr *MockNsxNetworkProvisionerMockRecorder) GetNatRule(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNatRule", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).GetNatRule), arg0, arg1)
}

// ExtractFloatingIPFromNatRule mocks base method
func (m *MockNsxNetworkProvisioner) ExtractFloatingIPFromNatRule(arg0, arg1 string) (string, error) {
	ret := m.ctrl.Call(m, "ExtractFloatingIPFromNatRule", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractFloatingIPFromNatRule indicates an expected call of ExtractFloatingIPFromNatRule
func (mr *MockNsxNetworkProvisionerMockRecorder) ExtractFloatingIPFromNatRule(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractFloatingIPFromNatRule", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).ExtractFloatingIPFromNatRule), arg0, arg1)
}

// AllocateFloatingIPAddress mocks base method
func (m *MockNsxNetworkProvisioner) AllocateFloatingIPAddress(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "AllocateFloatingIPAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateFloatingIPAddress indicates an expected call of AllocateFloatingIPAddress
func (mr *MockNsxNetworkProvisionerMockRecorder) AllocateFloatingIPAddress(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateFloatingIPAddress", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).AllocateFloatingIPAddress), arg0)
}

// AllocateFloatingIPAddressFromIPPools mocks base method
func (m *MockNsxNetworkProvisioner) AllocateFloatingIPAddressFromIPPools(arg0 []string) (string, string, error) {
	ret := m.ctrl.Call(m, "AllocateFloatingIPAddressFromIPPools", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllocateFloatingIPAddressFromIPPools indicates an expected call of AllocateFloatingIPAddressFromIPPools
func (mr *MockNsxNetworkProvisionerMockRecorder) AllocateFloatingIPAddressFromIPPools(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateFloatingIPAddressFromIPPools", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).AllocateFloatingIPAddressFromIPPools), arg0)
}

// CreateLogicalSwitch mocks base method
func (m *MockNsxNetworkProvisioner) CreateLogicalSwitch(arg0, arg1 string, arg2 []*models.Tag) (string, error) {
	ret := m.ctrl.Call(m, "CreateLogicalSwitch", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogicalSwitch indicates an expected call of CreateLogicalSwitch
func (mr *MockNsxNetworkProvisionerMockRecorder) CreateLogicalSwitch(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogicalSwitch", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CreateLogicalSwitch), arg0, arg1, arg2)
}

// UpdateLogicalSwitchTags mocks base method
func (m *MockNsxNetworkProvisioner) UpdateLogicalSwitchTags(arg0 string, arg1 []*models.Tag) (string, error) {
	ret := m.ctrl.Call(m, "UpdateLogicalSwitchTags", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLogicalSwitchTags indicates an expected call of UpdateLogicalSwitchTags
func (mr *MockNsxNetworkProvisionerMockRecorder) UpdateLogicalSwitchTags(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogicalSwitchTags", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).UpdateLogicalSwitchTags), arg0, arg1)
}

// CreateSwitchToT1Port mocks base method
func (m *MockNsxNetworkProvisioner) CreateSwitchToT1Port(arg0, arg1 string, arg2 []*models.Tag) (string, error) {
	ret := m.ctrl.Call(m, "CreateSwitchToT1Port", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSwitchToT1Port indicates an expected call of CreateSwitchToT1Port
func (mr *MockNsxNetworkProvisionerMockRecorder) CreateSwitchToT1Port(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSwitchToT1Port", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CreateSwitchToT1Port), arg0, arg1, arg2)
}

// AllocateSubnetBlock mocks base method
func (m *MockNsxNetworkProvisioner) AllocateSubnetBlock(arg0, arg1 string, arg2 []*models.Tag) (string, string, error) {
	ret := m.ctrl.Call(m, "AllocateSubnetBlock", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllocateSubnetBlock indicates an expected call of AllocateSubnetBlock
func (mr *MockNsxNetworkProvisionerMockRecorder) AllocateSubnetBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateSubnetBlock", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).AllocateSubnetBlock), arg0, arg1, arg2)
}

// AllocateSubnetFromIPBlocks mocks base method
func (m *MockNsxNetworkProvisioner) AllocateSubnetFromIPBlocks(arg0 string, arg1 []string, arg2 []*models.Tag) (string, string, string, error) {
	ret := m.ctrl.Call(m, "AllocateSubnetFromIPBlocks", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// AllocateSubnetFromIPBlocks indicates an expected call of AllocateSubnetFromIPBlocks
func (mr *MockNsxNetworkProvisionerMockRecorder) AllocateSubnetFromIPBlocks(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateSubnetFromIPBlocks", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).AllocateSubnetFromIPBlocks), arg0, arg1, arg2)
}

// AllocateIPAddress mocks base method
func (m *MockNsxNetworkProvisioner) AllocateIPAddress(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "AllocateIPAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateIPAddress indicates an expected call of AllocateIPAddress
func (mr *MockNsxNetworkProvisionerMockRecorder) AllocateIPAddress(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateIPAddress", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).AllocateIPAddress), arg0)
}

// BuildIPAddress mocks base method
func (m *MockNsxNetworkProvisioner) BuildIPAddress(arg0, arg1 string) string {
	ret := m.ctrl.Call(m, "BuildIPAddress", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildIPAddress indicates an expected call of BuildIPAddress
func (mr *MockNsxNetworkProvisionerMockRecorder) BuildIPAddress(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildIPAddress", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).BuildIPAddress), arg0, arg1)
}

// CreateT1ToSwitchPort mocks base method
func (m *MockNsxNetworkProvisioner) CreateT1ToSwitchPort(arg0, arg1, arg2 string, arg3 strfmt.IPv4, arg4 []*models.Tag) (string, error) {
	ret := m.ctrl.Call(m, "CreateT1ToSwitchPort", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateT1ToSwitchPort indicates an expected call of CreateT1ToSwitchPort
func (mr *MockNsxNetworkProvisionerMockRecorder) CreateT1ToSwitchPort(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateT1ToSwitchPort", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CreateT1ToSwitchPort), arg0, arg1, arg2, arg3, arg4)
}

// GetSwitchingProfileByTag mocks base method
func (m *MockNsxNetworkProvisioner) GetSwitchingProfileByTag(arg0, arg1, arg2 string) (*models.BaseSwitchingProfile, error) {
	ret := m.ctrl.Call(m, "GetSwitchingProfileByTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.BaseSwitchingProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwitchingProfileByTag indicates an expected call of GetSwitchingProfileByTag
func (mr *MockNsxNetworkProvisionerMockRecorder) GetSwitchingProfileByTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwitchingProfileByTag", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).GetSwitchingProfileByTag), arg0, arg1, arg2)
}

// CreateSpoofGuardSwitchingProfile mocks base method
func (m *MockNsxNetworkProvisioner) CreateSpoofGuardSwitchingProfile(arg0, arg1 string, arg2 []*models.Tag, arg3 []string) (string, error) {
	ret := m.ctrl.Call(m, "CreateSpoofGuardSwitchingProfile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSpoofGuardSwitchingProfile indicates an expected call of CreateSpoofGuardSwitchingProfile
func (mr *MockNsxNetworkProvisionerMockRecorder) CreateSpoofGuardSwitchingProfile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpoofGuardSwitchingProfile", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CreateSpoofGuardSwitchingProfile), arg0, arg1, arg2, arg3)
}

// GetIPBlockSubnet mocks base method
func (m *MockNsxNetworkProvisioner) GetIPBlockSubnet(arg0, arg1 string) (string, string, error) {
	ret := m.ctrl.Call(m, "GetIPBlockSubnet", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIPBlockSubnet indicates an expected call of GetIPBlockSubnet
func (mr *MockNsxNetworkProvisionerMockRecorder) GetIPBlockSubnet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPBlockSubnet", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).GetIPBlockSubnet), arg0, arg1)
}

// GetMetadataFromSwitchTag mocks base method
func (m *MockNsxNetworkProvisioner) GetMetadataFromSwitchTag(arg0 string) (string, bool, error) {
	ret := m.ctrl.Call(m, "GetMetadataFromSwitchTag", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMetadataFromSwitchTag indicates an expected call of GetMetadataFromSwitchTag
func (mr *MockNsxNetworkProvisionerMockRecorder) GetMetadataFromSwitchTag(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataFromSwitchTag", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).GetMetadataFromSwitchTag), arg0)
}

// GetIpamInfoFromSwitchTag mocks base method
func (m *MockNsxNetworkProvisioner) GetIpamInfoFromSwitchTag(arg0 string) (string, string, error) {
	ret := m.ctrl.Call(m, "GetIpamInfoFromSwitchTag", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIpamInfoFromSwitchTag indicates an expected call of GetIpamInfoFromSwitchTag
func (mr *MockNsxNetworkProvisionerMockRecorder) GetIpamInfoFromSwitchTag(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpamInfoFromSwitchTag", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).GetIpamInfoFromSwitchTag), arg0)
}

// GetT0RouterFromRouterTag mocks base method
func (m *MockNsxNetworkProvisioner) GetT0RouterFromRouterTag(clusterRouterID string) (string, error) {
	ret := m.ctrl.Call(m, "GetT0RouterFromRouterTag", clusterRouterID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetT0RouterFromRouterTag indicates an expected call of GetT0RouterFromRouterTag
func (mr *MockNsxNetworkProvisionerMockRecorder) GetT0RouterFromRouterTag(clusterRouterID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetT0RouterFromRouterTag", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).GetT0RouterFromRouterTag), clusterRouterID)
}

// GetMasterVMsNSGroupNameFromSwitchPortTag mocks base method
func (m *MockNsxNetworkProvisioner) GetMasterVMsNSGroupNameFromSwitchPortTag(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "GetMasterVMsNSGroupNameFromSwitchPortTag", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterVMsNSGroupNameFromSwitchPortTag indicates an expected call of GetMasterVMsNSGroupNameFromSwitchPortTag
func (mr *MockNsxNetworkProvisionerMockRecorder) GetMasterVMsNSGroupNameFromSwitchPortTag(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterVMsNSGroupNameFromSwitchPortTag", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).GetMasterVMsNSGroupNameFromSwitchPortTag), arg0)
}

// DeleteT0ToT1Port mocks base method
func (m *MockNsxNetworkProvisioner) DeleteT0ToT1Port(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteT0ToT1Port", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteT0ToT1Port indicates an expected call of DeleteT0ToT1Port
func (mr *MockNsxNetworkProvisionerMockRecorder) DeleteT0ToT1Port(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteT0ToT1Port", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).DeleteT0ToT1Port), arg0)
}

// DeleteT1Router mocks base method
func (m *MockNsxNetworkProvisioner) DeleteT1Router(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteT1Router", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteT1Router indicates an expected call of DeleteT1Router
func (mr *MockNsxNetworkProvisionerMockRecorder) DeleteT1Router(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteT1Router", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).DeleteT1Router), arg0)
}

// UntagT0Router mocks base method
func (m *MockNsxNetworkProvisioner) UntagT0Router(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "UntagT0Router", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UntagT0Router indicates an expected call of UntagT0Router
func (mr *MockNsxNetworkProvisionerMockRecorder) UntagT0Router(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagT0Router", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).UntagT0Router), arg0, arg1)
}

// DeleteClusterSwitch mocks base method
func (m *MockNsxNetworkProvisioner) DeleteClusterSwitch(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteClusterSwitch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterSwitch indicates an expected call of DeleteClusterSwitch
func (mr *MockNsxNetworkProvisionerMockRecorder) DeleteClusterSwitch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterSwitch", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).DeleteClusterSwitch), arg0)
}

// GetLogicalSwitchByTag mocks base method
func (m *MockNsxNetworkProvisioner) GetLogicalSwitchByTag(lsScope, lsTag string) (*models.LogicalSwitch, error) {
	ret := m.ctrl.Call(m, "GetLogicalSwitchByTag", lsScope, lsTag)
	ret0, _ := ret[0].(*models.LogicalSwitch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalSwitchByTag indicates an expected call of GetLogicalSwitchByTag
func (mr *MockNsxNetworkProvisionerMockRecorder) GetLogicalSwitchByTag(lsScope, lsTag interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalSwitchByTag", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).GetLogicalSwitchByTag), lsScope, lsTag)
}

// DeleteIPBlockSubnet mocks base method
func (m *MockNsxNetworkProvisioner) DeleteIPBlockSubnet(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteIPBlockSubnet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIPBlockSubnet indicates an expected call of DeleteIPBlockSubnet
func (mr *MockNsxNetworkProvisionerMockRecorder) DeleteIPBlockSubnet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIPBlockSubnet", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).DeleteIPBlockSubnet), arg0)
}

// ReleaseFloatingIPAddress mocks base method
func (m *MockNsxNetworkProvisioner) ReleaseFloatingIPAddress(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "ReleaseFloatingIPAddress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseFloatingIPAddress indicates an expected call of ReleaseFloatingIPAddress
func (mr *MockNsxNetworkProvisionerMockRecorder) ReleaseFloatingIPAddress(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseFloatingIPAddress", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).ReleaseFloatingIPAddress), arg0, arg1)
}

// UntagIPBlock mocks base method
func (m *MockNsxNetworkProvisioner) UntagIPBlock(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "UntagIPBlock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UntagIPBlock indicates an expected call of UntagIPBlock
func (mr *MockNsxNetworkProvisionerMockRecorder) UntagIPBlock(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagIPBlock", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).UntagIPBlock), arg0, arg1)
}

// UntagExternalBlocks mocks base method
func (m *MockNsxNetworkProvisioner) UntagExternalBlocks(arg0 string) error {
	ret := m.ctrl.Call(m, "UntagExternalBlocks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UntagExternalBlocks indicates an expected call of UntagExternalBlocks
func (mr *MockNsxNetworkProvisionerMockRecorder) UntagExternalBlocks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagExternalBlocks", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).UntagExternalBlocks), arg0)
}

// UntagExternalPools mocks base method
func (m *MockNsxNetworkProvisioner) UntagExternalPools(arg0 string) error {
	ret := m.ctrl.Call(m, "UntagExternalPools", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UntagExternalPools indicates an expected call of UntagExternalPools
func (mr *MockNsxNetworkProvisionerMockRecorder) UntagExternalPools(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagExternalPools", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).UntagExternalPools), arg0)
}

// GetDefaultFastTCPProfile mocks base method
func (m *MockNsxNetworkProvisioner) GetDefaultFastTCPProfile() (string, error) {
	ret := m.ctrl.Call(m, "GetDefaultFastTCPProfile")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultFastTCPProfile indicates an expected call of GetDefaultFastTCPProfile
func (mr *MockNsxNetworkProvisionerMockRecorder) GetDefaultFastTCPProfile() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultFastTCPProfile", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).GetDefaultFastTCPProfile))
}

// CreateServerPoolWithNSGroupAndActiveMonitors mocks base method
func (m *MockNsxNetworkProvisioner) CreateServerPoolWithNSGroupAndActiveMonitors(arg0, arg1 string, arg2 []string, arg3 []*models.Tag) (string, error) {
	ret := m.ctrl.Call(m, "CreateServerPoolWithNSGroupAndActiveMonitors", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerPoolWithNSGroupAndActiveMonitors indicates an expected call of CreateServerPoolWithNSGroupAndActiveMonitors
func (mr *MockNsxNetworkProvisionerMockRecorder) CreateServerPoolWithNSGroupAndActiveMonitors(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerPoolWithNSGroupAndActiveMonitors", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CreateServerPoolWithNSGroupAndActiveMonitors), arg0, arg1, arg2, arg3)
}

// CreateVirtualServer mocks base method
func (m *MockNsxNetworkProvisioner) CreateVirtualServer(arg0, arg1 string, arg2 strfmt.IPv4, arg3, arg4 string, arg5 []*models.Tag) (string, error) {
	ret := m.ctrl.Call(m, "CreateVirtualServer", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualServer indicates an expected call of CreateVirtualServer
func (mr *MockNsxNetworkProvisionerMockRecorder) CreateVirtualServer(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualServer", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CreateVirtualServer), arg0, arg1, arg2, arg3, arg4, arg5)
}

// CreateLbService mocks base method
func (m *MockNsxNetworkProvisioner) CreateLbService(arg0, arg1, arg2, arg3 string, arg4 []*models.Tag) (string, error) {
	ret := m.ctrl.Call(m, "CreateLbService", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLbService indicates an expected call of CreateLbService
func (mr *MockNsxNetworkProvisionerMockRecorder) CreateLbService(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLbService", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CreateLbService), arg0, arg1, arg2, arg3, arg4)
}

// DeleteLoadBalancerService mocks base method
func (m *MockNsxNetworkProvisioner) DeleteLoadBalancerService(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteLoadBalancerService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancerService indicates an expected call of DeleteLoadBalancerService
func (mr *MockNsxNetworkProvisionerMockRecorder) DeleteLoadBalancerService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerService", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).DeleteLoadBalancerService), arg0)
}

// ReadLoadBalancerService mocks base method
func (m *MockNsxNetworkProvisioner) ReadLoadBalancerService(arg0 string) (*models.LbService, error) {
	ret := m.ctrl.Call(m, "ReadLoadBalancerService", arg0)
	ret0, _ := ret[0].(*models.LbService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLoadBalancerService indicates an expected call of ReadLoadBalancerService
func (mr *MockNsxNetworkProvisionerMockRecorder) ReadLoadBalancerService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLoadBalancerService", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).ReadLoadBalancerService), arg0)
}

// DeleteLoadBalancerVirtualServer mocks base method
func (m *MockNsxNetworkProvisioner) DeleteLoadBalancerVirtualServer(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteLoadBalancerVirtualServer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancerVirtualServer indicates an expected call of DeleteLoadBalancerVirtualServer
func (mr *MockNsxNetworkProvisionerMockRecorder) DeleteLoadBalancerVirtualServer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerVirtualServer", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).DeleteLoadBalancerVirtualServer), arg0)
}

// DeleteLoadBalancerPool mocks base method
func (m *MockNsxNetworkProvisioner) DeleteLoadBalancerPool(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteLoadBalancerPool", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancerPool indicates an expected call of DeleteLoadBalancerPool
func (mr *MockNsxNetworkProvisionerMockRecorder) DeleteLoadBalancerPool(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerPool", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).DeleteLoadBalancerPool), arg0)
}

// GetLoadbalancerByTag mocks base method
func (m *MockNsxNetworkProvisioner) GetLoadbalancerByTag(arg0, arg1 string) (*models.LbService, error) {
	ret := m.ctrl.Call(m, "GetLoadbalancerByTag", arg0, arg1)
	ret0, _ := ret[0].(*models.LbService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadbalancerByTag indicates an expected call of GetLoadbalancerByTag
func (mr *MockNsxNetworkProvisionerMockRecorder) GetLoadbalancerByTag(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadbalancerByTag", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).GetLoadbalancerByTag), arg0, arg1)
}

// CreateLbTcpMonitor mocks base method
func (m *MockNsxNetworkProvisioner) CreateLbTcpMonitor(arg0, arg1 string, arg2 []*models.Tag) (string, error) {
	ret := m.ctrl.Call(m, "CreateLbTcpMonitor", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLbTcpMonitor indicates an expected call of CreateLbTcpMonitor
func (mr *MockNsxNetworkProvisionerMockRecorder) CreateLbTcpMonitor(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLbTcpMonitor", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CreateLbTcpMonitor), arg0, arg1, arg2)
}

// DeleteLoadBalancerMonitor mocks base method
func (m *MockNsxNetworkProvisioner) DeleteLoadBalancerMonitor(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteLoadBalancerMonitor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancerMonitor indicates an expected call of DeleteLoadBalancerMonitor
func (mr *MockNsxNetworkProvisionerMockRecorder) DeleteLoadBalancerMonitor(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerMonitor", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).DeleteLoadBalancerMonitor), arg0)
}

// CreateNSGroupWithCriteria mocks base method
func (m *MockNsxNetworkProvisioner) CreateNSGroupWithCriteria(arg0 string, arg1 []*models.NSGroupTagExpression, arg2 []*models.Tag) (string, error) {
	ret := m.ctrl.Call(m, "CreateNSGroupWithCriteria", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNSGroupWithCriteria indicates an expected call of CreateNSGroupWithCriteria
func (mr *MockNsxNetworkProvisionerMockRecorder) CreateNSGroupWithCriteria(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNSGroupWithCriteria", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).CreateNSGroupWithCriteria), arg0, arg1, arg2)
}

// DeleteNSGroup mocks base method
func (m *MockNsxNetworkProvisioner) DeleteNSGroup(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteNSGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNSGroup indicates an expected call of DeleteNSGroup
func (mr *MockNsxNetworkProvisionerMockRecorder) DeleteNSGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNSGroup", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).DeleteNSGroup), arg0)
}

// ReadNSGroup mocks base method
func (m *MockNsxNetworkProvisioner) ReadNSGroup(arg0 string) (*models.NSGroup, error) {
	ret := m.ctrl.Call(m, "ReadNSGroup", arg0)
	ret0, _ := ret[0].(*models.NSGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadNSGroup indicates an expected call of ReadNSGroup
func (mr *MockNsxNetworkProvisionerMockRecorder) ReadNSGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNSGroup", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).ReadNSGroup), arg0)
}

// AddCertificateImport mocks base method
func (m *MockNsxNetworkProvisioner) AddCertificateImport(trustObjectData *models.TrustObjectData) (*models.CertificateList, error) {
	ret := m.ctrl.Call(m, "AddCertificateImport", trustObjectData)
	ret0, _ := ret[0].(*models.CertificateList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCertificateImport indicates an expected call of AddCertificateImport
func (mr *MockNsxNetworkProvisionerMockRecorder) AddCertificateImport(trustObjectData interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCertificateImport", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).AddCertificateImport), trustObjectData)
}

// DeleteCertificate mocks base method
func (m *MockNsxNetworkProvisioner) DeleteCertificate(certID string) error {
	ret := m.ctrl.Call(m, "DeleteCertificate", certID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificate indicates an expected call of DeleteCertificate
func (mr *MockNsxNetworkProvisionerMockRecorder) DeleteCertificate(certID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificate", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).DeleteCertificate), certID)
}

// GetCertificates mocks base method
func (m *MockNsxNetworkProvisioner) GetCertificates() (*models.CertificateList, error) {
	ret := m.ctrl.Call(m, "GetCertificates")
	ret0, _ := ret[0].(*models.CertificateList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificates indicates an expected call of GetCertificates
func (mr *MockNsxNetworkProvisionerMockRecorder) GetCertificates() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificates", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).GetCertificates))
}

// GetCertificate mocks base method
func (m *MockNsxNetworkProvisioner) GetCertificate(certID string) (*models.Certificate, error) {
	ret := m.ctrl.Call(m, "GetCertificate", certID)
	ret0, _ := ret[0].(*models.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificate indicates an expected call of GetCertificate
func (mr *MockNsxNetworkProvisionerMockRecorder) GetCertificate(certID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).GetCertificate), certID)
}

// RegisterPrincipalIdentity mocks base method
func (m *MockNsxNetworkProvisioner) RegisterPrincipalIdentity(principalIdentity *models.PrincipalIdentity) (*models.PrincipalIdentity, error) {
	ret := m.ctrl.Call(m, "RegisterPrincipalIdentity", principalIdentity)
	ret0, _ := ret[0].(*models.PrincipalIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterPrincipalIdentity indicates an expected call of RegisterPrincipalIdentity
func (mr *MockNsxNetworkProvisionerMockRecorder) RegisterPrincipalIdentity(principalIdentity interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPrincipalIdentity", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).RegisterPrincipalIdentity), principalIdentity)
}

// DeletePrincipalIdentity mocks base method
func (m *MockNsxNetworkProvisioner) DeletePrincipalIdentity(principalIdentityID string) error {
	ret := m.ctrl.Call(m, "DeletePrincipalIdentity", principalIdentityID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrincipalIdentity indicates an expected call of DeletePrincipalIdentity
func (mr *MockNsxNetworkProvisionerMockRecorder) DeletePrincipalIdentity(principalIdentityID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrincipalIdentity", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).DeletePrincipalIdentity), principalIdentityID)
}

// GetPrincipalIdentities mocks base method
func (m *MockNsxNetworkProvisioner) GetPrincipalIdentities() (*models.PrincipalIdentityList, error) {
	ret := m.ctrl.Call(m, "GetPrincipalIdentities")
	ret0, _ := ret[0].(*models.PrincipalIdentityList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrincipalIdentities indicates an expected call of GetPrincipalIdentities
func (mr *MockNsxNetworkProvisionerMockRecorder) GetPrincipalIdentities() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrincipalIdentities", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).GetPrincipalIdentities))
}

// ReadNodeProperties mocks base method
func (m *MockNsxNetworkProvisioner) ReadNodeProperties() (*models.NodeProperties, error) {
	ret := m.ctrl.Call(m, "ReadNodeProperties")
	ret0, _ := ret[0].(*models.NodeProperties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadNodeProperties indicates an expected call of ReadNodeProperties
func (mr *MockNsxNetworkProvisionerMockRecorder) ReadNodeProperties() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNodeProperties", reflect.TypeOf((*MockNsxNetworkProvisioner)(nil).ReadNodeProperties))
}
