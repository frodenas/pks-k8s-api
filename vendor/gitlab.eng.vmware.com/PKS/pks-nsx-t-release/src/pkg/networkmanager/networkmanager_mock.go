// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/networkmanager/interface.go

// Package networkmanager is a generated GoMock package.
package networkmanager

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNetworkManager is a mock of NetworkManager interface
type MockNetworkManager struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkManagerMockRecorder
}

// MockNetworkManagerMockRecorder is the mock recorder for MockNetworkManager
type MockNetworkManagerMockRecorder struct {
	mock *MockNetworkManager
}

// NewMockNetworkManager creates a new mock instance
func NewMockNetworkManager(ctrl *gomock.Controller) *MockNetworkManager {
	mock := &MockNetworkManager{ctrl: ctrl}
	mock.recorder = &MockNetworkManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkManager) EXPECT() *MockNetworkManagerMockRecorder {
	return m.recorder
}

// CreateNetwork mocks base method
func (m *MockNetworkManager) CreateNetwork(instanceID string, clusterSpec *NSXTClusterSpec) (NetworkInfo, error) {
	ret := m.ctrl.Call(m, "CreateNetwork", instanceID, clusterSpec)
	ret0, _ := ret[0].(NetworkInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork
func (mr *MockNetworkManagerMockRecorder) CreateNetwork(instanceID, clusterSpec interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockNetworkManager)(nil).CreateNetwork), instanceID, clusterSpec)
}

// CreateLoadbalancer mocks base method
func (m *MockNetworkManager) CreateLoadbalancer(instanceID string, clusterSpec *NSXTClusterSpec) (string, string, error) {
	ret := m.ctrl.Call(m, "CreateLoadbalancer", instanceID, clusterSpec)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateLoadbalancer indicates an expected call of CreateLoadbalancer
func (mr *MockNetworkManagerMockRecorder) CreateLoadbalancer(instanceID, clusterSpec interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadbalancer", reflect.TypeOf((*MockNetworkManager)(nil).CreateLoadbalancer), instanceID, clusterSpec)
}

// PrecheckLoadBalancer mocks base method
func (m *MockNetworkManager) PrecheckLoadBalancer(lbSize string) error {
	ret := m.ctrl.Call(m, "PrecheckLoadBalancer", lbSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrecheckLoadBalancer indicates an expected call of PrecheckLoadBalancer
func (mr *MockNetworkManagerMockRecorder) PrecheckLoadBalancer(lbSize interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrecheckLoadBalancer", reflect.TypeOf((*MockNetworkManager)(nil).PrecheckLoadBalancer), lbSize)
}

// GetNetwork mocks base method
func (m *MockNetworkManager) GetNetwork(instanceID string) (NetworkInfo, error) {
	ret := m.ctrl.Call(m, "GetNetwork", instanceID)
	ret0, _ := ret[0].(NetworkInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork
func (mr *MockNetworkManagerMockRecorder) GetNetwork(instanceID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockNetworkManager)(nil).GetNetwork), instanceID)
}

// GetResources mocks base method
func (m *MockNetworkManager) GetResources(instanceID string) (CollectResourcesResp, error) {
	ret := m.ctrl.Call(m, "GetResources", instanceID)
	ret0, _ := ret[0].(CollectResourcesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResources indicates an expected call of GetResources
func (mr *MockNetworkManagerMockRecorder) GetResources(instanceID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResources", reflect.TypeOf((*MockNetworkManager)(nil).GetResources), instanceID)
}

// DeleteNetwork mocks base method
func (m *MockNetworkManager) DeleteNetwork(instanceID string) error {
	ret := m.ctrl.Call(m, "DeleteNetwork", instanceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork
func (mr *MockNetworkManagerMockRecorder) DeleteNetwork(instanceID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockNetworkManager)(nil).DeleteNetwork), instanceID)
}

// PreCheckCreateNetwork mocks base method
func (m *MockNetworkManager) PreCheckCreateNetwork(instanceID string, clusterSpec *NSXTClusterSpec) error {
	ret := m.ctrl.Call(m, "PreCheckCreateNetwork", instanceID, clusterSpec)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreCheckCreateNetwork indicates an expected call of PreCheckCreateNetwork
func (mr *MockNetworkManagerMockRecorder) PreCheckCreateNetwork(instanceID, clusterSpec interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreCheckCreateNetwork", reflect.TypeOf((*MockNetworkManager)(nil).PreCheckCreateNetwork), instanceID, clusterSpec)
}

// CreateGlobalResources mocks base method
func (m *MockNetworkManager) CreateGlobalResources() error {
	ret := m.ctrl.Call(m, "CreateGlobalResources")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGlobalResources indicates an expected call of CreateGlobalResources
func (mr *MockNetworkManagerMockRecorder) CreateGlobalResources() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlobalResources", reflect.TypeOf((*MockNetworkManager)(nil).CreateGlobalResources))
}
