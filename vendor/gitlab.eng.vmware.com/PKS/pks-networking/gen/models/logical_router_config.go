// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LogicalRouterConfig logical router config
// swagger:model LogicalRouterConfig

type LogicalRouterConfig struct {

	// CIDR block defining tier0 to tier1 links
	//
	// CIDR block defining tier0 to tier1 links
	ExternalTransitNetworks []string `json:"external_transit_networks"`

	// Array of HA VIP Config.
	//
	// This configuration can be defined only for Active-Standby LogicalRouter to provide | redundancy. For mulitple uplink ports, multiple HaVipConfigs must be defined | and each config will pair exactly two uplink ports. The VIP will move and will | always be owned by the Active node. Note - when HaVipConfig[s] are defined, | configuring dynamic-routing is disallowed.
	HaVipConfigs []*HaVipConfig `json:"ha_vip_configs"`

	// CIDR block defining Service router to distributed router links
	InternalTransitNetwork string `json:"internal_transit_network,omitempty"`
}

/* polymorph LogicalRouterConfig external_transit_networks false */

/* polymorph LogicalRouterConfig ha_vip_configs false */

/* polymorph LogicalRouterConfig internal_transit_network false */

// Validate validates this logical router config
func (m *LogicalRouterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExternalTransitNetworks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHaVipConfigs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogicalRouterConfig) validateExternalTransitNetworks(formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalTransitNetworks) { // not required
		return nil
	}

	return nil
}

func (m *LogicalRouterConfig) validateHaVipConfigs(formats strfmt.Registry) error {

	if swag.IsZero(m.HaVipConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.HaVipConfigs); i++ {

		if swag.IsZero(m.HaVipConfigs[i]) { // not required
			continue
		}

		if m.HaVipConfigs[i] != nil {

			if err := m.HaVipConfigs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ha_vip_configs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogicalRouterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogicalRouterConfig) UnmarshalBinary(b []byte) error {
	var res LogicalRouterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
