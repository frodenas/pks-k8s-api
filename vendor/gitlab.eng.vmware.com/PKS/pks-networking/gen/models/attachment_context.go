// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttachmentContext attachment context
// swagger:model AttachmentContext

type AttachmentContext struct {

	// A flag to indicate whether to allocate addresses from allocation
	//     pools bound to the parent logical switch.
	//
	//
	// A flag to indicate whether to allocate addresses from allocation
	//     pools bound to the parent logical switch.
	//
	AllocateAddresses string `json:"allocate_addresses,omitempty"`

	// Used to identify which concrete class it is
	//
	// Used to identify which concrete class it is
	// Required: true
	ResourceType *string `json:"resource_type"`
}

/* polymorph AttachmentContext allocate_addresses false */

/* polymorph AttachmentContext resource_type false */

// Validate validates this attachment context
func (m *AttachmentContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllocateAddresses(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var attachmentContextTypeAllocateAddressesPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IpPool","MacPool","Both","None"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		attachmentContextTypeAllocateAddressesPropEnum = append(attachmentContextTypeAllocateAddressesPropEnum, v)
	}
}

const (
	// AttachmentContextAllocateAddressesIPPool captures enum value "IpPool"
	AttachmentContextAllocateAddressesIPPool string = "IpPool"
	// AttachmentContextAllocateAddressesMacPool captures enum value "MacPool"
	AttachmentContextAllocateAddressesMacPool string = "MacPool"
	// AttachmentContextAllocateAddressesBoth captures enum value "Both"
	AttachmentContextAllocateAddressesBoth string = "Both"
	// AttachmentContextAllocateAddressesNone captures enum value "None"
	AttachmentContextAllocateAddressesNone string = "None"
)

// prop value enum
func (m *AttachmentContext) validateAllocateAddressesEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, attachmentContextTypeAllocateAddressesPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AttachmentContext) validateAllocateAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.AllocateAddresses) { // not required
		return nil
	}

	// value enum
	if err := m.validateAllocateAddressesEnum("allocate_addresses", "body", m.AllocateAddresses); err != nil {
		return err
	}

	return nil
}

func (m *AttachmentContext) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resource_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AttachmentContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttachmentContext) UnmarshalBinary(b []byte) error {
	var res AttachmentContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
