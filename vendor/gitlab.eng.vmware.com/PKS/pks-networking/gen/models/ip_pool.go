// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPPool Ip pool
// swagger:model IpPool

type IPPool struct {
	ManagedResource

	// Pool usage statistics
	//
	// Pool usage statistics
	// Read Only: true
	PoolUsage *PoolUsage `json:"pool_usage,omitempty"`

	// The collection of one or more subnet objects in a pool
	//
	// Subnets can be IPv4 or IPv6 and they should not overlap. The maximum number will not exceed 5 subnets.
	// Max Items: 5
	Subnets []*IPPoolSubnet `json:"subnets"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IPPool) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		PoolUsage *PoolUsage `json:"pool_usage,omitempty"`

		Subnets []*IPPoolSubnet `json:"subnets,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.PoolUsage = data.PoolUsage

	m.Subnets = data.Subnets

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IPPool) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		PoolUsage *PoolUsage `json:"pool_usage,omitempty"`

		Subnets []*IPPoolSubnet `json:"subnets,omitempty"`
	}

	data.PoolUsage = m.PoolUsage

	data.Subnets = m.Subnets

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this Ip pool
func (m *IPPool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoolUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPPool) validatePoolUsage(formats strfmt.Registry) error {

	if swag.IsZero(m.PoolUsage) { // not required
		return nil
	}

	if m.PoolUsage != nil {

		if err := m.PoolUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool_usage")
			}
			return err
		}
	}

	return nil
}

func (m *IPPool) validateSubnets(formats strfmt.Registry) error {

	if swag.IsZero(m.Subnets) { // not required
		return nil
	}

	iSubnetsSize := int64(len(m.Subnets))

	if err := validate.MaxItems("subnets", "body", iSubnetsSize, 5); err != nil {
		return err
	}

	for i := 0; i < len(m.Subnets); i++ {

		if swag.IsZero(m.Subnets[i]) { // not required
			continue
		}

		if m.Subnets[i] != nil {

			if err := m.Subnets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPPool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPPool) UnmarshalBinary(b []byte) error {
	var res IPPool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
