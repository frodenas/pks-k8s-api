// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransportZone transport zone
// swagger:model TransportZone

type TransportZone struct {
	ManagedResource

	// Name of the host switch on all transport nodes in this transport zone that will be used to run NSX network traffic.
	//
	// If this name is unset or empty then the default host switch name will be used.
	HostSwitchName *string `json:"host_switch_name,omitempty"`

	// Flag to indicate if transport nodes in this transport zone are connected through nested NSX.
	//
	// The flag only need to be set in nested NSX environment.
	NestedNsx *bool `json:"nested_nsx,omitempty"`

	// The transport type of this transport zone.
	// Required: true
	TransportType *string `json:"transport_type"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TransportZone) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		HostSwitchName *string `json:"host_switch_name,omitempty"`

		NestedNsx *bool `json:"nested_nsx,omitempty"`

		TransportType *string `json:"transport_type"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.HostSwitchName = data.HostSwitchName

	m.NestedNsx = data.NestedNsx

	m.TransportType = data.TransportType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TransportZone) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		HostSwitchName *string `json:"host_switch_name,omitempty"`

		NestedNsx *bool `json:"nested_nsx,omitempty"`

		TransportType *string `json:"transport_type"`
	}

	data.HostSwitchName = m.HostSwitchName

	data.NestedNsx = m.NestedNsx

	data.TransportType = m.TransportType

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this transport zone
func (m *TransportZone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var transportZoneTypeTransportTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OVERLAY","VLAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transportZoneTypeTransportTypePropEnum = append(transportZoneTypeTransportTypePropEnum, v)
	}
}

// property enum
func (m *TransportZone) validateTransportTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transportZoneTypeTransportTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TransportZone) validateTransportType(formats strfmt.Registry) error {

	if err := validate.Required("transport_type", "body", m.TransportType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTransportTypeEnum("transport_type", "body", *m.TransportType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransportZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransportZone) UnmarshalBinary(b []byte) error {
	var res TransportZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
