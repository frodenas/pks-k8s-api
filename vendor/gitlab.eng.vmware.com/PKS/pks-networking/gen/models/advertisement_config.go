// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AdvertisementConfig advertisement config
// swagger:model AdvertisementConfig

type AdvertisementConfig struct {
	ManagedResource

	// Flag to advertise all lb SNAT ips
	//
	// Flag to advertise all lb SNAT ips
	AdvertiseLbSnatIP *bool `json:"advertise_lb_snat_ip,omitempty"`

	// Flag to advertise lb vip
	//
	// Flag to advertise lb vip
	AdvertiseLbVip *bool `json:"advertise_lb_vip,omitempty"`

	// Flag to advertise all routes of nat
	//
	// Flag to advertise all routes of nat
	AdvertiseNatRoutes *bool `json:"advertise_nat_routes,omitempty"`

	// Flag to advertise all connected routes
	//
	// Flag to advertise all connected routes
	AdvertiseNsxConnectedRoutes *bool `json:"advertise_nsx_connected_routes,omitempty"`

	// Flag to advertise all static routes
	//
	// Flag to advertise all static routes
	AdvertiseStaticRoutes *bool `json:"advertise_static_routes,omitempty"`

	// Flag to enable this configuration
	//
	// Flag to enable this configuration
	Enabled *bool `json:"enabled,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AdvertisementConfig) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		AdvertiseLbSnatIP *bool `json:"advertise_lb_snat_ip,omitempty"`

		AdvertiseLbVip *bool `json:"advertise_lb_vip,omitempty"`

		AdvertiseNatRoutes *bool `json:"advertise_nat_routes,omitempty"`

		AdvertiseNsxConnectedRoutes *bool `json:"advertise_nsx_connected_routes,omitempty"`

		AdvertiseStaticRoutes *bool `json:"advertise_static_routes,omitempty"`

		Enabled *bool `json:"enabled,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.AdvertiseLbSnatIP = data.AdvertiseLbSnatIP

	m.AdvertiseLbVip = data.AdvertiseLbVip

	m.AdvertiseNatRoutes = data.AdvertiseNatRoutes

	m.AdvertiseNsxConnectedRoutes = data.AdvertiseNsxConnectedRoutes

	m.AdvertiseStaticRoutes = data.AdvertiseStaticRoutes

	m.Enabled = data.Enabled

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AdvertisementConfig) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		AdvertiseLbSnatIP *bool `json:"advertise_lb_snat_ip,omitempty"`

		AdvertiseLbVip *bool `json:"advertise_lb_vip,omitempty"`

		AdvertiseNatRoutes *bool `json:"advertise_nat_routes,omitempty"`

		AdvertiseNsxConnectedRoutes *bool `json:"advertise_nsx_connected_routes,omitempty"`

		AdvertiseStaticRoutes *bool `json:"advertise_static_routes,omitempty"`

		Enabled *bool `json:"enabled,omitempty"`
	}

	data.AdvertiseLbSnatIP = m.AdvertiseLbSnatIP

	data.AdvertiseLbVip = m.AdvertiseLbVip

	data.AdvertiseNatRoutes = m.AdvertiseNatRoutes

	data.AdvertiseNsxConnectedRoutes = m.AdvertiseNsxConnectedRoutes

	data.AdvertiseStaticRoutes = m.AdvertiseStaticRoutes

	data.Enabled = m.Enabled

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this advertisement config
func (m *AdvertisementConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *AdvertisementConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdvertisementConfig) UnmarshalBinary(b []byte) error {
	var res AdvertisementConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
