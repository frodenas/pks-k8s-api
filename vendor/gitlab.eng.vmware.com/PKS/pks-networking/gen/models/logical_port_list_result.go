// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LogicalPortListResult logical port list result
// swagger:model LogicalPortListResult

type LogicalPortListResult struct {
	ListResult

	// LogicalPort Results
	//
	// LogicalPort Results
	// Read Only: true
	Results []*LogicalPort `json:"results"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LogicalPortListResult) UnmarshalJSON(raw []byte) error {

	var aO0 ListResult
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ListResult = aO0

	var data struct {
		Results []*LogicalPort `json:"results,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.Results = data.Results

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LogicalPortListResult) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ListResult)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		Results []*LogicalPort `json:"results,omitempty"`
	}

	data.Results = m.Results

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this logical port list result
func (m *LogicalPortListResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ListResult.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogicalPortListResult) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {

		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {

			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogicalPortListResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogicalPortListResult) UnmarshalBinary(b []byte) error {
	var res LogicalPortListResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
