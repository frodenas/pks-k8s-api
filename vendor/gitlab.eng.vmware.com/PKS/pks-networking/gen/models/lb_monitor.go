// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LbMonitor lb monitor
// swagger:model LbMonitor

type LbMonitor struct {
	ManagedResource

	// Load balancers monitor the health of backend servers to ensure traffic
	// is not black holed.
	// There are two types of healthchecks: active and passive.
	// Passive healthchecks depend on failures in actual client traffic (e.g. RST
	// from server in response to a client connection) to detect that the server
	// or the application is down.
	// In case of active healthchecks, load balancer itself initiates new
	// connections (or sends ICMP ping) to the servers periodically to check their
	// health, completely independent of any data traffic.
	// Currently, active health monitors are supported for HTTP, HTTPS, TCP, UDP
	// and ICMP protocols.
	//
	// Required: true
	ResourceType string `json:"resource_type"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LbMonitor) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		ResourceType string `json:"resource_type"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.ResourceType = data.ResourceType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LbMonitor) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		ResourceType string `json:"resource_type"`
	}

	data.ResourceType = m.ResourceType

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this lb monitor
func (m *LbMonitor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var lbMonitorTypeResourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LbHttpMonitor","LbHttpsMonitor","LbIcmpMonitor","LbTcpMonitor","LbUdpMonitor","LbPassiveMonitor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lbMonitorTypeResourceTypePropEnum = append(lbMonitorTypeResourceTypePropEnum, v)
	}
}

// property enum
func (m *LbMonitor) validateResourceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lbMonitorTypeResourceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LbMonitor) validateResourceType(formats strfmt.Registry) error {

	if err := validate.RequiredString("resource_type", "body", string(m.ResourceType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateResourceTypeEnum("resource_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LbMonitor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LbMonitor) UnmarshalBinary(b []byte) error {
	var res LbMonitor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
