// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LbVirtualServer lb virtual server
// swagger:model LbVirtualServer

type LbVirtualServer struct {
	ManagedResource

	// application profile identifier
	//
	// The application profile defines the application protocol characteristics.
	// It is used to influence how load balancing is performed. Currently,
	// LbFastTCPProfile, LbFastUDPProfile and
	// LbHttpProfile, etc are supported.
	//
	// Required: true
	ApplicationProfileID *string `json:"application_profile_id"`

	// Virtual server side SSL binding setting
	//
	// The setting is used when load balancer acts as an SSL server and
	// terminating the client SSL connection
	//
	ClientSslProfileBinding *ClientSslProfileBinding `json:"client_ssl_profile_binding,omitempty"`

	// default pool member port when member port is not defined.
	DefaultPoolMemberPort string `json:"default_pool_member_port,omitempty"`

	// whether the virtual server is enabled
	//
	// whether the virtual server is enabled
	Enabled *bool `json:"enabled,omitempty"`

	// virtual server IP address
	// Required: true
	IPAddress *string `json:"ip_address"`

	// Assigned Internet Protocol in IP header, TCP, UDP are supported.
	//
	IPProtocol *string `json:"ip_protocol,omitempty"`

	// maximum concurrent connection number
	//
	// To ensure one virtual server does not over consume resources,
	// affecting other applications hosted on the same LBS, connections
	// to a virtual server can be capped.
	// If it is not specified, it means that connections are unlimited.
	//
	// Minimum: 1
	MaxConcurrentConnections int64 `json:"max_concurrent_connections,omitempty"`

	// maximum new connection rate in second
	//
	// To ensure one virtual server does not over consume resources,
	// connections to a member can be rate limited.
	// If it is not specified, it means that connection rate is unlimited.
	//
	// Minimum: 1
	MaxNewConnectionRate int64 `json:"max_new_connection_rate,omitempty"`

	// persistence profile identifier
	//
	// Persistence profile is used to allow related client connections to be
	// sent to the same backend server.
	//
	PersistenceProfileID string `json:"persistence_profile_id,omitempty"`

	// default server pool identifier
	//
	// The server pool(LbPool) contains backend servers. Server pool
	// consists of one or more servers, also referred to as pool members, that
	// are similarly configured and are running the same application.
	//
	PoolID string `json:"pool_id,omitempty"`

	// Port setting could be single port for both L7 mode and L4 mode.
	// For L4 mode, a single port range is also supported.
	// The port setting could be a single port or port range such as
	// "80", "1234-1236".
	//
	// Required: true
	Port *string `json:"port"`

	// List of load balancer rule identifiers
	//
	// Load balancer rules allow customization of load balancing behavior using
	// match/action rules. Currently, load balancer rules are supported for
	// only layer 7 virtual servers with LbHttpProfile.
	//
	// Max Items: 512
	RuleIds []string `json:"rule_ids"`

	// Pool side SSL binding setting
	//
	// The setting is used when load balancer acts as an SSL client and
	// establishing a connection to the backend server.
	//
	ServerSslProfileBinding *ServerSslProfileBinding `json:"server_ssl_profile_binding,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LbVirtualServer) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		ApplicationProfileID *string `json:"application_profile_id"`

		ClientSslProfileBinding *ClientSslProfileBinding `json:"client_ssl_profile_binding,omitempty"`

		DefaultPoolMemberPort string `json:"default_pool_member_port,omitempty"`

		Enabled *bool `json:"enabled,omitempty"`

		IPAddress *string `json:"ip_address"`

		IPProtocol *string `json:"ip_protocol,omitempty"`

		MaxConcurrentConnections int64 `json:"max_concurrent_connections,omitempty"`

		MaxNewConnectionRate int64 `json:"max_new_connection_rate,omitempty"`

		PersistenceProfileID string `json:"persistence_profile_id,omitempty"`

		PoolID string `json:"pool_id,omitempty"`

		Port *string `json:"port"`

		RuleIds []string `json:"rule_ids,omitempty"`

		ServerSslProfileBinding *ServerSslProfileBinding `json:"server_ssl_profile_binding,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.ApplicationProfileID = data.ApplicationProfileID

	m.ClientSslProfileBinding = data.ClientSslProfileBinding

	m.DefaultPoolMemberPort = data.DefaultPoolMemberPort

	m.Enabled = data.Enabled

	m.IPAddress = data.IPAddress

	m.IPProtocol = data.IPProtocol

	m.MaxConcurrentConnections = data.MaxConcurrentConnections

	m.MaxNewConnectionRate = data.MaxNewConnectionRate

	m.PersistenceProfileID = data.PersistenceProfileID

	m.PoolID = data.PoolID

	m.Port = data.Port

	m.RuleIds = data.RuleIds

	m.ServerSslProfileBinding = data.ServerSslProfileBinding

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LbVirtualServer) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		ApplicationProfileID *string `json:"application_profile_id"`

		ClientSslProfileBinding *ClientSslProfileBinding `json:"client_ssl_profile_binding,omitempty"`

		DefaultPoolMemberPort string `json:"default_pool_member_port,omitempty"`

		Enabled *bool `json:"enabled,omitempty"`

		IPAddress *string `json:"ip_address"`

		IPProtocol *string `json:"ip_protocol,omitempty"`

		MaxConcurrentConnections int64 `json:"max_concurrent_connections,omitempty"`

		MaxNewConnectionRate int64 `json:"max_new_connection_rate,omitempty"`

		PersistenceProfileID string `json:"persistence_profile_id,omitempty"`

		PoolID string `json:"pool_id,omitempty"`

		Port *string `json:"port"`

		RuleIds []string `json:"rule_ids,omitempty"`

		ServerSslProfileBinding *ServerSslProfileBinding `json:"server_ssl_profile_binding,omitempty"`
	}

	data.ApplicationProfileID = m.ApplicationProfileID

	data.ClientSslProfileBinding = m.ClientSslProfileBinding

	data.DefaultPoolMemberPort = m.DefaultPoolMemberPort

	data.Enabled = m.Enabled

	data.IPAddress = m.IPAddress

	data.IPProtocol = m.IPProtocol

	data.MaxConcurrentConnections = m.MaxConcurrentConnections

	data.MaxNewConnectionRate = m.MaxNewConnectionRate

	data.PersistenceProfileID = m.PersistenceProfileID

	data.PoolID = m.PoolID

	data.Port = m.Port

	data.RuleIds = m.RuleIds

	data.ServerSslProfileBinding = m.ServerSslProfileBinding

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this lb virtual server
func (m *LbVirtualServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationProfileID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientSslProfileBinding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxConcurrentConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxNewConnectionRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerSslProfileBinding(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LbVirtualServer) validateApplicationProfileID(formats strfmt.Registry) error {

	if err := validate.Required("application_profile_id", "body", m.ApplicationProfileID); err != nil {
		return err
	}

	return nil
}

func (m *LbVirtualServer) validateClientSslProfileBinding(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientSslProfileBinding) { // not required
		return nil
	}

	if m.ClientSslProfileBinding != nil {

		if err := m.ClientSslProfileBinding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_ssl_profile_binding")
			}
			return err
		}
	}

	return nil
}

func (m *LbVirtualServer) validateIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("ip_address", "body", m.IPAddress); err != nil {
		return err
	}

	return nil
}

var lbVirtualServerTypeIPProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TCP","UDP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lbVirtualServerTypeIPProtocolPropEnum = append(lbVirtualServerTypeIPProtocolPropEnum, v)
	}
}

// property enum
func (m *LbVirtualServer) validateIPProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lbVirtualServerTypeIPProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LbVirtualServer) validateIPProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.IPProtocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPProtocolEnum("ip_protocol", "body", *m.IPProtocol); err != nil {
		return err
	}

	return nil
}

func (m *LbVirtualServer) validateMaxConcurrentConnections(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxConcurrentConnections) { // not required
		return nil
	}

	if err := validate.MinimumInt("max_concurrent_connections", "body", int64(m.MaxConcurrentConnections), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *LbVirtualServer) validateMaxNewConnectionRate(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxNewConnectionRate) { // not required
		return nil
	}

	if err := validate.MinimumInt("max_new_connection_rate", "body", int64(m.MaxNewConnectionRate), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *LbVirtualServer) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *LbVirtualServer) validateRuleIds(formats strfmt.Registry) error {

	if swag.IsZero(m.RuleIds) { // not required
		return nil
	}

	iRuleIdsSize := int64(len(m.RuleIds))

	if err := validate.MaxItems("rule_ids", "body", iRuleIdsSize, 512); err != nil {
		return err
	}

	return nil
}

func (m *LbVirtualServer) validateServerSslProfileBinding(formats strfmt.Registry) error {

	if swag.IsZero(m.ServerSslProfileBinding) { // not required
		return nil
	}

	if m.ServerSslProfileBinding != nil {

		if err := m.ServerSslProfileBinding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server_ssl_profile_binding")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LbVirtualServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LbVirtualServer) UnmarshalBinary(b []byte) error {
	var res LbVirtualServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
