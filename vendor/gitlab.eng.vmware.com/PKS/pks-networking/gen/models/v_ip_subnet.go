// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VIPSubnet v IP subnet
// swagger:model VIPSubnet

type VIPSubnet struct {

	// IPv4 Addresses which will be owned by uplink on active node.
	//
	// Array of IP address subnets which will be used as floating IP addresses. | These IPs will move and will be owned by Active node.
	// Required: true
	// Max Items: 1
	// Min Items: 1
	ActiveVipAddresses []strfmt.IPv4 `json:"active_vip_addresses"`

	// Subnet Prefix Length
	//
	// Subnet Prefix Length
	// Required: true
	// Maximum: 31
	// Minimum: 1
	PrefixLength *int64 `json:"prefix_length"`
}

/* polymorph VIPSubnet active_vip_addresses false */

/* polymorph VIPSubnet prefix_length false */

// Validate validates this v IP subnet
func (m *VIPSubnet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveVipAddresses(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrefixLength(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VIPSubnet) validateActiveVipAddresses(formats strfmt.Registry) error {

	if err := validate.Required("active_vip_addresses", "body", m.ActiveVipAddresses); err != nil {
		return err
	}

	iActiveVipAddressesSize := int64(len(m.ActiveVipAddresses))

	if err := validate.MinItems("active_vip_addresses", "body", iActiveVipAddressesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("active_vip_addresses", "body", iActiveVipAddressesSize, 1); err != nil {
		return err
	}

	return nil
}

func (m *VIPSubnet) validatePrefixLength(formats strfmt.Registry) error {

	if err := validate.Required("prefix_length", "body", m.PrefixLength); err != nil {
		return err
	}

	if err := validate.MinimumInt("prefix_length", "body", int64(*m.PrefixLength), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("prefix_length", "body", int64(*m.PrefixLength), 31, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VIPSubnet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VIPSubnet) UnmarshalBinary(b []byte) error {
	var res VIPSubnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
