// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LogicalPortAttachment Logical port attachment
//
// Logical port attachment
// swagger:model LogicalPortAttachment

type LogicalPortAttachment struct {

	// Indicates the type of logical port attachment. By default it is Virtual Machine interface (VIF)
	AttachmentType *string `json:"attachment_type,omitempty"`

	// Attachment context
	//
	// Extra context data for the attachment
	Context *AttachmentContext `json:"context,omitempty"`

	// Identifier of the interface attached to the logical port
	//
	// Identifier of the interface attached to the logical port
	// Required: true
	ID *string `json:"id"`
}

/* polymorph LogicalPortAttachment attachment_type false */

/* polymorph LogicalPortAttachment context false */

/* polymorph LogicalPortAttachment id false */

// Validate validates this logical port attachment
func (m *LogicalPortAttachment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachmentType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContext(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var logicalPortAttachmentTypeAttachmentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VIF","LOGICALROUTER","BRIDGEENDPOINT","DHCP_SERVICE","METADATA_PROXY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logicalPortAttachmentTypeAttachmentTypePropEnum = append(logicalPortAttachmentTypeAttachmentTypePropEnum, v)
	}
}

const (
	// LogicalPortAttachmentAttachmentTypeVIF captures enum value "VIF"
	LogicalPortAttachmentAttachmentTypeVIF string = "VIF"
	// LogicalPortAttachmentAttachmentTypeLOGICALROUTER captures enum value "LOGICALROUTER"
	LogicalPortAttachmentAttachmentTypeLOGICALROUTER string = "LOGICALROUTER"
	// LogicalPortAttachmentAttachmentTypeBRIDGEENDPOINT captures enum value "BRIDGEENDPOINT"
	LogicalPortAttachmentAttachmentTypeBRIDGEENDPOINT string = "BRIDGEENDPOINT"
	// LogicalPortAttachmentAttachmentTypeDHCPSERVICE captures enum value "DHCP_SERVICE"
	LogicalPortAttachmentAttachmentTypeDHCPSERVICE string = "DHCP_SERVICE"
	// LogicalPortAttachmentAttachmentTypeMETADATAPROXY captures enum value "METADATA_PROXY"
	LogicalPortAttachmentAttachmentTypeMETADATAPROXY string = "METADATA_PROXY"
)

// prop value enum
func (m *LogicalPortAttachment) validateAttachmentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, logicalPortAttachmentTypeAttachmentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LogicalPortAttachment) validateAttachmentType(formats strfmt.Registry) error {

	if swag.IsZero(m.AttachmentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAttachmentTypeEnum("attachment_type", "body", *m.AttachmentType); err != nil {
		return err
	}

	return nil
}

func (m *LogicalPortAttachment) validateContext(formats strfmt.Registry) error {

	if swag.IsZero(m.Context) { // not required
		return nil
	}

	if m.Context != nil {

		if err := m.Context.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("context")
			}
			return err
		}
	}

	return nil
}

func (m *LogicalPortAttachment) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogicalPortAttachment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogicalPortAttachment) UnmarshalBinary(b []byte) error {
	var res LogicalPortAttachment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
