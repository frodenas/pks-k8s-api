// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeStatusProperties node status properties
// swagger:model NodeStatusProperties

type NodeStatusProperties struct {
	Resource

	// Number of CPU cores on the system
	//
	// Number of CPU cores on the system
	// Read Only: true
	CPUCores int64 `json:"cpu_cores,omitempty"`

	// File systems configured on the system
	//
	// File systems configured on the system
	// Read Only: true
	FileSystems []*NodeFileSystemProperties `json:"file_systems"`

	// One, five, and fifteen minute load averages for the system
	//
	// One, five, and fifteen minute load averages for the system
	// Read Only: true
	LoadAverage []float64 `json:"load_average"`

	// Amount of RAM on the system that can be flushed out to disk, in kilobytes
	//
	// Amount of RAM on the system that can be flushed out to disk, in kilobytes
	// Read Only: true
	MemCache int64 `json:"mem_cache,omitempty"`

	// Amount of RAM allocated to the system, in kilobytes
	//
	// Amount of RAM allocated to the system, in kilobytes
	// Read Only: true
	MemTotal int64 `json:"mem_total,omitempty"`

	// Amount of RAM in use on the system, in kilobytes
	//
	// Amount of RAM in use on the system, in kilobytes
	// Read Only: true
	MemUsed int64 `json:"mem_used,omitempty"`

	// Source of status data.
	// Read Only: true
	Source string `json:"source,omitempty"`

	// Amount of disk available for swap, in kilobytes
	//
	// Amount of disk available for swap, in kilobytes
	// Read Only: true
	SwapTotal int64 `json:"swap_total,omitempty"`

	// Amount of swap disk in use, in kilobytes
	//
	// Amount of swap disk in use, in kilobytes
	// Read Only: true
	SwapUsed int64 `json:"swap_used,omitempty"`

	// Current time expressed in milliseconds since epoch
	// Read Only: true
	SystemTime int64 `json:"system_time,omitempty"`

	// Milliseconds since system start
	//
	// Milliseconds since system start
	// Read Only: true
	Uptime int64 `json:"uptime,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NodeStatusProperties) UnmarshalJSON(raw []byte) error {

	var aO0 Resource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Resource = aO0

	var data struct {
		CPUCores int64 `json:"cpu_cores,omitempty"`

		FileSystems []*NodeFileSystemProperties `json:"file_systems,omitempty"`

		LoadAverage []float64 `json:"load_average,omitempty"`

		MemCache int64 `json:"mem_cache,omitempty"`

		MemTotal int64 `json:"mem_total,omitempty"`

		MemUsed int64 `json:"mem_used,omitempty"`

		Source string `json:"source,omitempty"`

		SwapTotal int64 `json:"swap_total,omitempty"`

		SwapUsed int64 `json:"swap_used,omitempty"`

		SystemTime int64 `json:"system_time,omitempty"`

		Uptime int64 `json:"uptime,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.CPUCores = data.CPUCores

	m.FileSystems = data.FileSystems

	m.LoadAverage = data.LoadAverage

	m.MemCache = data.MemCache

	m.MemTotal = data.MemTotal

	m.MemUsed = data.MemUsed

	m.Source = data.Source

	m.SwapTotal = data.SwapTotal

	m.SwapUsed = data.SwapUsed

	m.SystemTime = data.SystemTime

	m.Uptime = data.Uptime

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NodeStatusProperties) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.Resource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		CPUCores int64 `json:"cpu_cores,omitempty"`

		FileSystems []*NodeFileSystemProperties `json:"file_systems,omitempty"`

		LoadAverage []float64 `json:"load_average,omitempty"`

		MemCache int64 `json:"mem_cache,omitempty"`

		MemTotal int64 `json:"mem_total,omitempty"`

		MemUsed int64 `json:"mem_used,omitempty"`

		Source string `json:"source,omitempty"`

		SwapTotal int64 `json:"swap_total,omitempty"`

		SwapUsed int64 `json:"swap_used,omitempty"`

		SystemTime int64 `json:"system_time,omitempty"`

		Uptime int64 `json:"uptime,omitempty"`
	}

	data.CPUCores = m.CPUCores

	data.FileSystems = m.FileSystems

	data.LoadAverage = m.LoadAverage

	data.MemCache = m.MemCache

	data.MemTotal = m.MemTotal

	data.MemUsed = m.MemUsed

	data.Source = m.Source

	data.SwapTotal = m.SwapTotal

	data.SwapUsed = m.SwapUsed

	data.SystemTime = m.SystemTime

	data.Uptime = m.Uptime

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this node status properties
func (m *NodeStatusProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileSystems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoadAverage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeStatusProperties) validateFileSystems(formats strfmt.Registry) error {

	if swag.IsZero(m.FileSystems) { // not required
		return nil
	}

	for i := 0; i < len(m.FileSystems); i++ {

		if swag.IsZero(m.FileSystems[i]) { // not required
			continue
		}

		if m.FileSystems[i] != nil {

			if err := m.FileSystems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("file_systems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NodeStatusProperties) validateLoadAverage(formats strfmt.Registry) error {

	if swag.IsZero(m.LoadAverage) { // not required
		return nil
	}

	return nil
}

var nodeStatusPropertiesTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["realtime","cached"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeStatusPropertiesTypeSourcePropEnum = append(nodeStatusPropertiesTypeSourcePropEnum, v)
	}
}

// property enum
func (m *NodeStatusProperties) validateSourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nodeStatusPropertiesTypeSourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NodeStatusProperties) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceEnum("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeStatusProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeStatusProperties) UnmarshalBinary(b []byte) error {
	var res NodeStatusProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
