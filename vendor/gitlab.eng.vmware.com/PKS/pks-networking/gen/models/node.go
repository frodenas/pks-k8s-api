// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Node node
// swagger:model Node

type Node struct {
	ManagedResource

	// Discovered IP Addresses of the fabric node, version 4 or 6
	//
	// Discovered IP Addresses of the fabric node, version 4 or 6
	// Read Only: true
	DiscoveredIPAddresses []string `json:"discovered_ip_addresses"`

	// ID of the Node maintained on the Node and used to recognize the Node
	//
	// ID of the Node maintained on the Node and used to recognize the Node
	ExternalID string `json:"external_id,omitempty"`

	// Fully qualified domain name of the fabric node
	//
	// Fully qualified domain name of the fabric node
	// Read Only: true
	Fqdn string `json:"fqdn,omitempty"`

	// IP Addresses of the Node, version 4 or 6
	//
	// IP Addresses of the Node, version 4 or 6. This property is mandatory for all nodes except for
	// automatic deployment of edge virtual machine node. For automatic deployment, the ip address from
	// management_port_subnets property will be considered.
	//
	IPAddresses []string `json:"ip_addresses"`

	// Fabric node type, for example 'HostNode', 'EdgeNode' or 'PublicCloudGatewayNode'
	//
	// Fabric node type, for example 'HostNode', 'EdgeNode' or 'PublicCloudGatewayNode'
	// Required: true
	ResourceType string `json:"resource_type"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Node) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		DiscoveredIPAddresses []string `json:"discovered_ip_addresses,omitempty"`

		ExternalID string `json:"external_id,omitempty"`

		Fqdn string `json:"fqdn,omitempty"`

		IPAddresses []string `json:"ip_addresses,omitempty"`

		ResourceType string `json:"resource_type"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.DiscoveredIPAddresses = data.DiscoveredIPAddresses

	m.ExternalID = data.ExternalID

	m.Fqdn = data.Fqdn

	m.IPAddresses = data.IPAddresses

	m.ResourceType = data.ResourceType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Node) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		DiscoveredIPAddresses []string `json:"discovered_ip_addresses,omitempty"`

		ExternalID string `json:"external_id,omitempty"`

		Fqdn string `json:"fqdn,omitempty"`

		IPAddresses []string `json:"ip_addresses,omitempty"`

		ResourceType string `json:"resource_type"`
	}

	data.DiscoveredIPAddresses = m.DiscoveredIPAddresses

	data.ExternalID = m.ExternalID

	data.Fqdn = m.Fqdn

	data.IPAddresses = m.IPAddresses

	data.ResourceType = m.ResourceType

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this node
func (m *Node) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscoveredIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Node) validateDiscoveredIPAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.DiscoveredIPAddresses) { // not required
		return nil
	}

	return nil
}

func (m *Node) validateIPAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.IPAddresses) { // not required
		return nil
	}

	return nil
}

func (m *Node) validateResourceType(formats strfmt.Registry) error {

	if err := validate.RequiredString("resource_type", "body", string(m.ResourceType)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Node) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Node) UnmarshalBinary(b []byte) error {
	var res Node
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
