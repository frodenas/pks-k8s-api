// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeStatus Runtime status information of the fabric node.
//
// Runtime status information of the fabric node.
// swagger:model NodeStatus

type NodeStatus struct {

	// HostNode external id
	//
	// HostNode external id
	ExternalID string `json:"external_id,omitempty"`

	// Install/Uninstall status of deployment.
	//
	// This enum specifies the current nsx install state for host node or
	// current deployment and ready state for edge node.
	// The ready status 'NODE_READY' indicates whether edge node is
	// ready to become a transport node.
	// The status 'EDGE_CONFIG_ERROR' indicates that edge hardware or underlying
	// host is not supported.
	//
	// Read Only: true
	HostNodeDeploymentStatus string `json:"host_node_deployment_status,omitempty"`

	// Is true if inventory sync is paused else false
	//
	// Is true if inventory sync is paused else false
	// Read Only: true
	InventorySyncPaused *bool `json:"inventory_sync_paused,omitempty"`

	// Inventory sync auto re-enable target time, in epoch milis
	// Read Only: true
	InventorySyncReenableTime int64 `json:"inventory_sync_reenable_time,omitempty"`

	// Timestamp of the last heartbeat status change, in epoch milliseconds.
	// Read Only: true
	LastHeartbeatTimestamp int64 `json:"last_heartbeat_timestamp,omitempty"`

	// Timestamp of the last successful update of Inventory, in epoch milliseconds.
	// Read Only: true
	LastSyncTime int64 `json:"last_sync_time,omitempty"`

	// Indicates the fabric node's LCP<->CCP channel connectivity status, UP, DOWN, DEGRADED, UNKNOWN.
	//
	// Indicates the fabric node's LCP<->CCP channel connectivity status, UP, DOWN, DEGRADED, UNKNOWN.
	// Read Only: true
	LcpConnectivityStatus string `json:"lcp_connectivity_status,omitempty"`

	// Details, if any, about the current LCP<->CCP channel connectivity status of the fabric node.
	//
	// Details, if any, about the current LCP<->CCP channel connectivity status of the fabric node.
	// Read Only: true
	LcpConnectivityStatusDetails []*ControlConnStatus `json:"lcp_connectivity_status_details"`

	// Indicates the fabric node's status of maintenance mode, OFF, ENTERING, ON, EXITING.
	//
	// Indicates the fabric node's status of maintenance mode, OFF, ENTERING, ON, EXITING.
	// Read Only: true
	MaintenanceMode string `json:"maintenance_mode,omitempty"`

	// Indicates the fabric node's MP<->MPA channel connectivity status, UP, DOWN, UNKNOWN.
	//
	// Indicates the fabric node's MP<->MPA channel connectivity status, UP, DOWN, UNKNOWN.
	// Read Only: true
	MpaConnectivityStatus string `json:"mpa_connectivity_status,omitempty"`

	// Details, if any, about the current MP<->MPA channel connectivity status of the fabric node.
	//
	// Details, if any, about the current MP<->MPA channel connectivity status of the fabric node.
	// Read Only: true
	MpaConnectivityStatusDetails string `json:"mpa_connectivity_status_details,omitempty"`

	// Software version of the fabric node.
	//
	// Software version of the fabric node.
	// Read Only: true
	SoftwareVersion string `json:"software_version,omitempty"`

	// Node status properties
	//
	// Node status properties
	// Read Only: true
	SystemStatus *NodeStatusProperties `json:"system_status,omitempty"`
}

/* polymorph NodeStatus external_id false */

/* polymorph NodeStatus host_node_deployment_status false */

/* polymorph NodeStatus inventory_sync_paused false */

/* polymorph NodeStatus inventory_sync_reenable_time false */

/* polymorph NodeStatus last_heartbeat_timestamp false */

/* polymorph NodeStatus last_sync_time false */

/* polymorph NodeStatus lcp_connectivity_status false */

/* polymorph NodeStatus lcp_connectivity_status_details false */

/* polymorph NodeStatus maintenance_mode false */

/* polymorph NodeStatus mpa_connectivity_status false */

/* polymorph NodeStatus mpa_connectivity_status_details false */

/* polymorph NodeStatus software_version false */

/* polymorph NodeStatus system_status false */

// Validate validates this node status
func (m *NodeStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostNodeDeploymentStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLcpConnectivityStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLcpConnectivityStatusDetails(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaintenanceMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMpaConnectivityStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nodeStatusTypeHostNodeDeploymentStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOT_PREPARED","INSTALL_IN_PROGRESS","INSTALL_FAILED","INSTALL_SUCCESSFUL","UNINSTALL_IN_PROGRESS","UNINSTALL_FAILED","UNINSTALL_SUCCESSFUL","UPGRADE_IN_PROGRESS","UPGRADE_FAILED","PENDING_UPGRADE","NOT_AVAILABLE","VM_DEPLOYMENT_QUEUED","VM_DEPLOYMENT_IN_PROGRESS","VM_DEPLOYMENT_FAILED","VM_POWER_ON_IN_PROGRESS","VM_POWER_ON_FAILED","REGISTRATION_PENDING","NODE_NOT_READY","NODE_READY","VM_POWER_OFF_IN_PROGRESS","VM_POWER_OFF_FAILED","VM_UNDEPLOY_IN_PROGRESS","VM_UNDEPLOY_FAILED","VM_UNDEPLOY_SUCCESSFUL","EDGE_CONFIG_ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeStatusTypeHostNodeDeploymentStatusPropEnum = append(nodeStatusTypeHostNodeDeploymentStatusPropEnum, v)
	}
}

const (
	// NodeStatusHostNodeDeploymentStatusNOTPREPARED captures enum value "NOT_PREPARED"
	NodeStatusHostNodeDeploymentStatusNOTPREPARED string = "NOT_PREPARED"
	// NodeStatusHostNodeDeploymentStatusINSTALLINPROGRESS captures enum value "INSTALL_IN_PROGRESS"
	NodeStatusHostNodeDeploymentStatusINSTALLINPROGRESS string = "INSTALL_IN_PROGRESS"
	// NodeStatusHostNodeDeploymentStatusINSTALLFAILED captures enum value "INSTALL_FAILED"
	NodeStatusHostNodeDeploymentStatusINSTALLFAILED string = "INSTALL_FAILED"
	// NodeStatusHostNodeDeploymentStatusINSTALLSUCCESSFUL captures enum value "INSTALL_SUCCESSFUL"
	NodeStatusHostNodeDeploymentStatusINSTALLSUCCESSFUL string = "INSTALL_SUCCESSFUL"
	// NodeStatusHostNodeDeploymentStatusUNINSTALLINPROGRESS captures enum value "UNINSTALL_IN_PROGRESS"
	NodeStatusHostNodeDeploymentStatusUNINSTALLINPROGRESS string = "UNINSTALL_IN_PROGRESS"
	// NodeStatusHostNodeDeploymentStatusUNINSTALLFAILED captures enum value "UNINSTALL_FAILED"
	NodeStatusHostNodeDeploymentStatusUNINSTALLFAILED string = "UNINSTALL_FAILED"
	// NodeStatusHostNodeDeploymentStatusUNINSTALLSUCCESSFUL captures enum value "UNINSTALL_SUCCESSFUL"
	NodeStatusHostNodeDeploymentStatusUNINSTALLSUCCESSFUL string = "UNINSTALL_SUCCESSFUL"
	// NodeStatusHostNodeDeploymentStatusUPGRADEINPROGRESS captures enum value "UPGRADE_IN_PROGRESS"
	NodeStatusHostNodeDeploymentStatusUPGRADEINPROGRESS string = "UPGRADE_IN_PROGRESS"
	// NodeStatusHostNodeDeploymentStatusUPGRADEFAILED captures enum value "UPGRADE_FAILED"
	NodeStatusHostNodeDeploymentStatusUPGRADEFAILED string = "UPGRADE_FAILED"
	// NodeStatusHostNodeDeploymentStatusPENDINGUPGRADE captures enum value "PENDING_UPGRADE"
	NodeStatusHostNodeDeploymentStatusPENDINGUPGRADE string = "PENDING_UPGRADE"
	// NodeStatusHostNodeDeploymentStatusNOTAVAILABLE captures enum value "NOT_AVAILABLE"
	NodeStatusHostNodeDeploymentStatusNOTAVAILABLE string = "NOT_AVAILABLE"
	// NodeStatusHostNodeDeploymentStatusVMDEPLOYMENTQUEUED captures enum value "VM_DEPLOYMENT_QUEUED"
	NodeStatusHostNodeDeploymentStatusVMDEPLOYMENTQUEUED string = "VM_DEPLOYMENT_QUEUED"
	// NodeStatusHostNodeDeploymentStatusVMDEPLOYMENTINPROGRESS captures enum value "VM_DEPLOYMENT_IN_PROGRESS"
	NodeStatusHostNodeDeploymentStatusVMDEPLOYMENTINPROGRESS string = "VM_DEPLOYMENT_IN_PROGRESS"
	// NodeStatusHostNodeDeploymentStatusVMDEPLOYMENTFAILED captures enum value "VM_DEPLOYMENT_FAILED"
	NodeStatusHostNodeDeploymentStatusVMDEPLOYMENTFAILED string = "VM_DEPLOYMENT_FAILED"
	// NodeStatusHostNodeDeploymentStatusVMPOWERONINPROGRESS captures enum value "VM_POWER_ON_IN_PROGRESS"
	NodeStatusHostNodeDeploymentStatusVMPOWERONINPROGRESS string = "VM_POWER_ON_IN_PROGRESS"
	// NodeStatusHostNodeDeploymentStatusVMPOWERONFAILED captures enum value "VM_POWER_ON_FAILED"
	NodeStatusHostNodeDeploymentStatusVMPOWERONFAILED string = "VM_POWER_ON_FAILED"
	// NodeStatusHostNodeDeploymentStatusREGISTRATIONPENDING captures enum value "REGISTRATION_PENDING"
	NodeStatusHostNodeDeploymentStatusREGISTRATIONPENDING string = "REGISTRATION_PENDING"
	// NodeStatusHostNodeDeploymentStatusNODENOTREADY captures enum value "NODE_NOT_READY"
	NodeStatusHostNodeDeploymentStatusNODENOTREADY string = "NODE_NOT_READY"
	// NodeStatusHostNodeDeploymentStatusNODEREADY captures enum value "NODE_READY"
	NodeStatusHostNodeDeploymentStatusNODEREADY string = "NODE_READY"
	// NodeStatusHostNodeDeploymentStatusVMPOWEROFFINPROGRESS captures enum value "VM_POWER_OFF_IN_PROGRESS"
	NodeStatusHostNodeDeploymentStatusVMPOWEROFFINPROGRESS string = "VM_POWER_OFF_IN_PROGRESS"
	// NodeStatusHostNodeDeploymentStatusVMPOWEROFFFAILED captures enum value "VM_POWER_OFF_FAILED"
	NodeStatusHostNodeDeploymentStatusVMPOWEROFFFAILED string = "VM_POWER_OFF_FAILED"
	// NodeStatusHostNodeDeploymentStatusVMUNDEPLOYINPROGRESS captures enum value "VM_UNDEPLOY_IN_PROGRESS"
	NodeStatusHostNodeDeploymentStatusVMUNDEPLOYINPROGRESS string = "VM_UNDEPLOY_IN_PROGRESS"
	// NodeStatusHostNodeDeploymentStatusVMUNDEPLOYFAILED captures enum value "VM_UNDEPLOY_FAILED"
	NodeStatusHostNodeDeploymentStatusVMUNDEPLOYFAILED string = "VM_UNDEPLOY_FAILED"
	// NodeStatusHostNodeDeploymentStatusVMUNDEPLOYSUCCESSFUL captures enum value "VM_UNDEPLOY_SUCCESSFUL"
	NodeStatusHostNodeDeploymentStatusVMUNDEPLOYSUCCESSFUL string = "VM_UNDEPLOY_SUCCESSFUL"
	// NodeStatusHostNodeDeploymentStatusEDGECONFIGERROR captures enum value "EDGE_CONFIG_ERROR"
	NodeStatusHostNodeDeploymentStatusEDGECONFIGERROR string = "EDGE_CONFIG_ERROR"
)

// prop value enum
func (m *NodeStatus) validateHostNodeDeploymentStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nodeStatusTypeHostNodeDeploymentStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NodeStatus) validateHostNodeDeploymentStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.HostNodeDeploymentStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateHostNodeDeploymentStatusEnum("host_node_deployment_status", "body", m.HostNodeDeploymentStatus); err != nil {
		return err
	}

	return nil
}

var nodeStatusTypeLcpConnectivityStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UP","DOWN","DEGRADED","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeStatusTypeLcpConnectivityStatusPropEnum = append(nodeStatusTypeLcpConnectivityStatusPropEnum, v)
	}
}

const (
	// NodeStatusLcpConnectivityStatusUP captures enum value "UP"
	NodeStatusLcpConnectivityStatusUP string = "UP"
	// NodeStatusLcpConnectivityStatusDOWN captures enum value "DOWN"
	NodeStatusLcpConnectivityStatusDOWN string = "DOWN"
	// NodeStatusLcpConnectivityStatusDEGRADED captures enum value "DEGRADED"
	NodeStatusLcpConnectivityStatusDEGRADED string = "DEGRADED"
	// NodeStatusLcpConnectivityStatusUNKNOWN captures enum value "UNKNOWN"
	NodeStatusLcpConnectivityStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *NodeStatus) validateLcpConnectivityStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nodeStatusTypeLcpConnectivityStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NodeStatus) validateLcpConnectivityStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.LcpConnectivityStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateLcpConnectivityStatusEnum("lcp_connectivity_status", "body", m.LcpConnectivityStatus); err != nil {
		return err
	}

	return nil
}

func (m *NodeStatus) validateLcpConnectivityStatusDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.LcpConnectivityStatusDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.LcpConnectivityStatusDetails); i++ {

		if swag.IsZero(m.LcpConnectivityStatusDetails[i]) { // not required
			continue
		}

		if m.LcpConnectivityStatusDetails[i] != nil {

			if err := m.LcpConnectivityStatusDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lcp_connectivity_status_details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var nodeStatusTypeMaintenanceModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OFF","ENTERING","ON","EXITING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeStatusTypeMaintenanceModePropEnum = append(nodeStatusTypeMaintenanceModePropEnum, v)
	}
}

const (
	// NodeStatusMaintenanceModeOFF captures enum value "OFF"
	NodeStatusMaintenanceModeOFF string = "OFF"
	// NodeStatusMaintenanceModeENTERING captures enum value "ENTERING"
	NodeStatusMaintenanceModeENTERING string = "ENTERING"
	// NodeStatusMaintenanceModeON captures enum value "ON"
	NodeStatusMaintenanceModeON string = "ON"
	// NodeStatusMaintenanceModeEXITING captures enum value "EXITING"
	NodeStatusMaintenanceModeEXITING string = "EXITING"
)

// prop value enum
func (m *NodeStatus) validateMaintenanceModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nodeStatusTypeMaintenanceModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NodeStatus) validateMaintenanceMode(formats strfmt.Registry) error {

	if swag.IsZero(m.MaintenanceMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateMaintenanceModeEnum("maintenance_mode", "body", m.MaintenanceMode); err != nil {
		return err
	}

	return nil
}

var nodeStatusTypeMpaConnectivityStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UP","DOWN","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeStatusTypeMpaConnectivityStatusPropEnum = append(nodeStatusTypeMpaConnectivityStatusPropEnum, v)
	}
}

const (
	// NodeStatusMpaConnectivityStatusUP captures enum value "UP"
	NodeStatusMpaConnectivityStatusUP string = "UP"
	// NodeStatusMpaConnectivityStatusDOWN captures enum value "DOWN"
	NodeStatusMpaConnectivityStatusDOWN string = "DOWN"
	// NodeStatusMpaConnectivityStatusUNKNOWN captures enum value "UNKNOWN"
	NodeStatusMpaConnectivityStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *NodeStatus) validateMpaConnectivityStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nodeStatusTypeMpaConnectivityStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NodeStatus) validateMpaConnectivityStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.MpaConnectivityStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateMpaConnectivityStatusEnum("mpa_connectivity_status", "body", m.MpaConnectivityStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeStatus) UnmarshalBinary(b []byte) error {
	var res NodeStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
