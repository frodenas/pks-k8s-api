// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LogicalPort logical port
// swagger:model LogicalPort

type LogicalPort struct {
	ManagedResource

	// Address bindings for logical port
	//
	// Address bindings for logical port
	// Max Items: 128
	// Min Items: 0
	AddressBindings []*PacketAddressClassifier `json:"address_bindings"`

	// Represents Desired state of the logical port
	//
	// Represents Desired state of the logical port
	// Required: true
	AdminState *string `json:"admin_state"`

	// Logical port attachment
	//
	// Logical port attachment
	Attachment *LogicalPortAttachment `json:"attachment,omitempty"`

	// Id of the Logical switch that this port belongs to.
	//
	// Id of the Logical switch that this port belongs to.
	// Required: true
	LogicalSwitchID *string `json:"logical_switch_id"`

	// switching profile ids
	SwitchingProfileIds []*SwitchingProfileTypeIDEntry `json:"switching_profile_ids"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LogicalPort) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		AddressBindings []*PacketAddressClassifier `json:"address_bindings,omitempty"`

		AdminState *string `json:"admin_state"`

		Attachment *LogicalPortAttachment `json:"attachment,omitempty"`

		LogicalSwitchID *string `json:"logical_switch_id"`

		SwitchingProfileIds []*SwitchingProfileTypeIDEntry `json:"switching_profile_ids,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.AddressBindings = data.AddressBindings

	m.AdminState = data.AdminState

	m.Attachment = data.Attachment

	m.LogicalSwitchID = data.LogicalSwitchID

	m.SwitchingProfileIds = data.SwitchingProfileIds

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LogicalPort) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		AddressBindings []*PacketAddressClassifier `json:"address_bindings,omitempty"`

		AdminState *string `json:"admin_state"`

		Attachment *LogicalPortAttachment `json:"attachment,omitempty"`

		LogicalSwitchID *string `json:"logical_switch_id"`

		SwitchingProfileIds []*SwitchingProfileTypeIDEntry `json:"switching_profile_ids,omitempty"`
	}

	data.AddressBindings = m.AddressBindings

	data.AdminState = m.AdminState

	data.Attachment = m.Attachment

	data.LogicalSwitchID = m.LogicalSwitchID

	data.SwitchingProfileIds = m.SwitchingProfileIds

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this logical port
func (m *LogicalPort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressBindings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttachment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogicalSwitchID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwitchingProfileIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogicalPort) validateAddressBindings(formats strfmt.Registry) error {

	if swag.IsZero(m.AddressBindings) { // not required
		return nil
	}

	iAddressBindingsSize := int64(len(m.AddressBindings))

	if err := validate.MinItems("address_bindings", "body", iAddressBindingsSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("address_bindings", "body", iAddressBindingsSize, 128); err != nil {
		return err
	}

	for i := 0; i < len(m.AddressBindings); i++ {

		if swag.IsZero(m.AddressBindings[i]) { // not required
			continue
		}

		if m.AddressBindings[i] != nil {

			if err := m.AddressBindings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("address_bindings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var logicalPortTypeAdminStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UP","DOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logicalPortTypeAdminStatePropEnum = append(logicalPortTypeAdminStatePropEnum, v)
	}
}

// property enum
func (m *LogicalPort) validateAdminStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, logicalPortTypeAdminStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LogicalPort) validateAdminState(formats strfmt.Registry) error {

	if err := validate.Required("admin_state", "body", m.AdminState); err != nil {
		return err
	}

	// value enum
	if err := m.validateAdminStateEnum("admin_state", "body", *m.AdminState); err != nil {
		return err
	}

	return nil
}

func (m *LogicalPort) validateAttachment(formats strfmt.Registry) error {

	if swag.IsZero(m.Attachment) { // not required
		return nil
	}

	if m.Attachment != nil {

		if err := m.Attachment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attachment")
			}
			return err
		}
	}

	return nil
}

func (m *LogicalPort) validateLogicalSwitchID(formats strfmt.Registry) error {

	if err := validate.Required("logical_switch_id", "body", m.LogicalSwitchID); err != nil {
		return err
	}

	return nil
}

func (m *LogicalPort) validateSwitchingProfileIds(formats strfmt.Registry) error {

	if swag.IsZero(m.SwitchingProfileIds) { // not required
		return nil
	}

	for i := 0; i < len(m.SwitchingProfileIds); i++ {

		if swag.IsZero(m.SwitchingProfileIds[i]) { // not required
			continue
		}

		if m.SwitchingProfileIds[i] != nil {

			if err := m.SwitchingProfileIds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("switching_profile_ids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogicalPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogicalPort) UnmarshalBinary(b []byte) error {
	var res LogicalPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
