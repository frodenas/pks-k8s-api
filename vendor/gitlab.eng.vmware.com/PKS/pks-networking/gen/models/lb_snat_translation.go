// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LbSnatTranslation lb snat translation
// swagger:model LbSnatTranslation

type LbSnatTranslation struct {

	// port overloading with same SNAT IP and port
	//
	// Both SNAT automap and SNAT IP list modes support port overloading
	// which allows the same SNAT IP and port to be used for multiple
	// backend connections as long as the tuple (source IP, source port,
	// destination IP, destination port, IP protocol) after SNAT is
	// performed is unique.
	// The valid number is 1, 2, 4, 8, 16, 32.
	//
	// Maximum: 32
	// Minimum: 1
	PortOverload int64 `json:"port_overload,omitempty"`

	// Load balancers may need to perform SNAT to ensure reverse traffic from
	// the server can be received and processed by them.
	// There are two modes:
	// LbSnatAutoMap uses the load balancer interface IP and an
	// ephemeral port as the source IP and port of the server side connection.
	// LbSnatIpPool allows user to specify one or more IP addresses
	// along with their subnet masks that should be used for SNAT while
	// connecting to any of the servers in the pool.
	//
	// Required: true
	Type *string `json:"type"`
}

/* polymorph LbSnatTranslation port_overload false */

/* polymorph LbSnatTranslation type false */

// Validate validates this lb snat translation
func (m *LbSnatTranslation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePortOverload(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LbSnatTranslation) validatePortOverload(formats strfmt.Registry) error {

	if swag.IsZero(m.PortOverload) { // not required
		return nil
	}

	if err := validate.MinimumInt("port_overload", "body", int64(m.PortOverload), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port_overload", "body", int64(m.PortOverload), 32, false); err != nil {
		return err
	}

	return nil
}

var lbSnatTranslationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LbSnatAutoMap","LbSnatIpPool"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lbSnatTranslationTypeTypePropEnum = append(lbSnatTranslationTypeTypePropEnum, v)
	}
}

const (
	// LbSnatTranslationTypeLbSnatAutoMap captures enum value "LbSnatAutoMap"
	LbSnatTranslationTypeLbSnatAutoMap string = "LbSnatAutoMap"
	// LbSnatTranslationTypeLbSnatIPPool captures enum value "LbSnatIpPool"
	LbSnatTranslationTypeLbSnatIPPool string = "LbSnatIpPool"
)

// prop value enum
func (m *LbSnatTranslation) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lbSnatTranslationTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LbSnatTranslation) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LbSnatTranslation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LbSnatTranslation) UnmarshalBinary(b []byte) error {
	var res LbSnatTranslation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
