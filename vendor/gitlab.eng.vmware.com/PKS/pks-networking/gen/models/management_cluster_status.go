// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ManagementClusterStatus management cluster status
// swagger:model ManagementClusterStatus

type ManagementClusterStatus struct {

	// Current missing management plane nodes
	// Read Only: true
	OfflineNodes []*ManagementPlaneBaseNodeInfo `json:"offline_nodes"`

	// Current alive management plane nodes
	// Read Only: true
	OnlineNodes []*ManagementPlaneBaseNodeInfo `json:"online_nodes"`

	// The details of the cluster nodes required for cluster initialization
	// Read Only: true
	RequiredMembersForInitialization []*ClusterInitializationNodeInfo `json:"required_members_for_initialization"`

	// The current status of the management cluster
	//
	// The current status of the management cluster
	// Read Only: true
	Status string `json:"status,omitempty"`
}

/* polymorph ManagementClusterStatus offline_nodes false */

/* polymorph ManagementClusterStatus online_nodes false */

/* polymorph ManagementClusterStatus required_members_for_initialization false */

/* polymorph ManagementClusterStatus status false */

// Validate validates this management cluster status
func (m *ManagementClusterStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOfflineNodes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOnlineNodes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRequiredMembersForInitialization(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManagementClusterStatus) validateOfflineNodes(formats strfmt.Registry) error {

	if swag.IsZero(m.OfflineNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.OfflineNodes); i++ {

		if swag.IsZero(m.OfflineNodes[i]) { // not required
			continue
		}

		if m.OfflineNodes[i] != nil {

			if err := m.OfflineNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("offline_nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ManagementClusterStatus) validateOnlineNodes(formats strfmt.Registry) error {

	if swag.IsZero(m.OnlineNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.OnlineNodes); i++ {

		if swag.IsZero(m.OnlineNodes[i]) { // not required
			continue
		}

		if m.OnlineNodes[i] != nil {

			if err := m.OnlineNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("online_nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ManagementClusterStatus) validateRequiredMembersForInitialization(formats strfmt.Registry) error {

	if swag.IsZero(m.RequiredMembersForInitialization) { // not required
		return nil
	}

	for i := 0; i < len(m.RequiredMembersForInitialization); i++ {

		if swag.IsZero(m.RequiredMembersForInitialization[i]) { // not required
			continue
		}

		if m.RequiredMembersForInitialization[i] != nil {

			if err := m.RequiredMembersForInitialization[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("required_members_for_initialization" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var managementClusterStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INITIALIZING","UNSTABLE","STABLE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		managementClusterStatusTypeStatusPropEnum = append(managementClusterStatusTypeStatusPropEnum, v)
	}
}

const (
	// ManagementClusterStatusStatusINITIALIZING captures enum value "INITIALIZING"
	ManagementClusterStatusStatusINITIALIZING string = "INITIALIZING"
	// ManagementClusterStatusStatusUNSTABLE captures enum value "UNSTABLE"
	ManagementClusterStatusStatusUNSTABLE string = "UNSTABLE"
	// ManagementClusterStatusStatusSTABLE captures enum value "STABLE"
	ManagementClusterStatusStatusSTABLE string = "STABLE"
	// ManagementClusterStatusStatusUNKNOWN captures enum value "UNKNOWN"
	ManagementClusterStatusStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *ManagementClusterStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, managementClusterStatusTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ManagementClusterStatus) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ManagementClusterStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ManagementClusterStatus) UnmarshalBinary(b []byte) error {
	var res ManagementClusterStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
