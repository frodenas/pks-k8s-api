// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LbAppProfile lb app profile
// swagger:model LbAppProfile

type LbAppProfile struct {
	ManagedResource

	// An application profile can be bound to a virtual server
	// to specify the application protocol characteristics. It is used to
	// influence how load balancing is performed. Currently, three types of
	// application profiles are supported: LbFastTCPProfile,
	// LbFastUDPProfile and LbHttpProfile.
	// LbFastTCPProfile or LbFastUDPProfile is typically
	// used when the application is using a custom protocol or a standard protocol
	// not supported by the load balancer. It is also used in cases where the user
	// only wants L4 load balancing mainly because L4 load balancing has much
	// higher performance and scalability, and/or supports connection mirroring.
	// LbHttpProfile is used for both HTTP and HTTPS applications.
	// Though application rules, if bound to the virtual server, can be used
	// to accomplish the same goal, LbHttpProfile is intended to
	// simplify enabling certain common use cases.
	//
	// Required: true
	ResourceType string `json:"resource_type"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LbAppProfile) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		ResourceType string `json:"resource_type"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.ResourceType = data.ResourceType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LbAppProfile) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		ResourceType string `json:"resource_type"`
	}

	data.ResourceType = m.ResourceType

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this lb app profile
func (m *LbAppProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var lbAppProfileTypeResourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LbHttpProfile","LbFastTcpProfile","LbFastUdpProfile"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lbAppProfileTypeResourceTypePropEnum = append(lbAppProfileTypeResourceTypePropEnum, v)
	}
}

// property enum
func (m *LbAppProfile) validateResourceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lbAppProfileTypeResourceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LbAppProfile) validateResourceType(formats strfmt.Registry) error {

	if err := validate.RequiredString("resource_type", "body", string(m.ResourceType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateResourceTypeEnum("resource_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LbAppProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LbAppProfile) UnmarshalBinary(b []byte) error {
	var res LbAppProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
