// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeIDServicesMap node Id services map
// swagger:model NodeIdServicesMap

type NodeIDServicesMap struct {

	// NodeId
	//
	// NodeId
	// Required: true
	// Max Length: 255
	NodeID *string `json:"node_id"`

	// list of ServiceTypes
	// Required: true
	ServiceTypes []string `json:"service_types"`
}

/* polymorph NodeIdServicesMap node_id false */

/* polymorph NodeIdServicesMap service_types false */

// Validate validates this node Id services map
func (m *NodeIDServicesMap) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServiceTypes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeIDServicesMap) validateNodeID(formats strfmt.Registry) error {

	if err := validate.Required("node_id", "body", m.NodeID); err != nil {
		return err
	}

	if err := validate.MaxLength("node_id", "body", string(*m.NodeID), 255); err != nil {
		return err
	}

	return nil
}

var nodeIdServicesMapServiceTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MGMT_CLUSTER","MGMT_PLANE","API"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeIdServicesMapServiceTypesItemsEnum = append(nodeIdServicesMapServiceTypesItemsEnum, v)
	}
}

func (m *NodeIDServicesMap) validateServiceTypesItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nodeIdServicesMapServiceTypesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *NodeIDServicesMap) validateServiceTypes(formats strfmt.Registry) error {

	if err := validate.Required("service_types", "body", m.ServiceTypes); err != nil {
		return err
	}

	for i := 0; i < len(m.ServiceTypes); i++ {

		// value enum
		if err := m.validateServiceTypesItemsEnum("service_types"+"."+strconv.Itoa(i), "body", m.ServiceTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeIDServicesMap) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeIDServicesMap) UnmarshalBinary(b []byte) error {
	var res NodeIDServicesMap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
