// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NSGroup Networking and Security Group
//
// NSGroups are recursive groupings of different NSX elements (logical and physical), typically used in policy definitions.
// swagger:model NSGroup

type NSGroup struct {
	ManagedResource

	// Count of the members added to this NSGroup
	//
	// Count of the members added to this NSGroup
	// Read Only: true
	MemberCount int64 `json:"member_count,omitempty"`

	// Members of NSGroup
	//
	// Reference to the direct/static members of the NSGroup.
	// Can be ID based expressions only. VirtualMachine cannot
	// be added as a static member.
	//
	// Max Items: 500
	Members []*NSGroupSimpleExpression `json:"members"`

	// The criteria for membership of this NSGroup
	//
	// List of tag or name based expressions which define the dynamic membership criteria
	// for this NSGroup. An object must satisfy atleast one of these expressions
	// to qualify as a member of this group.
	//
	// Max Items: 5
	MembershipCriteria []*NSGroupTagExpression `json:"membership_criteria"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NSGroup) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		MemberCount int64 `json:"member_count,omitempty"`

		Members []*NSGroupSimpleExpression `json:"members,omitempty"`

		MembershipCriteria []*NSGroupTagExpression `json:"membership_criteria,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.MemberCount = data.MemberCount

	m.Members = data.Members

	m.MembershipCriteria = data.MembershipCriteria

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NSGroup) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		MemberCount int64 `json:"member_count,omitempty"`

		Members []*NSGroupSimpleExpression `json:"members,omitempty"`

		MembershipCriteria []*NSGroupTagExpression `json:"membership_criteria,omitempty"`
	}

	data.MemberCount = m.MemberCount

	data.Members = m.Members

	data.MembershipCriteria = m.MembershipCriteria

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this n s group
func (m *NSGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembershipCriteria(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NSGroup) validateMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.Members) { // not required
		return nil
	}

	iMembersSize := int64(len(m.Members))

	if err := validate.MaxItems("members", "body", iMembersSize, 500); err != nil {
		return err
	}

	for i := 0; i < len(m.Members); i++ {

		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {

			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NSGroup) validateMembershipCriteria(formats strfmt.Registry) error {

	if swag.IsZero(m.MembershipCriteria) { // not required
		return nil
	}

	iMembershipCriteriaSize := int64(len(m.MembershipCriteria))

	if err := validate.MaxItems("membership_criteria", "body", iMembershipCriteriaSize, 5); err != nil {
		return err
	}

	for i := 0; i < len(m.MembershipCriteria); i++ {

		if swag.IsZero(m.MembershipCriteria[i]) { // not required
			continue
		}

		if m.MembershipCriteria[i] != nil {

			if err := m.MembershipCriteria[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("membership_criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NSGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NSGroup) UnmarshalBinary(b []byte) error {
	var res NSGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
