// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerSslProfileBinding server ssl profile binding
// swagger:model ServerSslProfileBinding

type ServerSslProfileBinding struct {

	// the maximum traversal depth of server certificate chain
	//
	// authentication depth is used to set the verification depth in the server
	// certificates chain.
	//
	// Minimum: 1
	CertificateChainDepth int64 `json:"certificate_chain_depth,omitempty"`

	// client certificate identifier
	//
	// To support client authentication (load balancer acting as a client
	// authenticating to the backend server), client certificate can be
	// specified in the server-side SSL profile binding
	//
	ClientCertificateID string `json:"client_certificate_id,omitempty"`

	// server authentication mode
	ServerAuth *string `json:"server_auth,omitempty"`

	// CA identifier list to verify server certificate
	//
	// If server auth type is REQUIRED, server certificate must be signed by
	// one of the trusted Certificate Authorities (CAs), also referred to as
	// root CAs, whose self signed certificates are specified.
	//
	ServerAuthCaIds []string `json:"server_auth_ca_ids"`

	// CRL identifier list to verify server certificate
	//
	// A Certificate Revocation List (CRL) can be specified in the server-side
	// SSL profile binding to disallow compromised server certificates.
	//
	ServerAuthCrlIds []string `json:"server_auth_crl_ids"`

	// server SSL profile identifier
	//
	// Server SSL profile defines reusable, application-independent server side
	// SSL properties.
	//
	SslProfileID string `json:"ssl_profile_id,omitempty"`
}

/* polymorph ServerSslProfileBinding certificate_chain_depth false */

/* polymorph ServerSslProfileBinding client_certificate_id false */

/* polymorph ServerSslProfileBinding server_auth false */

/* polymorph ServerSslProfileBinding server_auth_ca_ids false */

/* polymorph ServerSslProfileBinding server_auth_crl_ids false */

/* polymorph ServerSslProfileBinding ssl_profile_id false */

// Validate validates this server ssl profile binding
func (m *ServerSslProfileBinding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificateChainDepth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServerAuth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServerAuthCaIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServerAuthCrlIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerSslProfileBinding) validateCertificateChainDepth(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateChainDepth) { // not required
		return nil
	}

	if err := validate.MinimumInt("certificate_chain_depth", "body", int64(m.CertificateChainDepth), 1, false); err != nil {
		return err
	}

	return nil
}

var serverSslProfileBindingTypeServerAuthPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REQUIRED","IGNORE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverSslProfileBindingTypeServerAuthPropEnum = append(serverSslProfileBindingTypeServerAuthPropEnum, v)
	}
}

const (
	// ServerSslProfileBindingServerAuthREQUIRED captures enum value "REQUIRED"
	ServerSslProfileBindingServerAuthREQUIRED string = "REQUIRED"
	// ServerSslProfileBindingServerAuthIGNORE captures enum value "IGNORE"
	ServerSslProfileBindingServerAuthIGNORE string = "IGNORE"
)

// prop value enum
func (m *ServerSslProfileBinding) validateServerAuthEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serverSslProfileBindingTypeServerAuthPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServerSslProfileBinding) validateServerAuth(formats strfmt.Registry) error {

	if swag.IsZero(m.ServerAuth) { // not required
		return nil
	}

	// value enum
	if err := m.validateServerAuthEnum("server_auth", "body", *m.ServerAuth); err != nil {
		return err
	}

	return nil
}

func (m *ServerSslProfileBinding) validateServerAuthCaIds(formats strfmt.Registry) error {

	if swag.IsZero(m.ServerAuthCaIds) { // not required
		return nil
	}

	return nil
}

func (m *ServerSslProfileBinding) validateServerAuthCrlIds(formats strfmt.Registry) error {

	if swag.IsZero(m.ServerAuthCrlIds) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerSslProfileBinding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerSslProfileBinding) UnmarshalBinary(b []byte) error {
	var res ServerSslProfileBinding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
