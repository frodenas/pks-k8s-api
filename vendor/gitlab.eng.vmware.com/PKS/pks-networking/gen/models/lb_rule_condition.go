// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LbRuleCondition Match condition of load balancer rule
//
// Match conditions are used to match application traffic passing through
// load balancers. Multiple match conditions can be specified in one load
// balancer rule, each match condition defines a criterion for application
// traffic.
// If inverse field is set to true, the match result of the condition is
// inverted.
// If more than one match condition is specified, match strategy determines
// if all conditions should match or any one condition should match for the
// load balancer rule to be considered a match.
// Currently only HTTP messages are supported by load balancer rules.
// Each load balancer rule is used at a specific phase of load balancer
// processing. Currently three phases are supported, HTTP_REQUEST_REWRITE,
// HTTP_FORWARDING and HTTP_RESPONSE_REWRITE.
// Each phase supports certain types of match conditions, supported match
// conditions in HTTP_REQUEST_REWRITE phase are:
// LbHttpRequestMethodCondition
// LbHttpRequestUriCondition
// LbHttpRequestUriArgumentsCondition
// LbHttpRequestVersionCondition
// LbHttpRequestHeaderCondition
// LbHttpRequestBodyCondition
// LbTcpHeaderCondition
// LbIpHeaderCondition
// Supported match conditions in HTTP_FORWARDING phase are:
// LbHttpRequestMethodCondition
// LbHttpRequestUriCondition
// LbHttpRequestVersionCondition
// LbHttpRequestHeaderCondition
// LbHttpRequestBodyCondition
// LbTcpHeaderCondition
// LbIpHeaderCondition
// Supported match condition in HTTP_RESPONSE_REWRITE phase is:
// LbHttpResponseHeaderCondition
//
// swagger:model LbRuleCondition

type LbRuleCondition struct {

	// A flag to indicate whether reverse the match result of this condition
	//
	// A flag to indicate whether reverse the match result of this condition
	Inverse *bool `json:"inverse,omitempty"`

	// Type of load balancer rule condition
	// Required: true
	Type *string `json:"type"`
}

/* polymorph LbRuleCondition inverse false */

/* polymorph LbRuleCondition type false */

// Validate validates this lb rule condition
func (m *LbRuleCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var lbRuleConditionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LbHttpRequestMethodCondition","LbHttpRequestUriCondition","LbHttpRequestUriArgumentsCondition","LbHttpRequestVersionCondition","LbHttpRequestHeaderCondition","LbHttpRequestBodyCondition","LbHttpResponseHeaderCondition","LbTcpHeaderCondition","LbIpHeaderCondition"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lbRuleConditionTypeTypePropEnum = append(lbRuleConditionTypeTypePropEnum, v)
	}
}

const (
	// LbRuleConditionTypeLbHTTPRequestMethodCondition captures enum value "LbHttpRequestMethodCondition"
	LbRuleConditionTypeLbHTTPRequestMethodCondition string = "LbHttpRequestMethodCondition"
	// LbRuleConditionTypeLbHTTPRequestURICondition captures enum value "LbHttpRequestUriCondition"
	LbRuleConditionTypeLbHTTPRequestURICondition string = "LbHttpRequestUriCondition"
	// LbRuleConditionTypeLbHTTPRequestURIArgumentsCondition captures enum value "LbHttpRequestUriArgumentsCondition"
	LbRuleConditionTypeLbHTTPRequestURIArgumentsCondition string = "LbHttpRequestUriArgumentsCondition"
	// LbRuleConditionTypeLbHTTPRequestVersionCondition captures enum value "LbHttpRequestVersionCondition"
	LbRuleConditionTypeLbHTTPRequestVersionCondition string = "LbHttpRequestVersionCondition"
	// LbRuleConditionTypeLbHTTPRequestHeaderCondition captures enum value "LbHttpRequestHeaderCondition"
	LbRuleConditionTypeLbHTTPRequestHeaderCondition string = "LbHttpRequestHeaderCondition"
	// LbRuleConditionTypeLbHTTPRequestBodyCondition captures enum value "LbHttpRequestBodyCondition"
	LbRuleConditionTypeLbHTTPRequestBodyCondition string = "LbHttpRequestBodyCondition"
	// LbRuleConditionTypeLbHTTPResponseHeaderCondition captures enum value "LbHttpResponseHeaderCondition"
	LbRuleConditionTypeLbHTTPResponseHeaderCondition string = "LbHttpResponseHeaderCondition"
	// LbRuleConditionTypeLbTCPHeaderCondition captures enum value "LbTcpHeaderCondition"
	LbRuleConditionTypeLbTCPHeaderCondition string = "LbTcpHeaderCondition"
	// LbRuleConditionTypeLbIPHeaderCondition captures enum value "LbIpHeaderCondition"
	LbRuleConditionTypeLbIPHeaderCondition string = "LbIpHeaderCondition"
)

// prop value enum
func (m *LbRuleCondition) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lbRuleConditionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LbRuleCondition) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LbRuleCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LbRuleCondition) UnmarshalBinary(b []byte) error {
	var res LbRuleCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
