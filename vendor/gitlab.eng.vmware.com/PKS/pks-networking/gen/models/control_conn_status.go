// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ControlConnStatus control conn status
// swagger:model ControlConnStatus

type ControlConnStatus struct {

	// IP address of the control Node.
	//
	// IP address of the control Node.
	// Read Only: true
	ControlNodeIP string `json:"control_node_ip,omitempty"`

	// Failure status of the control Node for e.g CONNECTION_REFUSED,INCOMPLETE_HOST_CERT.
	//
	// Failure status of the control Node for e.g CONNECTION_REFUSED,INCOMPLETE_HOST_CERT.
	// Read Only: true
	FailureStatus string `json:"failure_status,omitempty"`

	// Status of the control Node for e.g  UP, DOWN.
	//
	// Status of the control Node for e.g  UP, DOWN.
	// Read Only: true
	Status string `json:"status,omitempty"`
}

/* polymorph ControlConnStatus control_node_ip false */

/* polymorph ControlConnStatus failure_status false */

/* polymorph ControlConnStatus status false */

// Validate validates this control conn status
func (m *ControlConnStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailureStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var controlConnStatusTypeFailureStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONNECTION_REFUSED","INCOMPLETE_HOST_CERT","INCOMPLETE_CONTROLLER_CERT","CONTROLLER_REJECTED_HOST_CERT","HOST_REJECTED_CONTROLLER_CERT","KEEP_ALIVE_TIMEOUT","OTHER_SSL_ERROR","OTHER_ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		controlConnStatusTypeFailureStatusPropEnum = append(controlConnStatusTypeFailureStatusPropEnum, v)
	}
}

const (
	// ControlConnStatusFailureStatusCONNECTIONREFUSED captures enum value "CONNECTION_REFUSED"
	ControlConnStatusFailureStatusCONNECTIONREFUSED string = "CONNECTION_REFUSED"
	// ControlConnStatusFailureStatusINCOMPLETEHOSTCERT captures enum value "INCOMPLETE_HOST_CERT"
	ControlConnStatusFailureStatusINCOMPLETEHOSTCERT string = "INCOMPLETE_HOST_CERT"
	// ControlConnStatusFailureStatusINCOMPLETECONTROLLERCERT captures enum value "INCOMPLETE_CONTROLLER_CERT"
	ControlConnStatusFailureStatusINCOMPLETECONTROLLERCERT string = "INCOMPLETE_CONTROLLER_CERT"
	// ControlConnStatusFailureStatusCONTROLLERREJECTEDHOSTCERT captures enum value "CONTROLLER_REJECTED_HOST_CERT"
	ControlConnStatusFailureStatusCONTROLLERREJECTEDHOSTCERT string = "CONTROLLER_REJECTED_HOST_CERT"
	// ControlConnStatusFailureStatusHOSTREJECTEDCONTROLLERCERT captures enum value "HOST_REJECTED_CONTROLLER_CERT"
	ControlConnStatusFailureStatusHOSTREJECTEDCONTROLLERCERT string = "HOST_REJECTED_CONTROLLER_CERT"
	// ControlConnStatusFailureStatusKEEPALIVETIMEOUT captures enum value "KEEP_ALIVE_TIMEOUT"
	ControlConnStatusFailureStatusKEEPALIVETIMEOUT string = "KEEP_ALIVE_TIMEOUT"
	// ControlConnStatusFailureStatusOTHERSSLERROR captures enum value "OTHER_SSL_ERROR"
	ControlConnStatusFailureStatusOTHERSSLERROR string = "OTHER_SSL_ERROR"
	// ControlConnStatusFailureStatusOTHERERROR captures enum value "OTHER_ERROR"
	ControlConnStatusFailureStatusOTHERERROR string = "OTHER_ERROR"
)

// prop value enum
func (m *ControlConnStatus) validateFailureStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, controlConnStatusTypeFailureStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ControlConnStatus) validateFailureStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.FailureStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateFailureStatusEnum("failure_status", "body", m.FailureStatus); err != nil {
		return err
	}

	return nil
}

var controlConnStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UP","DOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		controlConnStatusTypeStatusPropEnum = append(controlConnStatusTypeStatusPropEnum, v)
	}
}

const (
	// ControlConnStatusStatusUP captures enum value "UP"
	ControlConnStatusStatusUP string = "UP"
	// ControlConnStatusStatusDOWN captures enum value "DOWN"
	ControlConnStatusStatusDOWN string = "DOWN"
)

// prop value enum
func (m *ControlConnStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, controlConnStatusTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ControlConnStatus) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ControlConnStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ControlConnStatus) UnmarshalBinary(b []byte) error {
	var res ControlConnStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
