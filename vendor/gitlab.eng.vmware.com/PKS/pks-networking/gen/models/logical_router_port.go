// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LogicalRouterPort logical router port
// swagger:model LogicalRouterPort

type LogicalRouterPort struct {
	ManagedResource

	// linked logical router port id
	LinkedLogicalRouterPortID interface{} `json:"linked_logical_router_port_id,omitempty"`

	// linked logical switch port id
	LinkedLogicalSwitchPortID interface{} `json:"linked_logical_switch_port_id,omitempty"`

	// Identifier for logical router on which this port is created
	//
	// Identifier for logical router on which this port is created
	// Required: true
	LogicalRouterID *string `json:"logical_router_id"`

	// MAC address
	//
	// MAC address
	// Read Only: true
	MacAddress string `json:"mac_address,omitempty"`

	// LogicalRouterUpLinkPort is allowed only on TIER0 logical router.
	//   It is the north facing port of the logical router.
	// LogicalRouterLinkPortOnTIER0 is allowed only on TIER0 logical router.
	//   This is the port where the LogicalRouterLinkPortOnTIER1 of TIER1 logical router connects to.
	// LogicalRouterLinkPortOnTIER1 is allowed only on TIER1 logical router.
	//   This is the port using which the user connected to TIER1 logical router for upwards connectivity via TIER0 logical router.
	//   Connect this port to the LogicalRouterLinkPortOnTIER0 of the TIER0 logical router.
	// LogicalRouterDownLinkPort is for the connected subnets on the logical router.
	// LogicalRouterLoopbackPort is a loopback port for logical router component
	//   which is placed on chosen edge cluster member.
	//
	// Required: true
	ResourceType string `json:"resource_type"`

	// Logical router port subnets
	//
	// Logical router port subnets
	// Read Only: true
	Subnets []*IPSubnet `json:"subnets"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LogicalRouterPort) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		LinkedLogicalRouterPortID interface{} `json:"linked_logical_router_port_id,omitempty"`

		LinkedLogicalSwitchPortID interface{} `json:"linked_logical_switch_port_id,omitempty"`

		LogicalRouterID *string `json:"logical_router_id"`

		MacAddress string `json:"mac_address,omitempty"`

		ResourceType string `json:"resource_type"`

		Subnets []*IPSubnet `json:"subnets,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.LinkedLogicalRouterPortID = data.LinkedLogicalRouterPortID

	m.LinkedLogicalSwitchPortID = data.LinkedLogicalSwitchPortID

	m.LogicalRouterID = data.LogicalRouterID

	m.MacAddress = data.MacAddress

	m.ResourceType = data.ResourceType

	m.Subnets = data.Subnets

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LogicalRouterPort) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		LinkedLogicalRouterPortID interface{} `json:"linked_logical_router_port_id,omitempty"`

		LinkedLogicalSwitchPortID interface{} `json:"linked_logical_switch_port_id,omitempty"`

		LogicalRouterID *string `json:"logical_router_id"`

		MacAddress string `json:"mac_address,omitempty"`

		ResourceType string `json:"resource_type"`

		Subnets []*IPSubnet `json:"subnets,omitempty"`
	}

	data.LinkedLogicalRouterPortID = m.LinkedLogicalRouterPortID

	data.LinkedLogicalSwitchPortID = m.LinkedLogicalSwitchPortID

	data.LogicalRouterID = m.LogicalRouterID

	data.MacAddress = m.MacAddress

	data.ResourceType = m.ResourceType

	data.Subnets = m.Subnets

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this logical router port
func (m *LogicalRouterPort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogicalRouterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogicalRouterPort) validateLogicalRouterID(formats strfmt.Registry) error {

	if err := validate.Required("logical_router_id", "body", m.LogicalRouterID); err != nil {
		return err
	}

	return nil
}

var logicalRouterPortTypeResourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LogicalRouterUpLinkPort","LogicalRouterDownLinkPort","LogicalRouterLinkPortOnTIER0","LogicalRouterLinkPortOnTIER1","LogicalRouterLoopbackPort"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logicalRouterPortTypeResourceTypePropEnum = append(logicalRouterPortTypeResourceTypePropEnum, v)
	}
}

// property enum
func (m *LogicalRouterPort) validateResourceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, logicalRouterPortTypeResourceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LogicalRouterPort) validateResourceType(formats strfmt.Registry) error {

	if err := validate.RequiredString("resource_type", "body", string(m.ResourceType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateResourceTypeEnum("resource_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *LogicalRouterPort) validateSubnets(formats strfmt.Registry) error {

	if swag.IsZero(m.Subnets) { // not required
		return nil
	}

	for i := 0; i < len(m.Subnets); i++ {

		if swag.IsZero(m.Subnets[i]) { // not required
			continue
		}

		if m.Subnets[i] != nil {

			if err := m.Subnets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogicalRouterPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogicalRouterPort) UnmarshalBinary(b []byte) error {
	var res LogicalRouterPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
