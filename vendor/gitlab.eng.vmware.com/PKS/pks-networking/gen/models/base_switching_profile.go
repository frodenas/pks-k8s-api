// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BaseSwitchingProfile base switching profile
// swagger:model BaseSwitchingProfile

type BaseSwitchingProfile struct {
	ManagedResource

	// required capabilities
	// Read Only: true
	RequiredCapabilities []string `json:"required_capabilities"`

	// resource type
	// Required: true
	ResourceType string `json:"resource_type"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *BaseSwitchingProfile) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		RequiredCapabilities []string `json:"required_capabilities,omitempty"`

		ResourceType string `json:"resource_type"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.RequiredCapabilities = data.RequiredCapabilities

	m.ResourceType = data.ResourceType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m BaseSwitchingProfile) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		RequiredCapabilities []string `json:"required_capabilities,omitempty"`

		ResourceType string `json:"resource_type"`
	}

	data.RequiredCapabilities = m.RequiredCapabilities

	data.ResourceType = m.ResourceType

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this base switching profile
func (m *BaseSwitchingProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseSwitchingProfile) validateRequiredCapabilities(formats strfmt.Registry) error {

	if swag.IsZero(m.RequiredCapabilities) { // not required
		return nil
	}

	return nil
}

func (m *BaseSwitchingProfile) validateResourceType(formats strfmt.Registry) error {

	if err := validate.RequiredString("resource_type", "body", string(m.ResourceType)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BaseSwitchingProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseSwitchingProfile) UnmarshalBinary(b []byte) error {
	var res BaseSwitchingProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
