// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NSGroupTagExpression TAG expressions to represent NSGroup membership
//
// Includes both scope and tag attribute of Tag. The scope and tag expressions
// are logically 'AND' with each other.
// eg- tag.scope = "S1" AND tag.tag = 'T1'
//
// swagger:model NSGroupTagExpression

type NSGroupTagExpression struct {
	NSGroupExpression

	// The tag.scope attribute of the object
	//
	// The tag.scope attribute of the object
	// Max Length: 20
	Scope string `json:"scope,omitempty"`

	// Operator of the scope expression eg- tag.scope = "S1".
	//
	// Operator of the scope expression eg- tag.scope = "S1".
	ScopeOp *string `json:"scope_op,omitempty"`

	// The tag.tag attribute of the object
	//
	// The tag.tag attribute of the object
	// Max Length: 40
	Tag string `json:"tag,omitempty"`

	// Operator of the tag expression eg- tag.tag = "Production"
	//
	// Operator of the tag expression eg- tag.tag = "Production"
	TagOp *string `json:"tag_op,omitempty"`

	// Type of the resource on which this expression is evaluated
	//
	// Type of the resource on which this expression is evaluated
	// Required: true
	TargetType *string `json:"target_type"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NSGroupTagExpression) UnmarshalJSON(raw []byte) error {

	var aO0 NSGroupExpression
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.NSGroupExpression = aO0

	var data struct {
		Scope string `json:"scope,omitempty"`

		ScopeOp *string `json:"scope_op,omitempty"`

		Tag string `json:"tag,omitempty"`

		TagOp *string `json:"tag_op,omitempty"`

		TargetType *string `json:"target_type"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.Scope = data.Scope

	m.ScopeOp = data.ScopeOp

	m.Tag = data.Tag

	m.TagOp = data.TagOp

	m.TargetType = data.TargetType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NSGroupTagExpression) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.NSGroupExpression)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		Scope string `json:"scope,omitempty"`

		ScopeOp *string `json:"scope_op,omitempty"`

		Tag string `json:"tag,omitempty"`

		TagOp *string `json:"tag_op,omitempty"`

		TargetType *string `json:"target_type"`
	}

	data.Scope = m.Scope

	data.ScopeOp = m.ScopeOp

	data.Tag = m.Tag

	data.TagOp = m.TagOp

	data.TargetType = m.TargetType

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this n s group tag expression
func (m *NSGroupTagExpression) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.NSGroupExpression.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopeOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NSGroupTagExpression) validateScope(formats strfmt.Registry) error {

	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if err := validate.MaxLength("scope", "body", string(m.Scope), 20); err != nil {
		return err
	}

	return nil
}

var nSGroupTagExpressionTypeScopeOpPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EQUALS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nSGroupTagExpressionTypeScopeOpPropEnum = append(nSGroupTagExpressionTypeScopeOpPropEnum, v)
	}
}

// property enum
func (m *NSGroupTagExpression) validateScopeOpEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nSGroupTagExpressionTypeScopeOpPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NSGroupTagExpression) validateScopeOp(formats strfmt.Registry) error {

	if swag.IsZero(m.ScopeOp) { // not required
		return nil
	}

	// value enum
	if err := m.validateScopeOpEnum("scope_op", "body", *m.ScopeOp); err != nil {
		return err
	}

	return nil
}

func (m *NSGroupTagExpression) validateTag(formats strfmt.Registry) error {

	if swag.IsZero(m.Tag) { // not required
		return nil
	}

	if err := validate.MaxLength("tag", "body", string(m.Tag), 40); err != nil {
		return err
	}

	return nil
}

var nSGroupTagExpressionTypeTagOpPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EQUALS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nSGroupTagExpressionTypeTagOpPropEnum = append(nSGroupTagExpressionTypeTagOpPropEnum, v)
	}
}

// property enum
func (m *NSGroupTagExpression) validateTagOpEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nSGroupTagExpressionTypeTagOpPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NSGroupTagExpression) validateTagOp(formats strfmt.Registry) error {

	if swag.IsZero(m.TagOp) { // not required
		return nil
	}

	// value enum
	if err := m.validateTagOpEnum("tag_op", "body", *m.TagOp); err != nil {
		return err
	}

	return nil
}

var nSGroupTagExpressionTypeTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LogicalSwitch","LogicalPort","VirtualMachine"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nSGroupTagExpressionTypeTargetTypePropEnum = append(nSGroupTagExpressionTypeTargetTypePropEnum, v)
	}
}

// property enum
func (m *NSGroupTagExpression) validateTargetTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nSGroupTagExpressionTypeTargetTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NSGroupTagExpression) validateTargetType(formats strfmt.Registry) error {

	if err := validate.Required("target_type", "body", m.TargetType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetTypeEnum("target_type", "body", *m.TargetType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NSGroupTagExpression) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NSGroupTagExpression) UnmarshalBinary(b []byte) error {
	var res NSGroupTagExpression
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
