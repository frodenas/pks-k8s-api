// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClientSslProfileBinding client ssl profile binding
// swagger:model ClientSslProfileBinding

type ClientSslProfileBinding struct {

	// the maximum traversal depth of client certificate chain
	//
	// authentication depth is used to set the verification depth in the client
	// certificates chain.
	//
	// Minimum: 1
	CertificateChainDepth int64 `json:"certificate_chain_depth,omitempty"`

	// client authentication mode
	ClientAuth *string `json:"client_auth,omitempty"`

	// CA identifier list to verify client certificate
	//
	// If client auth type is REQUIRED, client certificate must be signed by
	// one of the trusted Certificate Authorities (CAs), also referred to as
	// root CAs, whose self signed certificates are specified.
	//
	ClientAuthCaIds []string `json:"client_auth_ca_ids"`

	// CRL identifier list to verify client certificate
	//
	// A Certificate Revocation List (CRL) can be specified in the client-side
	// SSL profile binding to disallow compromised client certificates.
	//
	ClientAuthCrlIds []string `json:"client_auth_crl_ids"`

	// default service certificate identifier
	//
	// A default certificate should be specified which will be used if the
	// server does not host multiple hostnames on the same IP address or if
	// the client does not support SNI extension.
	//
	// Required: true
	DefaultCertificateID *string `json:"default_certificate_id"`

	// SNI certificate identifier list
	//
	// Client-side SSL profile binding allows multiple certificates, for
	// different hostnames, to be bound to the same virtual server.
	//
	SniCertificateIds []string `json:"sni_certificate_ids"`

	// client SSL profile identifier
	//
	// Client SSL profile defines reusable, application-independent client side
	// SSL properties.
	//
	SslProfileID string `json:"ssl_profile_id,omitempty"`
}

/* polymorph ClientSslProfileBinding certificate_chain_depth false */

/* polymorph ClientSslProfileBinding client_auth false */

/* polymorph ClientSslProfileBinding client_auth_ca_ids false */

/* polymorph ClientSslProfileBinding client_auth_crl_ids false */

/* polymorph ClientSslProfileBinding default_certificate_id false */

/* polymorph ClientSslProfileBinding sni_certificate_ids false */

/* polymorph ClientSslProfileBinding ssl_profile_id false */

// Validate validates this client ssl profile binding
func (m *ClientSslProfileBinding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificateChainDepth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateClientAuth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateClientAuthCaIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateClientAuthCrlIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDefaultCertificateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSniCertificateIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientSslProfileBinding) validateCertificateChainDepth(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateChainDepth) { // not required
		return nil
	}

	if err := validate.MinimumInt("certificate_chain_depth", "body", int64(m.CertificateChainDepth), 1, false); err != nil {
		return err
	}

	return nil
}

var clientSslProfileBindingTypeClientAuthPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REQUIRED","IGNORE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientSslProfileBindingTypeClientAuthPropEnum = append(clientSslProfileBindingTypeClientAuthPropEnum, v)
	}
}

const (
	// ClientSslProfileBindingClientAuthREQUIRED captures enum value "REQUIRED"
	ClientSslProfileBindingClientAuthREQUIRED string = "REQUIRED"
	// ClientSslProfileBindingClientAuthIGNORE captures enum value "IGNORE"
	ClientSslProfileBindingClientAuthIGNORE string = "IGNORE"
)

// prop value enum
func (m *ClientSslProfileBinding) validateClientAuthEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, clientSslProfileBindingTypeClientAuthPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ClientSslProfileBinding) validateClientAuth(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientAuth) { // not required
		return nil
	}

	// value enum
	if err := m.validateClientAuthEnum("client_auth", "body", *m.ClientAuth); err != nil {
		return err
	}

	return nil
}

func (m *ClientSslProfileBinding) validateClientAuthCaIds(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientAuthCaIds) { // not required
		return nil
	}

	return nil
}

func (m *ClientSslProfileBinding) validateClientAuthCrlIds(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientAuthCrlIds) { // not required
		return nil
	}

	return nil
}

func (m *ClientSslProfileBinding) validateDefaultCertificateID(formats strfmt.Registry) error {

	if err := validate.Required("default_certificate_id", "body", m.DefaultCertificateID); err != nil {
		return err
	}

	return nil
}

func (m *ClientSslProfileBinding) validateSniCertificateIds(formats strfmt.Registry) error {

	if swag.IsZero(m.SniCertificateIds) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClientSslProfileBinding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientSslProfileBinding) UnmarshalBinary(b []byte) error {
	var res ClientSslProfileBinding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
