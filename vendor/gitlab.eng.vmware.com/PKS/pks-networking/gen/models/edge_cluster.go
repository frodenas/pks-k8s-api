// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EdgeCluster edge cluster
// swagger:model EdgeCluster

type EdgeCluster struct {
	ManagedResource

	// Edge cluster profile bindings
	//
	// Edge cluster profile bindings
	ClusterProfileBindings []*ClusterProfileTypeIDEntry `json:"cluster_profile_bindings"`

	// This field is a readonly field which could show deployment_type of members.
	// It would return UNKNOWN if there is no members, and return VIRTUAL_MACHINE|
	// PHYSICAL_MACHINE if all edge members are VIRTUAL_MACHINE|PHYSICAL_MACHINE.
	//
	// Read Only: true
	DeploymentType string `json:"deployment_type,omitempty"`

	// Edge cluster is homogenous collection of transport nodes.
	// Hence all transport nodes of the cluster must be of same type.
	// This readonly field shows the type of transport nodes.
	//
	// Read Only: true
	MemberNodeType string `json:"member_node_type,omitempty"`

	// Edge cluster members
	//
	// EdgeCluster only supports homogeneous members.
	// These member should be backed by either EdgeNode or PublicCloudGatewayNode.
	// DeploymentType and TransportNode type of these nodes should be the same.
	//
	Members []*EdgeClusterMember `json:"members"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *EdgeCluster) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		ClusterProfileBindings []*ClusterProfileTypeIDEntry `json:"cluster_profile_bindings,omitempty"`

		DeploymentType string `json:"deployment_type,omitempty"`

		MemberNodeType string `json:"member_node_type,omitempty"`

		Members []*EdgeClusterMember `json:"members,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.ClusterProfileBindings = data.ClusterProfileBindings

	m.DeploymentType = data.DeploymentType

	m.MemberNodeType = data.MemberNodeType

	m.Members = data.Members

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m EdgeCluster) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		ClusterProfileBindings []*ClusterProfileTypeIDEntry `json:"cluster_profile_bindings,omitempty"`

		DeploymentType string `json:"deployment_type,omitempty"`

		MemberNodeType string `json:"member_node_type,omitempty"`

		Members []*EdgeClusterMember `json:"members,omitempty"`
	}

	data.ClusterProfileBindings = m.ClusterProfileBindings

	data.DeploymentType = m.DeploymentType

	data.MemberNodeType = m.MemberNodeType

	data.Members = m.Members

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this edge cluster
func (m *EdgeCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterProfileBindings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberNodeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgeCluster) validateClusterProfileBindings(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterProfileBindings) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusterProfileBindings); i++ {

		if swag.IsZero(m.ClusterProfileBindings[i]) { // not required
			continue
		}

		if m.ClusterProfileBindings[i] != nil {

			if err := m.ClusterProfileBindings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cluster_profile_bindings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var edgeClusterTypeDeploymentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VIRTUAL_MACHINE","PHYSICAL_MACHINE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		edgeClusterTypeDeploymentTypePropEnum = append(edgeClusterTypeDeploymentTypePropEnum, v)
	}
}

// property enum
func (m *EdgeCluster) validateDeploymentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, edgeClusterTypeDeploymentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EdgeCluster) validateDeploymentType(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeploymentTypeEnum("deployment_type", "body", m.DeploymentType); err != nil {
		return err
	}

	return nil
}

var edgeClusterTypeMemberNodeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EDGE_NODE","PUBLIC_CLOUD_GATEWAY_NODE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		edgeClusterTypeMemberNodeTypePropEnum = append(edgeClusterTypeMemberNodeTypePropEnum, v)
	}
}

// property enum
func (m *EdgeCluster) validateMemberNodeTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, edgeClusterTypeMemberNodeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EdgeCluster) validateMemberNodeType(formats strfmt.Registry) error {

	if swag.IsZero(m.MemberNodeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMemberNodeTypeEnum("member_node_type", "body", m.MemberNodeType); err != nil {
		return err
	}

	return nil
}

func (m *EdgeCluster) validateMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.Members) { // not required
		return nil
	}

	for i := 0; i < len(m.Members); i++ {

		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {

			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EdgeCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EdgeCluster) UnmarshalBinary(b []byte) error {
	var res EdgeCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
