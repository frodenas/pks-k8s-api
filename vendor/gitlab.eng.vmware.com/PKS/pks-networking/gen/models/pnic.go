// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Pnic Physical NIC specification
//
// Physical NIC specification
// swagger:model Pnic

type Pnic struct {

	// device name or key
	//
	// device name or key
	// Required: true
	DeviceName *string `json:"device_name"`

	// Uplink name for this Pnic. This name will be used to reference this Pnic in other configurations.
	//
	// Uplink name for this Pnic. This name will be used to reference this Pnic in other configurations.
	// Required: true
	UplinkName *string `json:"uplink_name"`
}

/* polymorph Pnic device_name false */

/* polymorph Pnic uplink_name false */

// Validate validates this pnic
func (m *Pnic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUplinkName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Pnic) validateDeviceName(formats strfmt.Registry) error {

	if err := validate.Required("device_name", "body", m.DeviceName); err != nil {
		return err
	}

	return nil
}

func (m *Pnic) validateUplinkName(formats strfmt.Registry) error {

	if err := validate.Required("uplink_name", "body", m.UplinkName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Pnic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Pnic) UnmarshalBinary(b []byte) error {
	var res Pnic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
