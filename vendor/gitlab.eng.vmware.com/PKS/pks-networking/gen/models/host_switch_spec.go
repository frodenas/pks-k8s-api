// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// HostSwitchSpec Abstract base type for transport node host switch specification
//
// Abstract base type for transport node host switch specification
// swagger:discriminator HostSwitchSpec resource_type

type HostSwitchSpec interface {
	runtime.Validatable

	// resource type
	// Required: true
	ResourceType() string
	SetResourceType(string)
}

type hostSwitchSpec struct {
	resourceTypeField string
}

func (m *hostSwitchSpec) ResourceType() string {
	return "HostSwitchSpec"
}
func (m *hostSwitchSpec) SetResourceType(val string) {

}

// Validate validates this host switch spec
func (m *hostSwitchSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hostSwitchSpecTypeResourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["StandardHostSwitchSpec","PreconfiguredHostSwitchSpec"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hostSwitchSpecTypeResourceTypePropEnum = append(hostSwitchSpecTypeResourceTypePropEnum, v)
	}
}

const (
	// HostSwitchSpecResourceTypeStandardHostSwitchSpec captures enum value "StandardHostSwitchSpec"
	HostSwitchSpecResourceTypeStandardHostSwitchSpec string = "StandardHostSwitchSpec"
	// HostSwitchSpecResourceTypePreconfiguredHostSwitchSpec captures enum value "PreconfiguredHostSwitchSpec"
	HostSwitchSpecResourceTypePreconfiguredHostSwitchSpec string = "PreconfiguredHostSwitchSpec"
)

// prop value enum
func (m *hostSwitchSpec) validateResourceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hostSwitchSpecTypeResourceTypePropEnum); err != nil {
		return err
	}
	return nil
}

// UnmarshalHostSwitchSpecSlice unmarshals polymorphic slices of HostSwitchSpec
func UnmarshalHostSwitchSpecSlice(reader io.Reader, consumer runtime.Consumer) ([]HostSwitchSpec, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []HostSwitchSpec
	for _, element := range elements {
		obj, err := unmarshalHostSwitchSpec(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalHostSwitchSpec unmarshals polymorphic HostSwitchSpec
func UnmarshalHostSwitchSpec(reader io.Reader, consumer runtime.Consumer) (HostSwitchSpec, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalHostSwitchSpec(data, consumer)
}

func unmarshalHostSwitchSpec(data []byte, consumer runtime.Consumer) (HostSwitchSpec, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the resource_type property.
	var getType struct {
		ResourceType string `json:"resource_type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("resource_type", "body", getType.ResourceType); err != nil {
		return nil, err
	}

	// The value of resource_type is used to determine which type to create and unmarshal the data into
	switch getType.ResourceType {
	case "HostSwitchSpec":
		var result hostSwitchSpec
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid resource_type value: %q", getType.ResourceType)

}
