// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPPoolRange Ip pool range
// swagger:model IpPoolRange

type IPPoolRange struct {
	Resource

	// The end IP Address of the IP Range.
	// Required: true
	End *string `json:"end"`

	// The start IP Address of the IP Range.
	// Required: true
	Start *string `json:"start"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IPPoolRange) UnmarshalJSON(raw []byte) error {

	var aO0 Resource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Resource = aO0

	var data struct {
		End *string `json:"end"`

		Start *string `json:"start"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.End = data.End

	m.Start = data.Start

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IPPoolRange) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.Resource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		End *string `json:"end"`

		Start *string `json:"start"`
	}

	data.End = m.End

	data.Start = m.Start

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this Ip pool range
func (m *IPPoolRange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPPoolRange) validateEnd(formats strfmt.Registry) error {

	if err := validate.Required("end", "body", m.End); err != nil {
		return err
	}

	return nil
}

func (m *IPPoolRange) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("start", "body", m.Start); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPPoolRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPPoolRange) UnmarshalBinary(b []byte) error {
	var res IPPoolRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
