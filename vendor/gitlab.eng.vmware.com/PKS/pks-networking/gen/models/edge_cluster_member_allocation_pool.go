// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EdgeClusterMemberAllocationPool edge cluster member allocation pool
// swagger:model EdgeClusterMemberAllocationPool

type EdgeClusterMemberAllocationPool struct {

	// Types of logical router allocation pool based on services
	// Required: true
	AllocationPoolType *string `json:"allocation_pool_type"`

	// Size of load balancer service
	//
	// To address varied customer performance and scalability requirements,
	// different sizes for load balancer service are supported: SMALL, MEDIUM
	// and LARGE, each with its own set of resource and performance. Specify
	// size of load balancer service which you will bind to TIER1 router.
	//
	AllocationSize *string `json:"allocation_size,omitempty"`
}

/* polymorph EdgeClusterMemberAllocationPool allocation_pool_type false */

/* polymorph EdgeClusterMemberAllocationPool allocation_size false */

// Validate validates this edge cluster member allocation pool
func (m *EdgeClusterMemberAllocationPool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllocationPoolType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAllocationSize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var edgeClusterMemberAllocationPoolTypeAllocationPoolTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LoadBalancerAllocationPool"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		edgeClusterMemberAllocationPoolTypeAllocationPoolTypePropEnum = append(edgeClusterMemberAllocationPoolTypeAllocationPoolTypePropEnum, v)
	}
}

const (
	// EdgeClusterMemberAllocationPoolAllocationPoolTypeLoadBalancerAllocationPool captures enum value "LoadBalancerAllocationPool"
	EdgeClusterMemberAllocationPoolAllocationPoolTypeLoadBalancerAllocationPool string = "LoadBalancerAllocationPool"
)

// prop value enum
func (m *EdgeClusterMemberAllocationPool) validateAllocationPoolTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, edgeClusterMemberAllocationPoolTypeAllocationPoolTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EdgeClusterMemberAllocationPool) validateAllocationPoolType(formats strfmt.Registry) error {

	if err := validate.Required("allocation_pool_type", "body", m.AllocationPoolType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAllocationPoolTypeEnum("allocation_pool_type", "body", *m.AllocationPoolType); err != nil {
		return err
	}

	return nil
}

var edgeClusterMemberAllocationPoolTypeAllocationSizePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SMALL","MEDIUM","LARGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		edgeClusterMemberAllocationPoolTypeAllocationSizePropEnum = append(edgeClusterMemberAllocationPoolTypeAllocationSizePropEnum, v)
	}
}

const (
	// EdgeClusterMemberAllocationPoolAllocationSizeSMALL captures enum value "SMALL"
	EdgeClusterMemberAllocationPoolAllocationSizeSMALL string = "SMALL"
	// EdgeClusterMemberAllocationPoolAllocationSizeMEDIUM captures enum value "MEDIUM"
	EdgeClusterMemberAllocationPoolAllocationSizeMEDIUM string = "MEDIUM"
	// EdgeClusterMemberAllocationPoolAllocationSizeLARGE captures enum value "LARGE"
	EdgeClusterMemberAllocationPoolAllocationSizeLARGE string = "LARGE"
)

// prop value enum
func (m *EdgeClusterMemberAllocationPool) validateAllocationSizeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, edgeClusterMemberAllocationPoolTypeAllocationSizePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EdgeClusterMemberAllocationPool) validateAllocationSize(formats strfmt.Registry) error {

	if swag.IsZero(m.AllocationSize) { // not required
		return nil
	}

	// value enum
	if err := m.validateAllocationSizeEnum("allocation_size", "body", *m.AllocationSize); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EdgeClusterMemberAllocationPool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EdgeClusterMemberAllocationPool) UnmarshalBinary(b []byte) error {
	var res EdgeClusterMemberAllocationPool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
