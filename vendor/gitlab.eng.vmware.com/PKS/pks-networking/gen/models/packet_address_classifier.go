// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PacketAddressClassifier Address classifications for a packet
//
// A packet is classified to have an address binding, if its address
// configuration matches with all user specified properties.
//
// swagger:model PacketAddressClassifier

type PacketAddressClassifier struct {

	// A single IP address or a subnet, e.g. x.x.x.x or x.x.x.x/y
	IPAddress string `json:"ip_address,omitempty"`

	// A single MAC address
	// Pattern: /^(([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2}))|(([0-9A-Fa-f]{2}[-]){5}([0-9A-Fa-f]{2}))$/
	MacAddress string `json:"mac_address,omitempty"`

	// vlan
	Vlan int64 `json:"vlan,omitempty"`
}

/* polymorph PacketAddressClassifier ip_address false */

/* polymorph PacketAddressClassifier mac_address false */

/* polymorph PacketAddressClassifier vlan false */

// Validate validates this packet address classifier
func (m *PacketAddressClassifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMacAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketAddressClassifier) validateMacAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.MacAddress) { // not required
		return nil
	}

	if err := validate.Pattern("mac_address", "body", string(m.MacAddress), `/^(([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2}))|(([0-9A-Fa-f]{2}[-]){5}([0-9A-Fa-f]{2}))$/`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PacketAddressClassifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketAddressClassifier) UnmarshalBinary(b []byte) error {
	var res PacketAddressClassifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
