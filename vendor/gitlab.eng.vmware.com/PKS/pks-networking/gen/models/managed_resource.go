// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ManagedResource managed resource
// swagger:model ManagedResource

type ManagedResource struct {
	RevisionedResource

	// Timestamp of resource creation
	// Read Only: true
	CreateTime int64 `json:"_create_time,omitempty"`

	// ID of the user who created this resource
	// Read Only: true
	CreateUser string `json:"_create_user,omitempty"`

	// Timestamp of last modification
	// Read Only: true
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`

	// ID of the user who last modified this resource
	// Read Only: true
	LastModifiedUser string `json:"_last_modified_user,omitempty"`

	// Indicates system owned resource
	// Read Only: true
	SystemOwned *bool `json:"_system_owned,omitempty"`

	// Description of this resource
	//
	// Description of this resource
	// Max Length: 1024
	Description string `json:"description,omitempty"`

	// Identifier to use when displaying entity in logs or GUI
	//
	// Defaults to ID if not set
	// Max Length: 255
	DisplayName string `json:"display_name,omitempty"`

	// Unique identifier of this resource
	//
	// Unique identifier of this resource
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The type of this resource.
	ResourceType string `json:"resource_type,omitempty"`

	// Opaque identifiers meaningful to the API user
	//
	// Opaque identifiers meaningful to the API user
	// Max Items: 15
	Tags []*Tag `json:"tags"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ManagedResource) UnmarshalJSON(raw []byte) error {

	var aO0 RevisionedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.RevisionedResource = aO0

	var data struct {
		CreateTime int64 `json:"_create_time,omitempty"`

		CreateUser string `json:"_create_user,omitempty"`

		LastModifiedTime int64 `json:"_last_modified_time,omitempty"`

		LastModifiedUser string `json:"_last_modified_user,omitempty"`

		SystemOwned *bool `json:"_system_owned,omitempty"`

		Description string `json:"description,omitempty"`

		DisplayName string `json:"display_name,omitempty"`

		ID string `json:"id,omitempty"`

		ResourceType string `json:"resource_type,omitempty"`

		Tags []*Tag `json:"tags,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.CreateTime = data.CreateTime

	m.CreateUser = data.CreateUser

	m.LastModifiedTime = data.LastModifiedTime

	m.LastModifiedUser = data.LastModifiedUser

	m.SystemOwned = data.SystemOwned

	m.Description = data.Description

	m.DisplayName = data.DisplayName

	m.ID = data.ID

	m.ResourceType = data.ResourceType

	m.Tags = data.Tags

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ManagedResource) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.RevisionedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		CreateTime int64 `json:"_create_time,omitempty"`

		CreateUser string `json:"_create_user,omitempty"`

		LastModifiedTime int64 `json:"_last_modified_time,omitempty"`

		LastModifiedUser string `json:"_last_modified_user,omitempty"`

		SystemOwned *bool `json:"_system_owned,omitempty"`

		Description string `json:"description,omitempty"`

		DisplayName string `json:"display_name,omitempty"`

		ID string `json:"id,omitempty"`

		ResourceType string `json:"resource_type,omitempty"`

		Tags []*Tag `json:"tags,omitempty"`
	}

	data.CreateTime = m.CreateTime

	data.CreateUser = m.CreateUser

	data.LastModifiedTime = m.LastModifiedTime

	data.LastModifiedUser = m.LastModifiedUser

	data.SystemOwned = m.SystemOwned

	data.Description = m.Description

	data.DisplayName = m.DisplayName

	data.ID = m.ID

	data.ResourceType = m.ResourceType

	data.Tags = m.Tags

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this managed resource
func (m *ManagedResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.RevisionedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManagedResource) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 1024); err != nil {
		return err
	}

	return nil
}

func (m *ManagedResource) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MaxLength("display_name", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *ManagedResource) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	iTagsSize := int64(len(m.Tags))

	if err := validate.MaxItems("tags", "body", iTagsSize, 15); err != nil {
		return err
	}

	for i := 0; i < len(m.Tags); i++ {

		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {

			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ManagedResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ManagedResource) UnmarshalBinary(b []byte) error {
	var res ManagedResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
