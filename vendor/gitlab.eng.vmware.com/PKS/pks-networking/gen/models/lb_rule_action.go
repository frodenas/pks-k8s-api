// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LbRuleAction Load balancer rule action
//
// Load balancer rule actions are used to manipulate application traffic.
// Currently load balancer rules can be used at three load balancer processing
// phases. Each phase has its own supported type of actions.
// Supported actions in HTTP_REQUST_REWRITE phase are:
//   LbHttpRequestUriRewriteAction
//   LbHttpRequestHeaderRewriteAction
// Supported actions in HTTP_FORWARDING phase are:
//   LbHttpRejectAction
//   LbHttpRedirectAction
//   LbSelectPoolAction
//   LbSelectServerAction
// Supported action in HTTP_RESPONSE_REWRITE phase is:
//   LbHttpResponseHeaderRewriteAction
//
// If the match type of an LbRuleCondition field is specified as REGEX and
// named capturing groups are used in the specified regular expression. The
// groups can be used as variables in LbRuleAction fields.
// For example, define a rule with LbHttpRequestUriCondition as match
// condition and LbHttpRequestUriRewriteAction as action. Set match_type field
// of LbHttpRequestUriCondition to REGEX, and set uri field to
//   "/news/(?&lt;year&gt;\d+)/(?&lt;month&gt;\d+)/(?&lt;article&gt;.*)".
// Set uri field of LbHttpRequestUriRewriteAction to:
//   "/news/$year-$month/$article"
// In uri field of LbHttpRequestUriCondition, the (?&lt;year&gt;\d+),
// (?&lt;month&gt;\d+) and (?&lt;article&gt;.*) are named capturing groups,
// they define variables named $year, $month and $article respectively. The
// defined variables are used in LbHttpRequestUriRewriteAction.
// For a matched HTTP request with URI "/news/2017/06/xyz.html", the substring
// "2017" is captured in variable $year, "06" is captured in variable $month,
// and "xyz.html" is captured in variable $article. The
// LbHttpRequestUriRewriteAction will rewrite the URI to:
//   "/news/2017-06/xyz.html"
// A set of built-in variables can be used in LbRuleAction as well. The name
// of built-in variables start with underscore, the name of user defined
// variables is not allowed to start with underscore.
// Following are some of the built-in variables:
//   $_scheme: Reference the scheme part of matched HTTP messages, could be
// "http" or "https".
//   $_host: Host of matched HTTP messages, for example "www.example.com".
//   $_server_port: Port part of URI, it is also the port of the server which
// accepted a request. Default port is 80 for http and 443 for https.
//   $_uri: The URI path, for example "/products/sample.html".
//   $_request_uri: Full original request URI with arguments, for example,
//     "/products/sample.html?a=b&c=d".
//   $_args: URI arguments, for instance "a=b&c=d"
//   $_is_args: "?" if a request has URI arguments, or an empty string
// otherwise.
// For the full list of built-in variables, please reference the NSX-T
// Administrator's Guide.
//
// swagger:model LbRuleAction

type LbRuleAction struct {

	// Type of load balancer rule action
	// Required: true
	Type *string `json:"type"`
}

/* polymorph LbRuleAction type false */

// Validate validates this lb rule action
func (m *LbRuleAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var lbRuleActionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LbHttpRequestUriRewriteAction","LbHttpRequestHeaderRewriteAction","LbHttpRejectAction","LbHttpRedirectAction","LbSelectPoolAction","LbSelectServerAction","LbHttpResponseHeaderRewriteAction"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lbRuleActionTypeTypePropEnum = append(lbRuleActionTypeTypePropEnum, v)
	}
}

const (
	// LbRuleActionTypeLbHTTPRequestURIRewriteAction captures enum value "LbHttpRequestUriRewriteAction"
	LbRuleActionTypeLbHTTPRequestURIRewriteAction string = "LbHttpRequestUriRewriteAction"
	// LbRuleActionTypeLbHTTPRequestHeaderRewriteAction captures enum value "LbHttpRequestHeaderRewriteAction"
	LbRuleActionTypeLbHTTPRequestHeaderRewriteAction string = "LbHttpRequestHeaderRewriteAction"
	// LbRuleActionTypeLbHTTPRejectAction captures enum value "LbHttpRejectAction"
	LbRuleActionTypeLbHTTPRejectAction string = "LbHttpRejectAction"
	// LbRuleActionTypeLbHTTPRedirectAction captures enum value "LbHttpRedirectAction"
	LbRuleActionTypeLbHTTPRedirectAction string = "LbHttpRedirectAction"
	// LbRuleActionTypeLbSelectPoolAction captures enum value "LbSelectPoolAction"
	LbRuleActionTypeLbSelectPoolAction string = "LbSelectPoolAction"
	// LbRuleActionTypeLbSelectServerAction captures enum value "LbSelectServerAction"
	LbRuleActionTypeLbSelectServerAction string = "LbSelectServerAction"
	// LbRuleActionTypeLbHTTPResponseHeaderRewriteAction captures enum value "LbHttpResponseHeaderRewriteAction"
	LbRuleActionTypeLbHTTPResponseHeaderRewriteAction string = "LbHttpResponseHeaderRewriteAction"
)

// prop value enum
func (m *LbRuleAction) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lbRuleActionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LbRuleAction) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LbRuleAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LbRuleAction) UnmarshalBinary(b []byte) error {
	var res LbRuleAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
