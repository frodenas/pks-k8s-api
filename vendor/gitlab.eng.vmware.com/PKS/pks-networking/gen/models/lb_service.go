// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LbService lb service
// swagger:model LbService

type LbService struct {
	ManagedResource

	// whether access log is enabled
	//
	// whether access log is enabled
	AccessLogEnabled *bool `json:"access_log_enabled,omitempty"`

	// The target which is used to instantiate Lb service.
	//
	// LBS could be instantiated (or created) on the Logical router, etc.
	// Typically, it could be applied to Tier1 LogicalRouter. It can be
	// attached to Tier0 LogicalRouter either in non-multi-tenant environments
	// or to provide load balancing for infrastructure services offered by
	// the provider.
	//
	Attachment *ResourceReference `json:"attachment,omitempty"`

	// whether the load balancer service is enabled
	//
	// whether the load balancer service is enabled
	Enabled *bool `json:"enabled,omitempty"`

	// Load balancer engine writes information about encountered issues of
	// different severity levels to the error log. This setting is used to
	// define the severity level of the error log.
	//
	ErrorLogLevel *string `json:"error_log_level,omitempty"`

	// the size of load balancer service
	Size *string `json:"size,omitempty"`

	// virtual server identifier list
	//
	// virtual servers can be associated to LbService(which is
	// similar to physical/virtual load balancer), Lb virtual servers,
	// pools and other entities could be defined independently, the virtual
	// server identifier list here would be used to maintain the relationship of
	// LbService and other Lb entities.
	//
	VirtualServerIds []string `json:"virtual_server_ids"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LbService) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		AccessLogEnabled *bool `json:"access_log_enabled,omitempty"`

		Attachment *ResourceReference `json:"attachment,omitempty"`

		Enabled *bool `json:"enabled,omitempty"`

		ErrorLogLevel *string `json:"error_log_level,omitempty"`

		Size *string `json:"size,omitempty"`

		VirtualServerIds []string `json:"virtual_server_ids,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.AccessLogEnabled = data.AccessLogEnabled

	m.Attachment = data.Attachment

	m.Enabled = data.Enabled

	m.ErrorLogLevel = data.ErrorLogLevel

	m.Size = data.Size

	m.VirtualServerIds = data.VirtualServerIds

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LbService) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		AccessLogEnabled *bool `json:"access_log_enabled,omitempty"`

		Attachment *ResourceReference `json:"attachment,omitempty"`

		Enabled *bool `json:"enabled,omitempty"`

		ErrorLogLevel *string `json:"error_log_level,omitempty"`

		Size *string `json:"size,omitempty"`

		VirtualServerIds []string `json:"virtual_server_ids,omitempty"`
	}

	data.AccessLogEnabled = m.AccessLogEnabled

	data.Attachment = m.Attachment

	data.Enabled = m.Enabled

	data.ErrorLogLevel = m.ErrorLogLevel

	data.Size = m.Size

	data.VirtualServerIds = m.VirtualServerIds

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this lb service
func (m *LbService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttachment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualServerIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LbService) validateAttachment(formats strfmt.Registry) error {

	if swag.IsZero(m.Attachment) { // not required
		return nil
	}

	if m.Attachment != nil {

		if err := m.Attachment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attachment")
			}
			return err
		}
	}

	return nil
}

var lbServiceTypeErrorLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEBUG","INFO","WARNING","ERROR","CRITICAL","ALERT","EMERGENCY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lbServiceTypeErrorLogLevelPropEnum = append(lbServiceTypeErrorLogLevelPropEnum, v)
	}
}

// property enum
func (m *LbService) validateErrorLogLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lbServiceTypeErrorLogLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LbService) validateErrorLogLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorLogLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateErrorLogLevelEnum("error_log_level", "body", *m.ErrorLogLevel); err != nil {
		return err
	}

	return nil
}

var lbServiceTypeSizePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SMALL","MEDIUM","LARGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lbServiceTypeSizePropEnum = append(lbServiceTypeSizePropEnum, v)
	}
}

// property enum
func (m *LbService) validateSizeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lbServiceTypeSizePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LbService) validateSize(formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	// value enum
	if err := m.validateSizeEnum("size", "body", *m.Size); err != nil {
		return err
	}

	return nil
}

func (m *LbService) validateVirtualServerIds(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualServerIds) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LbService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LbService) UnmarshalBinary(b []byte) error {
	var res LbService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
