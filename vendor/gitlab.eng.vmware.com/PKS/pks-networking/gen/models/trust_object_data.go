// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrustObjectData trust object data
// swagger:model TrustObjectData

type TrustObjectData struct {
	ManagedResource

	// Key algorithm contained in this certificate
	KeyAlgo string `json:"key_algo,omitempty"`

	// Password for private key encryption
	Passphrase string `json:"passphrase,omitempty"`

	// pem encoded certificate data
	// Required: true
	PemEncoded *string `json:"pem_encoded"`

	// private key data
	PrivateKey string `json:"private_key,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TrustObjectData) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		KeyAlgo string `json:"key_algo,omitempty"`

		Passphrase string `json:"passphrase,omitempty"`

		PemEncoded *string `json:"pem_encoded"`

		PrivateKey string `json:"private_key,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.KeyAlgo = data.KeyAlgo

	m.Passphrase = data.Passphrase

	m.PemEncoded = data.PemEncoded

	m.PrivateKey = data.PrivateKey

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TrustObjectData) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		KeyAlgo string `json:"key_algo,omitempty"`

		Passphrase string `json:"passphrase,omitempty"`

		PemEncoded *string `json:"pem_encoded"`

		PrivateKey string `json:"private_key,omitempty"`
	}

	data.KeyAlgo = m.KeyAlgo

	data.Passphrase = m.Passphrase

	data.PemEncoded = m.PemEncoded

	data.PrivateKey = m.PrivateKey

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this trust object data
func (m *TrustObjectData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePemEncoded(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrustObjectData) validatePemEncoded(formats strfmt.Registry) error {

	if err := validate.Required("pem_encoded", "body", m.PemEncoded); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrustObjectData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrustObjectData) UnmarshalBinary(b []byte) error {
	var res TrustObjectData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
