// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ListResult list result
// swagger:model ListResult

type ListResult struct {
	Resource

	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	//
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	// Read Only: true
	Cursor string `json:"cursor,omitempty"`

	// Count of results found (across all pages), set only on first page
	//
	// Count of results found (across all pages), set only on first page
	// Read Only: true
	ResultCount int64 `json:"result_count,omitempty"`

	// sort ascending
	// Read Only: true
	SortAscending *bool `json:"sort_ascending,omitempty"`

	// Field by which records are sorted
	//
	// Field by which records are sorted
	// Read Only: true
	SortBy string `json:"sort_by,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ListResult) UnmarshalJSON(raw []byte) error {

	var aO0 Resource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Resource = aO0

	var data struct {
		Cursor string `json:"cursor,omitempty"`

		ResultCount int64 `json:"result_count,omitempty"`

		SortAscending *bool `json:"sort_ascending,omitempty"`

		SortBy string `json:"sort_by,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.Cursor = data.Cursor

	m.ResultCount = data.ResultCount

	m.SortAscending = data.SortAscending

	m.SortBy = data.SortBy

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ListResult) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.Resource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		Cursor string `json:"cursor,omitempty"`

		ResultCount int64 `json:"result_count,omitempty"`

		SortAscending *bool `json:"sort_ascending,omitempty"`

		SortBy string `json:"sort_by,omitempty"`
	}

	data.Cursor = m.Cursor

	data.ResultCount = m.ResultCount

	data.SortAscending = m.SortAscending

	data.SortBy = m.SortBy

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this list result
func (m *ListResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ListResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListResult) UnmarshalBinary(b []byte) error {
	var res ListResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
