// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PoolMember pool member
// swagger:model PoolMember

type PoolMember struct {

	// member admin state
	AdminState *string `json:"admin_state,omitempty"`

	// determine whether the pool member is for backup usage
	//
	// Backup servers are typically configured with a sorry page indicating to
	// the user that the application is currently unavailable. While the pool
	// is active (a specified minimum number of pool members are active)
	// BACKUP members are skipped during server selection. When the pool is
	// inactive, incoming connections are sent to only the BACKUP member(s).
	//
	BackupMember *bool `json:"backup_member,omitempty"`

	// pool member name
	//
	// pool member name
	DisplayName string `json:"display_name,omitempty"`

	// pool member IP address
	// Required: true
	IPAddress *string `json:"ip_address"`

	// maximum concurrent connection number
	//
	// To ensure members are not overloaded, connections to a member can be
	// capped by the load balancer. When a member reaches this limit, it is
	// skipped during server selection.
	// If it is not specified, it means that connections are unlimited.
	//
	// Minimum: 1
	MaxConcurrentConnections int64 `json:"max_concurrent_connections,omitempty"`

	// If port is specified, all connections will be sent to this port. Only
	// single port is supported.
	// If unset, the same port the client connected to will be used, it could
	// be overrode by default_pool_member_port setting in virtual server.
	// The port should not specified for port range case.
	//
	Port string `json:"port,omitempty"`

	// pool member weight
	//
	// Pool member weight is used for WEIGHTED_ROUND_ROBIN balancing
	// algorithm. The weight value would be ignored in other algorithms.
	//
	// Maximum: 255
	// Minimum: 1
	Weight int64 `json:"weight,omitempty"`
}

/* polymorph PoolMember admin_state false */

/* polymorph PoolMember backup_member false */

/* polymorph PoolMember display_name false */

/* polymorph PoolMember ip_address false */

/* polymorph PoolMember max_concurrent_connections false */

/* polymorph PoolMember port false */

/* polymorph PoolMember weight false */

// Validate validates this pool member
func (m *PoolMember) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIPAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaxConcurrentConnections(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWeight(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var poolMemberTypeAdminStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED","GRACEFUL_DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		poolMemberTypeAdminStatePropEnum = append(poolMemberTypeAdminStatePropEnum, v)
	}
}

const (
	// PoolMemberAdminStateENABLED captures enum value "ENABLED"
	PoolMemberAdminStateENABLED string = "ENABLED"
	// PoolMemberAdminStateDISABLED captures enum value "DISABLED"
	PoolMemberAdminStateDISABLED string = "DISABLED"
	// PoolMemberAdminStateGRACEFULDISABLED captures enum value "GRACEFUL_DISABLED"
	PoolMemberAdminStateGRACEFULDISABLED string = "GRACEFUL_DISABLED"
)

// prop value enum
func (m *PoolMember) validateAdminStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, poolMemberTypeAdminStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PoolMember) validateAdminState(formats strfmt.Registry) error {

	if swag.IsZero(m.AdminState) { // not required
		return nil
	}

	// value enum
	if err := m.validateAdminStateEnum("admin_state", "body", *m.AdminState); err != nil {
		return err
	}

	return nil
}

func (m *PoolMember) validateIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("ip_address", "body", m.IPAddress); err != nil {
		return err
	}

	return nil
}

func (m *PoolMember) validateMaxConcurrentConnections(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxConcurrentConnections) { // not required
		return nil
	}

	if err := validate.MinimumInt("max_concurrent_connections", "body", int64(m.MaxConcurrentConnections), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *PoolMember) validateWeight(formats strfmt.Registry) error {

	if swag.IsZero(m.Weight) { // not required
		return nil
	}

	if err := validate.MinimumInt("weight", "body", int64(m.Weight), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("weight", "body", int64(m.Weight), 255, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PoolMember) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PoolMember) UnmarshalBinary(b []byte) error {
	var res PoolMember
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
