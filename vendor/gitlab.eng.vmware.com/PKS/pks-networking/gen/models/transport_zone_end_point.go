// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransportZoneEndPoint This object associates TransportNode to a certain TransportZone
//
// Specify which HostSwitch from this TransportNode is used handle traffic for given TransportZone
// swagger:model TransportZoneEndPoint

type TransportZoneEndPoint struct {

	// Unique ID identifying the transport zone for this endpoint
	//
	// Unique ID identifying the transport zone for this endpoint
	// Required: true
	TransportZoneID *string `json:"transport_zone_id"`

	// Identifiers of the transport zone profiles associated with this transport zone endpoint on this transport node.
	//
	// Identifiers of the transport zone profiles associated with this transport zone endpoint on this transport node.
	TransportZoneProfileIds []*TransportZoneProfileTypeIDEntry `json:"transport_zone_profile_ids"`
}

/* polymorph TransportZoneEndPoint transport_zone_id false */

/* polymorph TransportZoneEndPoint transport_zone_profile_ids false */

// Validate validates this transport zone end point
func (m *TransportZoneEndPoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransportZoneID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransportZoneProfileIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportZoneEndPoint) validateTransportZoneID(formats strfmt.Registry) error {

	if err := validate.Required("transport_zone_id", "body", m.TransportZoneID); err != nil {
		return err
	}

	return nil
}

func (m *TransportZoneEndPoint) validateTransportZoneProfileIds(formats strfmt.Registry) error {

	if swag.IsZero(m.TransportZoneProfileIds) { // not required
		return nil
	}

	for i := 0; i < len(m.TransportZoneProfileIds); i++ {

		if swag.IsZero(m.TransportZoneProfileIds[i]) { // not required
			continue
		}

		if m.TransportZoneProfileIds[i] != nil {

			if err := m.TransportZoneProfileIds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transport_zone_profile_ids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransportZoneEndPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransportZoneEndPoint) UnmarshalBinary(b []byte) error {
	var res TransportZoneEndPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
