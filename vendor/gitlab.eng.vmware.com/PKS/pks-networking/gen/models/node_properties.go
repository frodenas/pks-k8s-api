// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeProperties Node properties
//
// Node properties
// swagger:model NodeProperties

type NodeProperties struct {
	Resource

	// Node BIOS Unique Indentifier
	//
	// Node BIOS Unique Indentifier
	// Read Only: true
	BiosUUID string `json:"bios_uuid,omitempty"`

	// NSX CLI inactivity timeout, set to 0 to configure no timeout
	//
	// NSX CLI inactivity timeout, set to 0 to configure no timeout
	// Minimum: 0
	CliTimeout *int64 `json:"cli_timeout,omitempty"`

	// Host name or fully qualified domain name of node
	// Pattern: /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/
	Hostname string `json:"hostname,omitempty"`

	// Kernel version
	//
	// Kernel version
	// Read Only: true
	KernelVersion string `json:"kernel_version,omitempty"`

	// Message of the day to display when users login to node using the NSX CLI
	//
	// Message of the day to display when users login to node using the NSX CLI
	Motd interface{} `json:"motd,omitempty"`

	// Node Unique Identifier
	//
	// Node Unique Identifier
	// Max Length: 36
	NodeUUID string `json:"node_uuid,omitempty"`

	// Node version
	//
	// Node version
	// Read Only: true
	NodeVersion string `json:"node_version,omitempty"`

	// Current time expressed in milliseconds since epoch
	// Read Only: true
	SystemTime int64 `json:"system_time,omitempty"`

	// Timezone
	//
	// Timezone
	Timezone string `json:"timezone,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NodeProperties) UnmarshalJSON(raw []byte) error {

	var aO0 Resource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Resource = aO0

	var data struct {
		BiosUUID string `json:"bios_uuid,omitempty"`

		CliTimeout *int64 `json:"cli_timeout,omitempty"`

		Hostname string `json:"hostname,omitempty"`

		KernelVersion string `json:"kernel_version,omitempty"`

		Motd interface{} `json:"motd,omitempty"`

		NodeUUID string `json:"node_uuid,omitempty"`

		NodeVersion string `json:"node_version,omitempty"`

		SystemTime int64 `json:"system_time,omitempty"`

		Timezone string `json:"timezone,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.BiosUUID = data.BiosUUID

	m.CliTimeout = data.CliTimeout

	m.Hostname = data.Hostname

	m.KernelVersion = data.KernelVersion

	m.Motd = data.Motd

	m.NodeUUID = data.NodeUUID

	m.NodeVersion = data.NodeVersion

	m.SystemTime = data.SystemTime

	m.Timezone = data.Timezone

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NodeProperties) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.Resource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		BiosUUID string `json:"bios_uuid,omitempty"`

		CliTimeout *int64 `json:"cli_timeout,omitempty"`

		Hostname string `json:"hostname,omitempty"`

		KernelVersion string `json:"kernel_version,omitempty"`

		Motd interface{} `json:"motd,omitempty"`

		NodeUUID string `json:"node_uuid,omitempty"`

		NodeVersion string `json:"node_version,omitempty"`

		SystemTime int64 `json:"system_time,omitempty"`

		Timezone string `json:"timezone,omitempty"`
	}

	data.BiosUUID = m.BiosUUID

	data.CliTimeout = m.CliTimeout

	data.Hostname = m.Hostname

	data.KernelVersion = m.KernelVersion

	data.Motd = m.Motd

	data.NodeUUID = m.NodeUUID

	data.NodeVersion = m.NodeVersion

	data.SystemTime = m.SystemTime

	data.Timezone = m.Timezone

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this node properties
func (m *NodeProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCliTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeProperties) validateCliTimeout(formats strfmt.Registry) error {

	if swag.IsZero(m.CliTimeout) { // not required
		return nil
	}

	if err := validate.MinimumInt("cli_timeout", "body", int64(*m.CliTimeout), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *NodeProperties) validateHostname(formats strfmt.Registry) error {

	if swag.IsZero(m.Hostname) { // not required
		return nil
	}

	if err := validate.Pattern("hostname", "body", string(m.Hostname), `/^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/`); err != nil {
		return err
	}

	return nil
}

func (m *NodeProperties) validateNodeUUID(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeUUID) { // not required
		return nil
	}

	if err := validate.MaxLength("node_uuid", "body", string(m.NodeUUID), 36); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeProperties) UnmarshalBinary(b []byte) error {
	var res NodeProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
