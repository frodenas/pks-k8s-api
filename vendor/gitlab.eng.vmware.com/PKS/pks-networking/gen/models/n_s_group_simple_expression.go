// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NSGroupSimpleExpression Simple expressions to represent NSGroup membership
//
// Simple expressions to represent NSGroup membership
// swagger:model NSGroupSimpleExpression

type NSGroupSimpleExpression struct {
	NSGroupExpression

	// Operator of the expression
	//
	// Operator of the expression
	// Required: true
	Op *string `json:"op"`

	// Field of the resource on which this expression is evaluated
	//
	// Field of the resource on which this expression is evaluated
	// Required: true
	TargetProperty *string `json:"target_property"`

	// Reference of the target
	//
	// Reference of the target. Will be populated when
	// the property is a resource id, the op (operator) is EQUALS and
	// populate_references is set to be true.
	//
	// Read Only: true
	TargetResource *ResourceReference `json:"target_resource,omitempty"`

	// Type of the resource on which this expression is evaluated
	// Required: true
	TargetType *string `json:"target_type"`

	// Value that satisfies this expression
	//
	// Value that satisfies this expression
	// Required: true
	Value *string `json:"value"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NSGroupSimpleExpression) UnmarshalJSON(raw []byte) error {

	var aO0 NSGroupExpression
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.NSGroupExpression = aO0

	var data struct {
		Op *string `json:"op"`

		TargetProperty *string `json:"target_property"`

		TargetResource *ResourceReference `json:"target_resource,omitempty"`

		TargetType *string `json:"target_type"`

		Value *string `json:"value"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.Op = data.Op

	m.TargetProperty = data.TargetProperty

	m.TargetResource = data.TargetResource

	m.TargetType = data.TargetType

	m.Value = data.Value

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NSGroupSimpleExpression) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.NSGroupExpression)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		Op *string `json:"op"`

		TargetProperty *string `json:"target_property"`

		TargetResource *ResourceReference `json:"target_resource,omitempty"`

		TargetType *string `json:"target_type"`

		Value *string `json:"value"`
	}

	data.Op = m.Op

	data.TargetProperty = m.TargetProperty

	data.TargetResource = m.TargetResource

	data.TargetType = m.TargetType

	data.Value = m.Value

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this n s group simple expression
func (m *NSGroupSimpleExpression) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.NSGroupExpression.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetProperty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nSGroupSimpleExpressionTypeOpPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EQUALS","CONTAINS","STARTSWITH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nSGroupSimpleExpressionTypeOpPropEnum = append(nSGroupSimpleExpressionTypeOpPropEnum, v)
	}
}

// property enum
func (m *NSGroupSimpleExpression) validateOpEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nSGroupSimpleExpressionTypeOpPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NSGroupSimpleExpression) validateOp(formats strfmt.Registry) error {

	if err := validate.Required("op", "body", m.Op); err != nil {
		return err
	}

	// value enum
	if err := m.validateOpEnum("op", "body", *m.Op); err != nil {
		return err
	}

	return nil
}

func (m *NSGroupSimpleExpression) validateTargetProperty(formats strfmt.Registry) error {

	if err := validate.Required("target_property", "body", m.TargetProperty); err != nil {
		return err
	}

	return nil
}

func (m *NSGroupSimpleExpression) validateTargetResource(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetResource) { // not required
		return nil
	}

	if m.TargetResource != nil {

		if err := m.TargetResource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_resource")
			}
			return err
		}
	}

	return nil
}

var nSGroupSimpleExpressionTypeTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NSGroup","IPSet","MACSet","LogicalSwitch","LogicalPort","VirtualMachine"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nSGroupSimpleExpressionTypeTargetTypePropEnum = append(nSGroupSimpleExpressionTypeTargetTypePropEnum, v)
	}
}

// property enum
func (m *NSGroupSimpleExpression) validateTargetTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nSGroupSimpleExpressionTypeTargetTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NSGroupSimpleExpression) validateTargetType(formats strfmt.Registry) error {

	if err := validate.Required("target_type", "body", m.TargetType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetTypeEnum("target_type", "body", *m.TargetType); err != nil {
		return err
	}

	return nil
}

func (m *NSGroupSimpleExpression) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NSGroupSimpleExpression) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NSGroupSimpleExpression) UnmarshalBinary(b []byte) error {
	var res NSGroupSimpleExpression
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
