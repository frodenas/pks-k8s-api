// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPBlockSubnet Ip block subnet
// swagger:model IpBlockSubnet

type IPBlockSubnet struct {
	ManagedResource

	// A collection of IPv4 IP ranges used for IP allocation.
	//
	// A collection of IPv4 IP ranges used for IP allocation.
	// Read Only: true
	AllocationRanges []*IPPoolRange `json:"allocation_ranges"`

	// Block id for which the subnet is created.
	//
	// Block id for which the subnet is created.
	// Required: true
	BlockID *string `json:"block_id"`

	// Represents network address and the prefix length which will be associated with a layer-2 broadcast domain
	//
	// Represents network address and the prefix length which will be associated with a layer-2 broadcast domain
	// Read Only: true
	Cidr string `json:"cidr,omitempty"`

	// Represents the size or number of ip addresses in the subnet
	//
	// Represents the size or number of ip addresses in the subnet
	// Required: true
	Size *int64 `json:"size"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IPBlockSubnet) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		AllocationRanges []*IPPoolRange `json:"allocation_ranges,omitempty"`

		BlockID *string `json:"block_id"`

		Cidr string `json:"cidr,omitempty"`

		Size *int64 `json:"size"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.AllocationRanges = data.AllocationRanges

	m.BlockID = data.BlockID

	m.Cidr = data.Cidr

	m.Size = data.Size

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IPBlockSubnet) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		AllocationRanges []*IPPoolRange `json:"allocation_ranges,omitempty"`

		BlockID *string `json:"block_id"`

		Cidr string `json:"cidr,omitempty"`

		Size *int64 `json:"size"`
	}

	data.AllocationRanges = m.AllocationRanges

	data.BlockID = m.BlockID

	data.Cidr = m.Cidr

	data.Size = m.Size

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this Ip block subnet
func (m *IPBlockSubnet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllocationRanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPBlockSubnet) validateAllocationRanges(formats strfmt.Registry) error {

	if swag.IsZero(m.AllocationRanges) { // not required
		return nil
	}

	for i := 0; i < len(m.AllocationRanges); i++ {

		if swag.IsZero(m.AllocationRanges[i]) { // not required
			continue
		}

		if m.AllocationRanges[i] != nil {

			if err := m.AllocationRanges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allocation_ranges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IPBlockSubnet) validateBlockID(formats strfmt.Registry) error {

	if err := validate.Required("block_id", "body", m.BlockID); err != nil {
		return err
	}

	return nil
}

func (m *IPBlockSubnet) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPBlockSubnet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPBlockSubnet) UnmarshalBinary(b []byte) error {
	var res IPBlockSubnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
