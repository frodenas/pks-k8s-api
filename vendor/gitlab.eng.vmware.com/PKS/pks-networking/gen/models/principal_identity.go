// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PrincipalIdentity principal identity
// swagger:model PrincipalIdentity

type PrincipalIdentity struct {
	ManagedResource

	// Id of the stored certificate
	//
	// Id of the stored certificate
	// Required: true
	CertificateID *string `json:"certificate_id"`

	// Protection indicator
	//
	// Indicator whether the entities created by this principal should be protected
	IsProtected bool `json:"is_protected,omitempty"`

	// Name
	//
	// Name of the principal
	// Required: true
	// Max Length: 255
	Name *string `json:"name"`

	// Unique node-id
	//
	// Unique node-id of a principal
	// Required: true
	// Max Length: 255
	NodeID *string `json:"node_id"`

	// permission group
	// Required: true
	PermissionGroup *string `json:"permission_group"`

	// Role
	//
	// Role
	Role string `json:"role,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PrincipalIdentity) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		CertificateID *string `json:"certificate_id"`

		IsProtected bool `json:"is_protected,omitempty"`

		Name *string `json:"name"`

		NodeID *string `json:"node_id"`

		PermissionGroup *string `json:"permission_group"`

		Role string `json:"role,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.CertificateID = data.CertificateID

	m.IsProtected = data.IsProtected

	m.Name = data.Name

	m.NodeID = data.NodeID

	m.PermissionGroup = data.PermissionGroup

	m.Role = data.Role

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PrincipalIdentity) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		CertificateID *string `json:"certificate_id"`

		IsProtected bool `json:"is_protected,omitempty"`

		Name *string `json:"name"`

		NodeID *string `json:"node_id"`

		PermissionGroup *string `json:"permission_group"`

		Role string `json:"role,omitempty"`
	}

	data.CertificateID = m.CertificateID

	data.IsProtected = m.IsProtected

	data.Name = m.Name

	data.NodeID = m.NodeID

	data.PermissionGroup = m.PermissionGroup

	data.Role = m.Role

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this principal identity
func (m *PrincipalIdentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissionGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrincipalIdentity) validateCertificateID(formats strfmt.Registry) error {

	if err := validate.Required("certificate_id", "body", m.CertificateID); err != nil {
		return err
	}

	return nil
}

func (m *PrincipalIdentity) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 255); err != nil {
		return err
	}

	return nil
}

func (m *PrincipalIdentity) validateNodeID(formats strfmt.Registry) error {

	if err := validate.Required("node_id", "body", m.NodeID); err != nil {
		return err
	}

	if err := validate.MaxLength("node_id", "body", string(*m.NodeID), 255); err != nil {
		return err
	}

	return nil
}

var principalIdentityTypePermissionGroupPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["read_only_api_users","read_write_api_users","superusers","undefined"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		principalIdentityTypePermissionGroupPropEnum = append(principalIdentityTypePermissionGroupPropEnum, v)
	}
}

// property enum
func (m *PrincipalIdentity) validatePermissionGroupEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, principalIdentityTypePermissionGroupPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PrincipalIdentity) validatePermissionGroup(formats strfmt.Registry) error {

	if err := validate.Required("permission_group", "body", m.PermissionGroup); err != nil {
		return err
	}

	// value enum
	if err := m.validatePermissionGroupEnum("permission_group", "body", *m.PermissionGroup); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrincipalIdentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrincipalIdentity) UnmarshalBinary(b []byte) error {
	var res PrincipalIdentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
