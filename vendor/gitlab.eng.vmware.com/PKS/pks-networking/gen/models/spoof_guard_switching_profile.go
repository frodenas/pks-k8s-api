// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SpoofGuardSwitchingProfile spoof guard switching profile
// swagger:model SpoofGuardSwitchingProfile

type SpoofGuardSwitchingProfile struct {
	ManagedResource

	// required capabilities
	// Read Only: true
	RequiredCapabilities []string `json:"required_capabilities"`

	// resource type
	// Required: true
	ResourceType *string `json:"resource_type"`

	// List of providers for white listed address bindings.
	//
	// List of providers for white listed address bindings.
	// Required: true
	WhiteListProviders []string `json:"white_list_providers"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SpoofGuardSwitchingProfile) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		RequiredCapabilities []string `json:"required_capabilities,omitempty"`

		ResourceType *string `json:"resource_type"`

		WhiteListProviders []string `json:"white_list_providers"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.RequiredCapabilities = data.RequiredCapabilities

	m.ResourceType = data.ResourceType

	m.WhiteListProviders = data.WhiteListProviders

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SpoofGuardSwitchingProfile) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		RequiredCapabilities []string `json:"required_capabilities,omitempty"`

		ResourceType *string `json:"resource_type"`

		WhiteListProviders []string `json:"white_list_providers"`
	}

	data.RequiredCapabilities = m.RequiredCapabilities

	data.ResourceType = m.ResourceType

	data.WhiteListProviders = m.WhiteListProviders

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this spoof guard switching profile
func (m *SpoofGuardSwitchingProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhiteListProviders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SpoofGuardSwitchingProfile) validateRequiredCapabilities(formats strfmt.Registry) error {

	if swag.IsZero(m.RequiredCapabilities) { // not required
		return nil
	}

	return nil
}

func (m *SpoofGuardSwitchingProfile) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resource_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

var spoofGuardSwitchingProfileWhiteListProvidersItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LPORT_BINDINGS","LSWITCH_BINDINGS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		spoofGuardSwitchingProfileWhiteListProvidersItemsEnum = append(spoofGuardSwitchingProfileWhiteListProvidersItemsEnum, v)
	}
}

func (m *SpoofGuardSwitchingProfile) validateWhiteListProvidersItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, spoofGuardSwitchingProfileWhiteListProvidersItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *SpoofGuardSwitchingProfile) validateWhiteListProviders(formats strfmt.Registry) error {

	if err := validate.Required("white_list_providers", "body", m.WhiteListProviders); err != nil {
		return err
	}

	for i := 0; i < len(m.WhiteListProviders); i++ {

		// value enum
		if err := m.validateWhiteListProvidersItemsEnum("white_list_providers"+"."+strconv.Itoa(i), "body", m.WhiteListProviders[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SpoofGuardSwitchingProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SpoofGuardSwitchingProfile) UnmarshalBinary(b []byte) error {
	var res SpoofGuardSwitchingProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
