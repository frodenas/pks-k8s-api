// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// HostSwitch Host Switch specification
//
// Host Switch specification
// swagger:model HostSwitch

type HostSwitch struct {

	// HostSwitch name. This name will be used to reference this HostSwitch.
	//
	// If this name is unset or empty then the default host switch name will be used. The name must be unique among all host switches specified in a given Transport Node; unset name, empty name and the default host switch name are considered the same in terms of uniqueness.
	HostSwitchName *string `json:"host_switch_name,omitempty"`

	// Id's of HostSwitch profiles to be associated with this HostSwitch.
	//
	// HostSwitch profiles bound to this HostSwitch. If a profile ID is not provided for any HostSwitchProfileType that is supported by the Transport Node, the corresponding default profile will be bound to the HostSwitch.
	HostSwitchProfileIds []*HostSwitchProfileTypeIDEntry `json:"host_switch_profile_ids"`

	// Physical NICs connected to the host switch
	//
	// Physical NICs connected to the host switch
	Pnics []*Pnic `json:"pnics"`

	// ID of already configured Static IP Pool.
	//
	// ID of configured Static IP Pool. If specified allocate IP for Endpoints from Pool. Else assume IP will be assigned for Endpoints from DHCP. This field is deprecated, use ip_assignment_spec field instead.
	StaticIPPoolID string `json:"static_ip_pool_id,omitempty"`
}

/* polymorph HostSwitch host_switch_name false */

/* polymorph HostSwitch host_switch_profile_ids false */

/* polymorph HostSwitch pnics false */

/* polymorph HostSwitch static_ip_pool_id false */

// Validate validates this host switch
func (m *HostSwitch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostSwitchProfileIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePnics(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostSwitch) validateHostSwitchProfileIds(formats strfmt.Registry) error {

	if swag.IsZero(m.HostSwitchProfileIds) { // not required
		return nil
	}

	for i := 0; i < len(m.HostSwitchProfileIds); i++ {

		if swag.IsZero(m.HostSwitchProfileIds[i]) { // not required
			continue
		}

		if m.HostSwitchProfileIds[i] != nil {

			if err := m.HostSwitchProfileIds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("host_switch_profile_ids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HostSwitch) validatePnics(formats strfmt.Registry) error {

	if swag.IsZero(m.Pnics) { // not required
		return nil
	}

	for i := 0; i < len(m.Pnics); i++ {

		if swag.IsZero(m.Pnics[i]) { // not required
			continue
		}

		if m.Pnics[i] != nil {

			if err := m.Pnics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pnics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HostSwitch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostSwitch) UnmarshalBinary(b []byte) error {
	var res HostSwitch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
