// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigurationState configuration state
// swagger:model ConfigurationState

type ConfigurationState struct {

	// Array of configuration state of various sub systems
	//
	// Array of configuration state of various sub systems
	// Read Only: true
	Details []*ConfigurationStateElement `json:"details"`

	// Error code
	//
	// Error code
	// Read Only: true
	FailureCode int64 `json:"failure_code,omitempty"`

	// Error message in case of failure
	//
	// Error message in case of failure
	// Read Only: true
	FailureMessage string `json:"failure_message,omitempty"`

	// Overall state of desired configuration
	//
	// Gives details of state of desired configuration
	// Read Only: true
	State string `json:"state,omitempty"`
}

/* polymorph ConfigurationState details false */

/* polymorph ConfigurationState failure_code false */

/* polymorph ConfigurationState failure_message false */

/* polymorph ConfigurationState state false */

// Validate validates this configuration state
func (m *ConfigurationState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigurationState) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.Details) { // not required
		return nil
	}

	for i := 0; i < len(m.Details); i++ {

		if swag.IsZero(m.Details[i]) { // not required
			continue
		}

		if m.Details[i] != nil {

			if err := m.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var configurationStateTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","in_progress","success","failed","partial_success","orphaned"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configurationStateTypeStatePropEnum = append(configurationStateTypeStatePropEnum, v)
	}
}

const (
	// ConfigurationStateStatePending captures enum value "pending"
	ConfigurationStateStatePending string = "pending"
	// ConfigurationStateStateInProgress captures enum value "in_progress"
	ConfigurationStateStateInProgress string = "in_progress"
	// ConfigurationStateStateSuccess captures enum value "success"
	ConfigurationStateStateSuccess string = "success"
	// ConfigurationStateStateFailed captures enum value "failed"
	ConfigurationStateStateFailed string = "failed"
	// ConfigurationStateStatePartialSuccess captures enum value "partial_success"
	ConfigurationStateStatePartialSuccess string = "partial_success"
	// ConfigurationStateStateOrphaned captures enum value "orphaned"
	ConfigurationStateStateOrphaned string = "orphaned"
)

// prop value enum
func (m *ConfigurationState) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, configurationStateTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConfigurationState) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigurationState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigurationState) UnmarshalBinary(b []byte) error {
	var res ConfigurationState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
