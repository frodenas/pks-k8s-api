// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransportNode transport node
// swagger:model TransportNode

type TransportNode struct {
	ManagedResource

	// Transport Node switch(s). Prefer host_switch_spec over this.
	//
	// This property is deprecated in favor of 'host_switch_spec'. Property 'host_switches' can only be used for NSX managed transport nodes. 'host_switch_spec' can be used for both NSX managed or manually preconfigured host switches.
	HostSwitches []*HostSwitch `json:"host_switches"`

	// transport node maintenance mode desired state
	//
	// The property is read-only, used for querying result. User could update transport node maintenance mode by UpdateTransportNodeMaintenanceMode call.
	// Read Only: true
	MaintenanceMode string `json:"maintenance_mode,omitempty"`

	// Unique Id of the fabric node
	//
	// Unique Id of the fabric node
	// Required: true
	NodeID *string `json:"node_id"`

	// Transport zone endpoints.
	//
	// Transport zone endpoints.
	TransportZoneEndpoints []*TransportZoneEndPoint `json:"transport_zone_endpoints"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TransportNode) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		HostSwitches []*HostSwitch `json:"host_switches,omitempty"`

		MaintenanceMode string `json:"maintenance_mode,omitempty"`

		NodeID *string `json:"node_id"`

		TransportZoneEndpoints []*TransportZoneEndPoint `json:"transport_zone_endpoints,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.HostSwitches = data.HostSwitches

	m.MaintenanceMode = data.MaintenanceMode

	m.NodeID = data.NodeID

	m.TransportZoneEndpoints = data.TransportZoneEndpoints

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TransportNode) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		HostSwitches []*HostSwitch `json:"host_switches,omitempty"`

		MaintenanceMode string `json:"maintenance_mode,omitempty"`

		NodeID *string `json:"node_id"`

		TransportZoneEndpoints []*TransportZoneEndPoint `json:"transport_zone_endpoints,omitempty"`
	}

	data.HostSwitches = m.HostSwitches

	data.MaintenanceMode = m.MaintenanceMode

	data.NodeID = m.NodeID

	data.TransportZoneEndpoints = m.TransportZoneEndpoints

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this transport node
func (m *TransportNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostSwitches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintenanceMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportZoneEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportNode) validateHostSwitches(formats strfmt.Registry) error {

	if swag.IsZero(m.HostSwitches) { // not required
		return nil
	}

	for i := 0; i < len(m.HostSwitches); i++ {

		if swag.IsZero(m.HostSwitches[i]) { // not required
			continue
		}

		if m.HostSwitches[i] != nil {

			if err := m.HostSwitches[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("host_switches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var transportNodeTypeMaintenanceModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","FORCE_ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transportNodeTypeMaintenanceModePropEnum = append(transportNodeTypeMaintenanceModePropEnum, v)
	}
}

// property enum
func (m *TransportNode) validateMaintenanceModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transportNodeTypeMaintenanceModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TransportNode) validateMaintenanceMode(formats strfmt.Registry) error {

	if swag.IsZero(m.MaintenanceMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateMaintenanceModeEnum("maintenance_mode", "body", m.MaintenanceMode); err != nil {
		return err
	}

	return nil
}

func (m *TransportNode) validateNodeID(formats strfmt.Registry) error {

	if err := validate.Required("node_id", "body", m.NodeID); err != nil {
		return err
	}

	return nil
}

func (m *TransportNode) validateTransportZoneEndpoints(formats strfmt.Registry) error {

	if swag.IsZero(m.TransportZoneEndpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.TransportZoneEndpoints); i++ {

		if swag.IsZero(m.TransportZoneEndpoints[i]) { // not required
			continue
		}

		if m.TransportZoneEndpoints[i] != nil {

			if err := m.TransportZoneEndpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transport_zone_endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransportNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransportNode) UnmarshalBinary(b []byte) error {
	var res TransportNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
