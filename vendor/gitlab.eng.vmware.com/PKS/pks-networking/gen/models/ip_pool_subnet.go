// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPPoolSubnet Ip pool subnet
// swagger:model IpPoolSubnet

type IPPoolSubnet struct {
	Resource

	// A collection of IPv4 or IPv6 IP Pool Ranges.
	//
	// A collection of IPv4 or IPv6 IP Pool Ranges.
	// Required: true
	AllocationRanges []*IPPoolRange `json:"allocation_ranges"`

	// Represents network address and the prefix length which will be associated with a layer-2 broadcast domain
	//
	// Represents network address and the prefix length which will be associated with a layer-2 broadcast domain
	// Required: true
	Cidr *string `json:"cidr"`

	// The collection of upto 3 DNS servers for the subnet.
	//
	// The collection of upto 3 DNS servers for the subnet.
	// Max Items: 3
	// Unique: true
	DNSNameservers []string `json:"dns_nameservers"`

	// The DNS suffix for the DNS server.
	//
	// The DNS suffix for the DNS server.
	DNSSuffix string `json:"dns_suffix,omitempty"`

	// The default gateway address on a layer-3 router.
	GatewayIP string `json:"gateway_ip,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IPPoolSubnet) UnmarshalJSON(raw []byte) error {

	var aO0 Resource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Resource = aO0

	var data struct {
		AllocationRanges []*IPPoolRange `json:"allocation_ranges"`

		Cidr *string `json:"cidr"`

		DNSNameservers []string `json:"dns_nameservers,omitempty"`

		DNSSuffix string `json:"dns_suffix,omitempty"`

		GatewayIP string `json:"gateway_ip,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.AllocationRanges = data.AllocationRanges

	m.Cidr = data.Cidr

	m.DNSNameservers = data.DNSNameservers

	m.DNSSuffix = data.DNSSuffix

	m.GatewayIP = data.GatewayIP

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IPPoolSubnet) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.Resource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		AllocationRanges []*IPPoolRange `json:"allocation_ranges"`

		Cidr *string `json:"cidr"`

		DNSNameservers []string `json:"dns_nameservers,omitempty"`

		DNSSuffix string `json:"dns_suffix,omitempty"`

		GatewayIP string `json:"gateway_ip,omitempty"`
	}

	data.AllocationRanges = m.AllocationRanges

	data.Cidr = m.Cidr

	data.DNSNameservers = m.DNSNameservers

	data.DNSSuffix = m.DNSSuffix

	data.GatewayIP = m.GatewayIP

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this Ip pool subnet
func (m *IPPoolSubnet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllocationRanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSNameservers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPPoolSubnet) validateAllocationRanges(formats strfmt.Registry) error {

	if err := validate.Required("allocation_ranges", "body", m.AllocationRanges); err != nil {
		return err
	}

	for i := 0; i < len(m.AllocationRanges); i++ {

		if swag.IsZero(m.AllocationRanges[i]) { // not required
			continue
		}

		if m.AllocationRanges[i] != nil {

			if err := m.AllocationRanges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allocation_ranges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IPPoolSubnet) validateCidr(formats strfmt.Registry) error {

	if err := validate.Required("cidr", "body", m.Cidr); err != nil {
		return err
	}

	return nil
}

func (m *IPPoolSubnet) validateDNSNameservers(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSNameservers) { // not required
		return nil
	}

	iDNSNameserversSize := int64(len(m.DNSNameservers))

	if err := validate.MaxItems("dns_nameservers", "body", iDNSNameserversSize, 3); err != nil {
		return err
	}

	if err := validate.UniqueItems("dns_nameservers", "body", m.DNSNameservers); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPPoolSubnet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPPoolSubnet) UnmarshalBinary(b []byte) error {
	var res IPPoolSubnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
