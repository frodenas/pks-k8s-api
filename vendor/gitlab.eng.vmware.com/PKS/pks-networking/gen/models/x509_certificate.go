// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// X509Certificate x509 certificate
// swagger:model X509Certificate

type X509Certificate struct {

	// One of the DSA cryptogaphic algorithm's strength parameters, base
	// Read Only: true
	DsaPublicKeyG string `json:"dsa_public_key_g,omitempty"`

	// One of the DSA cryptogaphic algorithm's strength parameters, prime
	// Read Only: true
	DsaPublicKeyP string `json:"dsa_public_key_p,omitempty"`

	// One of the DSA cryptogaphic algorithm's strength parameters, sub-prime
	// Read Only: true
	DsaPublicKeyQ string `json:"dsa_public_key_q,omitempty"`

	// One of the DSA cryptogaphic algorithm's strength parameters
	// Read Only: true
	DsaPublicKeyY string `json:"dsa_public_key_y,omitempty"`

	// True if this is a CA certificate
	// Read Only: true
	IsCa *bool `json:"is_ca,omitempty"`

	// True if this certificate is valid
	// Read Only: true
	IsValid *bool `json:"is_valid,omitempty"`

	// the certificate issuers complete distinguished name
	// Read Only: true
	Issuer string `json:"issuer,omitempty"`

	// the certificate issuer's common name
	// Read Only: true
	IssuerCn string `json:"issuer_cn,omitempty"`

	// the time in epoch milliseconds at which the certificate becomes invalid
	// Read Only: true
	NotAfter int64 `json:"not_after,omitempty"`

	// the time in epoch milliseconds at which the certificate becomes valid
	// Read Only: true
	NotBefore int64 `json:"not_before,omitempty"`

	// Cryptographic algorithm used by the public key for data encryption
	// Read Only: true
	PublicKeyAlgo string `json:"public_key_algo,omitempty"`

	// size measured in bits of the public/private keys used in a cryptographic algorithm
	// Read Only: true
	PublicKeyLength int64 `json:"public_key_length,omitempty"`

	// An RSA public key is made up of the modulus and the public exponent. Exponent is a power number
	// Read Only: true
	RsaPublicKeyExponent string `json:"rsa_public_key_exponent,omitempty"`

	// An RSA public key is made up of the modulus and the public exponent. Modulus is wrap around number
	// Read Only: true
	RsaPublicKeyModulus string `json:"rsa_public_key_modulus,omitempty"`

	// certificate's serial number
	// Read Only: true
	SerialNumber string `json:"serial_number,omitempty"`

	// the signature value(the raw signature bits) used for signing and validate the cert
	// Read Only: true
	Signature string `json:"signature,omitempty"`

	// the algorithm used by the Certificate Authority to sign the certificate
	// Read Only: true
	SignatureAlgorithm string `json:"signature_algorithm,omitempty"`

	// the certificate owners complete distinguished name
	// Read Only: true
	Subject string `json:"subject,omitempty"`

	// the certificate owner's common name
	// Read Only: true
	SubjectCn string `json:"subject_cn,omitempty"`

	// Certificate version (default v1)
	// Read Only: true
	Version string `json:"version,omitempty"`
}

/* polymorph X509Certificate dsa_public_key_g false */

/* polymorph X509Certificate dsa_public_key_p false */

/* polymorph X509Certificate dsa_public_key_q false */

/* polymorph X509Certificate dsa_public_key_y false */

/* polymorph X509Certificate is_ca false */

/* polymorph X509Certificate is_valid false */

/* polymorph X509Certificate issuer false */

/* polymorph X509Certificate issuer_cn false */

/* polymorph X509Certificate not_after false */

/* polymorph X509Certificate not_before false */

/* polymorph X509Certificate public_key_algo false */

/* polymorph X509Certificate public_key_length false */

/* polymorph X509Certificate rsa_public_key_exponent false */

/* polymorph X509Certificate rsa_public_key_modulus false */

/* polymorph X509Certificate serial_number false */

/* polymorph X509Certificate signature false */

/* polymorph X509Certificate signature_algorithm false */

/* polymorph X509Certificate subject false */

/* polymorph X509Certificate subject_cn false */

/* polymorph X509Certificate version false */

// Validate validates this x509 certificate
func (m *X509Certificate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublicKeyAlgo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var x509CertificateTypePublicKeyAlgoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RSA","DSA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		x509CertificateTypePublicKeyAlgoPropEnum = append(x509CertificateTypePublicKeyAlgoPropEnum, v)
	}
}

const (
	// X509CertificatePublicKeyAlgoRSA captures enum value "RSA"
	X509CertificatePublicKeyAlgoRSA string = "RSA"
	// X509CertificatePublicKeyAlgoDSA captures enum value "DSA"
	X509CertificatePublicKeyAlgoDSA string = "DSA"
)

// prop value enum
func (m *X509Certificate) validatePublicKeyAlgoEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, x509CertificateTypePublicKeyAlgoPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *X509Certificate) validatePublicKeyAlgo(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicKeyAlgo) { // not required
		return nil
	}

	// value enum
	if err := m.validatePublicKeyAlgoEnum("public_key_algo", "body", m.PublicKeyAlgo); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *X509Certificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *X509Certificate) UnmarshalBinary(b []byte) error {
	var res X509Certificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
