// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LogicalSwitch logical switch
// swagger:model LogicalSwitch

type LogicalSwitch struct {
	ManagedResource

	// admin state
	// Required: true
	AdminState *string `json:"admin_state"`

	// Allocation ip pool associated with the Logical switch
	//
	// IP pool id that associated with a LogicalSwitch.
	IPPoolID string `json:"ip_pool_id,omitempty"`

	// replication mode
	ReplicationMode string `json:"replication_mode,omitempty"`

	// Id of the TransportZone to which this LogicalSwitch is associated
	//
	// Id of the TransportZone to which this LogicalSwitch is associated
	// Required: true
	TransportZoneID *string `json:"transport_zone_id"`

	// vlan
	Vlan int64 `json:"vlan,omitempty"`

	// VNI for this LogicalSwitch.
	//
	// VNI for this LogicalSwitch.
	// Read Only: true
	Vni int32 `json:"vni,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LogicalSwitch) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		AdminState *string `json:"admin_state"`

		IPPoolID string `json:"ip_pool_id,omitempty"`

		ReplicationMode string `json:"replication_mode,omitempty"`

		TransportZoneID *string `json:"transport_zone_id"`

		Vlan int64 `json:"vlan,omitempty"`

		Vni int32 `json:"vni,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.AdminState = data.AdminState

	m.IPPoolID = data.IPPoolID

	m.ReplicationMode = data.ReplicationMode

	m.TransportZoneID = data.TransportZoneID

	m.Vlan = data.Vlan

	m.Vni = data.Vni

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LogicalSwitch) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		AdminState *string `json:"admin_state"`

		IPPoolID string `json:"ip_pool_id,omitempty"`

		ReplicationMode string `json:"replication_mode,omitempty"`

		TransportZoneID *string `json:"transport_zone_id"`

		Vlan int64 `json:"vlan,omitempty"`

		Vni int32 `json:"vni,omitempty"`
	}

	data.AdminState = m.AdminState

	data.IPPoolID = m.IPPoolID

	data.ReplicationMode = m.ReplicationMode

	data.TransportZoneID = m.TransportZoneID

	data.Vlan = m.Vlan

	data.Vni = m.Vni

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this logical switch
func (m *LogicalSwitch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportZoneID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var logicalSwitchTypeAdminStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UP","DOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logicalSwitchTypeAdminStatePropEnum = append(logicalSwitchTypeAdminStatePropEnum, v)
	}
}

// property enum
func (m *LogicalSwitch) validateAdminStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, logicalSwitchTypeAdminStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LogicalSwitch) validateAdminState(formats strfmt.Registry) error {

	if err := validate.Required("admin_state", "body", m.AdminState); err != nil {
		return err
	}

	// value enum
	if err := m.validateAdminStateEnum("admin_state", "body", *m.AdminState); err != nil {
		return err
	}

	return nil
}

var logicalSwitchTypeReplicationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MTEP","SOURCE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logicalSwitchTypeReplicationModePropEnum = append(logicalSwitchTypeReplicationModePropEnum, v)
	}
}

// property enum
func (m *LogicalSwitch) validateReplicationModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, logicalSwitchTypeReplicationModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LogicalSwitch) validateReplicationMode(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplicationMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateReplicationModeEnum("replication_mode", "body", m.ReplicationMode); err != nil {
		return err
	}

	return nil
}

func (m *LogicalSwitch) validateTransportZoneID(formats strfmt.Registry) error {

	if err := validate.Required("transport_zone_id", "body", m.TransportZoneID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogicalSwitch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogicalSwitch) UnmarshalBinary(b []byte) error {
	var res LogicalSwitch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
