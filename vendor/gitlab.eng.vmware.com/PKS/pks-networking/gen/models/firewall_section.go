// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirewallSection firewall section
// swagger:model FirewallSection

type FirewallSection struct {
	ManagedResource

	// AppliedTo List
	//
	// List of objects where the rules in this section will be enforced. This will take precedence over rule level appliedTo.
	// Max Items: 128
	AppliedTos []*ResourceReference `json:"applied_tos"`

	// Id of the firewall section.
	ID string `json:"id,omitempty"`

	// Default section flag
	//
	// It is a boolean flag which reflects whether a firewall section is default section or not. Each Layer 3 and Layer 2 section will have at least and at most one default section.
	// Read Only: true
	IsDefault *bool `json:"is_default,omitempty"`

	// Rule count
	//
	// Number of rules in this section.
	// Read Only: true
	RuleCount int64 `json:"rule_count,omitempty"`

	// Section Type
	//
	// Type of the rules which a section can contain. Only homogeneous sections are supported.
	// Required: true
	SectionType *string `json:"section_type"`

	// Stateful nature of the firewall rules in the section.
	//
	// Stateful or Stateless nature of firewall section is enforced on all rules inside the section. Layer3 sections can be stateful or stateless. Layer2 sections can only be stateless.
	// Required: true
	Stateful *bool `json:"stateful"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *FirewallSection) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		AppliedTos []*ResourceReference `json:"applied_tos,omitempty"`

		ID string `json:"id,omitempty"`

		IsDefault *bool `json:"is_default,omitempty"`

		RuleCount int64 `json:"rule_count,omitempty"`

		SectionType *string `json:"section_type"`

		Stateful *bool `json:"stateful"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.AppliedTos = data.AppliedTos

	m.ID = data.ID

	m.IsDefault = data.IsDefault

	m.RuleCount = data.RuleCount

	m.SectionType = data.SectionType

	m.Stateful = data.Stateful

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m FirewallSection) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		AppliedTos []*ResourceReference `json:"applied_tos,omitempty"`

		ID string `json:"id,omitempty"`

		IsDefault *bool `json:"is_default,omitempty"`

		RuleCount int64 `json:"rule_count,omitempty"`

		SectionType *string `json:"section_type"`

		Stateful *bool `json:"stateful"`
	}

	data.AppliedTos = m.AppliedTos

	data.ID = m.ID

	data.IsDefault = m.IsDefault

	data.RuleCount = m.RuleCount

	data.SectionType = m.SectionType

	data.Stateful = m.Stateful

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this firewall section
func (m *FirewallSection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppliedTos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateful(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirewallSection) validateAppliedTos(formats strfmt.Registry) error {

	if swag.IsZero(m.AppliedTos) { // not required
		return nil
	}

	iAppliedTosSize := int64(len(m.AppliedTos))

	if err := validate.MaxItems("applied_tos", "body", iAppliedTosSize, 128); err != nil {
		return err
	}

	for i := 0; i < len(m.AppliedTos); i++ {

		if swag.IsZero(m.AppliedTos[i]) { // not required
			continue
		}

		if m.AppliedTos[i] != nil {

			if err := m.AppliedTos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applied_tos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var firewallSectionTypeSectionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LAYER2","LAYER3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firewallSectionTypeSectionTypePropEnum = append(firewallSectionTypeSectionTypePropEnum, v)
	}
}

// property enum
func (m *FirewallSection) validateSectionTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, firewallSectionTypeSectionTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FirewallSection) validateSectionType(formats strfmt.Registry) error {

	if err := validate.Required("section_type", "body", m.SectionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateSectionTypeEnum("section_type", "body", *m.SectionType); err != nil {
		return err
	}

	return nil
}

func (m *FirewallSection) validateStateful(formats strfmt.Registry) error {

	if err := validate.Required("stateful", "body", m.Stateful); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirewallSection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirewallSection) UnmarshalBinary(b []byte) error {
	var res FirewallSection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
