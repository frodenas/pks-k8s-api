// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Certificate certificate
// swagger:model Certificate

type Certificate struct {
	ManagedResource

	// list of X509Certificates
	// Read Only: true
	Details []*X509Certificate `json:"details"`

	// pem encoded certificate data
	// Required: true
	PemEncoded *string `json:"pem_encoded"`

	// list of node IDs with services, that are using this certificate
	// Read Only: true
	UsedBy []*NodeIDServicesMap `json:"used_by"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Certificate) UnmarshalJSON(raw []byte) error {

	var aO0 ManagedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedResource = aO0

	var data struct {
		Details []*X509Certificate `json:"details,omitempty"`

		PemEncoded *string `json:"pem_encoded"`

		UsedBy []*NodeIDServicesMap `json:"used_by,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.Details = data.Details

	m.PemEncoded = data.PemEncoded

	m.UsedBy = data.UsedBy

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Certificate) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		Details []*X509Certificate `json:"details,omitempty"`

		PemEncoded *string `json:"pem_encoded"`

		UsedBy []*NodeIDServicesMap `json:"used_by,omitempty"`
	}

	data.Details = m.Details

	data.PemEncoded = m.PemEncoded

	data.UsedBy = m.UsedBy

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this certificate
func (m *Certificate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePemEncoded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Certificate) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.Details) { // not required
		return nil
	}

	for i := 0; i < len(m.Details); i++ {

		if swag.IsZero(m.Details[i]) { // not required
			continue
		}

		if m.Details[i] != nil {

			if err := m.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Certificate) validatePemEncoded(formats strfmt.Registry) error {

	if err := validate.Required("pem_encoded", "body", m.PemEncoded); err != nil {
		return err
	}

	return nil
}

func (m *Certificate) validateUsedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.UsedBy) { // not required
		return nil
	}

	for i := 0; i < len(m.UsedBy); i++ {

		if swag.IsZero(m.UsedBy[i]) { // not required
			continue
		}

		if m.UsedBy[i] != nil {

			if err := m.UsedBy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("used_by" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Certificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Certificate) UnmarshalBinary(b []byte) error {
	var res Certificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
