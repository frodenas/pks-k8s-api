// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LbActiveMonitor lb active monitor
// swagger:model LbActiveMonitor

type LbActiveMonitor struct {
	LbMonitor

	// num of consecutive checks must fail before marking it down
	//
	// num of consecutive checks must fail before marking it down
	// Minimum: 1
	FallCount int64 `json:"fall_count,omitempty"`

	// the frequency at which the system issues the monitor check (in second)
	//
	// the frequency at which the system issues the monitor check (in second)
	// Minimum: 1
	Interval int64 `json:"interval,omitempty"`

	// If the monitor port is specified, it would override pool member port
	// setting for healthcheck. A port range is not supported.
	//
	MonitorPort string `json:"monitor_port,omitempty"`

	// num of consecutive checks must pass before marking it up
	//
	// num of consecutive checks must pass before marking it up
	// Minimum: 1
	RiseCount int64 `json:"rise_count,omitempty"`

	// the number of seconds the target has in which to respond to the monitor
	// request
	//
	//
	// the number of seconds the target has in which to respond to the monitor
	// request
	//
	// Minimum: 1
	Timeout int64 `json:"timeout,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LbActiveMonitor) UnmarshalJSON(raw []byte) error {

	var aO0 LbMonitor
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.LbMonitor = aO0

	var data struct {
		FallCount int64 `json:"fall_count,omitempty"`

		Interval int64 `json:"interval,omitempty"`

		MonitorPort string `json:"monitor_port,omitempty"`

		RiseCount int64 `json:"rise_count,omitempty"`

		Timeout int64 `json:"timeout,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.FallCount = data.FallCount

	m.Interval = data.Interval

	m.MonitorPort = data.MonitorPort

	m.RiseCount = data.RiseCount

	m.Timeout = data.Timeout

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LbActiveMonitor) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.LbMonitor)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		FallCount int64 `json:"fall_count,omitempty"`

		Interval int64 `json:"interval,omitempty"`

		MonitorPort string `json:"monitor_port,omitempty"`

		RiseCount int64 `json:"rise_count,omitempty"`

		Timeout int64 `json:"timeout,omitempty"`
	}

	data.FallCount = m.FallCount

	data.Interval = m.Interval

	data.MonitorPort = m.MonitorPort

	data.RiseCount = m.RiseCount

	data.Timeout = m.Timeout

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this lb active monitor
func (m *LbActiveMonitor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.LbMonitor.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFallCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRiseCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeout(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LbActiveMonitor) validateFallCount(formats strfmt.Registry) error {

	if swag.IsZero(m.FallCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("fall_count", "body", int64(m.FallCount), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *LbActiveMonitor) validateInterval(formats strfmt.Registry) error {

	if swag.IsZero(m.Interval) { // not required
		return nil
	}

	if err := validate.MinimumInt("interval", "body", int64(m.Interval), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *LbActiveMonitor) validateRiseCount(formats strfmt.Registry) error {

	if swag.IsZero(m.RiseCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("rise_count", "body", int64(m.RiseCount), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *LbActiveMonitor) validateTimeout(formats strfmt.Registry) error {

	if swag.IsZero(m.Timeout) { // not required
		return nil
	}

	if err := validate.MinimumInt("timeout", "body", int64(m.Timeout), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LbActiveMonitor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LbActiveMonitor) UnmarshalBinary(b []byte) error {
	var res LbActiveMonitor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
