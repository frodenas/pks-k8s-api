// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigurationStateElement configuration state element
// swagger:model ConfigurationStateElement

type ConfigurationStateElement struct {

	// Error code
	//
	// Error code
	// Read Only: true
	FailureCode int64 `json:"failure_code,omitempty"`

	// Error message in case of failure
	//
	// Error message in case of failure
	// Read Only: true
	FailureMessage string `json:"failure_message,omitempty"`

	// State of configuration on this sub system
	//
	// State of configuration on this sub system
	// Read Only: true
	State string `json:"state,omitempty"`

	// URI of backing resource on sub system
	//
	// URI of backing resource on sub system
	// Read Only: true
	SubSystemAddress string `json:"sub_system_address,omitempty"`

	// Identifier of backing resource on sub system
	//
	// Identifier of backing resource on sub system
	// Read Only: true
	SubSystemID string `json:"sub_system_id,omitempty"`

	// Type of backing resource on sub system
	//
	// Type of backing resource on sub system
	// Read Only: true
	SubSystemType string `json:"sub_system_type,omitempty"`
}

/* polymorph ConfigurationStateElement failure_code false */

/* polymorph ConfigurationStateElement failure_message false */

/* polymorph ConfigurationStateElement state false */

/* polymorph ConfigurationStateElement sub_system_address false */

/* polymorph ConfigurationStateElement sub_system_id false */

/* polymorph ConfigurationStateElement sub_system_type false */

// Validate validates this configuration state element
func (m *ConfigurationStateElement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var configurationStateElementTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["in_progress","success","failed","partial_success"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configurationStateElementTypeStatePropEnum = append(configurationStateElementTypeStatePropEnum, v)
	}
}

const (
	// ConfigurationStateElementStateInProgress captures enum value "in_progress"
	ConfigurationStateElementStateInProgress string = "in_progress"
	// ConfigurationStateElementStateSuccess captures enum value "success"
	ConfigurationStateElementStateSuccess string = "success"
	// ConfigurationStateElementStateFailed captures enum value "failed"
	ConfigurationStateElementStateFailed string = "failed"
	// ConfigurationStateElementStatePartialSuccess captures enum value "partial_success"
	ConfigurationStateElementStatePartialSuccess string = "partial_success"
)

// prop value enum
func (m *ConfigurationStateElement) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, configurationStateElementTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConfigurationStateElement) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigurationStateElement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigurationStateElement) UnmarshalBinary(b []byte) error {
	var res ConfigurationStateElement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
