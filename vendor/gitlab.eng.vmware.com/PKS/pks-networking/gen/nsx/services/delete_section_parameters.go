// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteSectionParams creates a new DeleteSectionParams object
// with the default values initialized.
func NewDeleteSectionParams() *DeleteSectionParams {
	var (
		cascadeDefault = bool(false)
	)
	return &DeleteSectionParams{
		Cascade: &cascadeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteSectionParamsWithTimeout creates a new DeleteSectionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteSectionParamsWithTimeout(timeout time.Duration) *DeleteSectionParams {
	var (
		cascadeDefault = bool(false)
	)
	return &DeleteSectionParams{
		Cascade: &cascadeDefault,

		timeout: timeout,
	}
}

// NewDeleteSectionParamsWithContext creates a new DeleteSectionParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteSectionParamsWithContext(ctx context.Context) *DeleteSectionParams {
	var (
		cascadeDefault = bool(false)
	)
	return &DeleteSectionParams{
		Cascade: &cascadeDefault,

		Context: ctx,
	}
}

// NewDeleteSectionParamsWithHTTPClient creates a new DeleteSectionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteSectionParamsWithHTTPClient(client *http.Client) *DeleteSectionParams {
	var (
		cascadeDefault = bool(false)
	)
	return &DeleteSectionParams{
		Cascade:    &cascadeDefault,
		HTTPClient: client,
	}
}

/*DeleteSectionParams contains all the parameters to send to the API endpoint
for the delete section operation typically these are written to a http.Request
*/
type DeleteSectionParams struct {

	/*Cascade
	  Flag to cascade delete of this object to all it's child objects.

	*/
	Cascade *bool
	/*SectionID*/
	SectionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete section params
func (o *DeleteSectionParams) WithTimeout(timeout time.Duration) *DeleteSectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete section params
func (o *DeleteSectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete section params
func (o *DeleteSectionParams) WithContext(ctx context.Context) *DeleteSectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete section params
func (o *DeleteSectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete section params
func (o *DeleteSectionParams) WithHTTPClient(client *http.Client) *DeleteSectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete section params
func (o *DeleteSectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCascade adds the cascade to the delete section params
func (o *DeleteSectionParams) WithCascade(cascade *bool) *DeleteSectionParams {
	o.SetCascade(cascade)
	return o
}

// SetCascade adds the cascade to the delete section params
func (o *DeleteSectionParams) SetCascade(cascade *bool) {
	o.Cascade = cascade
}

// WithSectionID adds the sectionID to the delete section params
func (o *DeleteSectionParams) WithSectionID(sectionID string) *DeleteSectionParams {
	o.SetSectionID(sectionID)
	return o
}

// SetSectionID adds the sectionId to the delete section params
func (o *DeleteSectionParams) SetSectionID(sectionID string) {
	o.SectionID = sectionID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteSectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cascade != nil {

		// query param cascade
		var qrCascade bool
		if o.Cascade != nil {
			qrCascade = *o.Cascade
		}
		qCascade := swag.FormatBool(qrCascade)
		if qCascade != "" {
			if err := r.SetQueryParam("cascade", qCascade); err != nil {
				return err
			}
		}

	}

	// path param section-id
	if err := r.SetPathParam("section-id", o.SectionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
