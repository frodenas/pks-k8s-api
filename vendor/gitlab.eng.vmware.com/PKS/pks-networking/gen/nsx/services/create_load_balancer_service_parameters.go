// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// NewCreateLoadBalancerServiceParams creates a new CreateLoadBalancerServiceParams object
// with the default values initialized.
func NewCreateLoadBalancerServiceParams() *CreateLoadBalancerServiceParams {
	var ()
	return &CreateLoadBalancerServiceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateLoadBalancerServiceParamsWithTimeout creates a new CreateLoadBalancerServiceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateLoadBalancerServiceParamsWithTimeout(timeout time.Duration) *CreateLoadBalancerServiceParams {
	var ()
	return &CreateLoadBalancerServiceParams{

		timeout: timeout,
	}
}

// NewCreateLoadBalancerServiceParamsWithContext creates a new CreateLoadBalancerServiceParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateLoadBalancerServiceParamsWithContext(ctx context.Context) *CreateLoadBalancerServiceParams {
	var ()
	return &CreateLoadBalancerServiceParams{

		Context: ctx,
	}
}

// NewCreateLoadBalancerServiceParamsWithHTTPClient creates a new CreateLoadBalancerServiceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateLoadBalancerServiceParamsWithHTTPClient(client *http.Client) *CreateLoadBalancerServiceParams {
	var ()
	return &CreateLoadBalancerServiceParams{
		HTTPClient: client,
	}
}

/*CreateLoadBalancerServiceParams contains all the parameters to send to the API endpoint
for the create load balancer service operation typically these are written to a http.Request
*/
type CreateLoadBalancerServiceParams struct {

	/*LbService*/
	LbService *models.LbService

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create load balancer service params
func (o *CreateLoadBalancerServiceParams) WithTimeout(timeout time.Duration) *CreateLoadBalancerServiceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create load balancer service params
func (o *CreateLoadBalancerServiceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create load balancer service params
func (o *CreateLoadBalancerServiceParams) WithContext(ctx context.Context) *CreateLoadBalancerServiceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create load balancer service params
func (o *CreateLoadBalancerServiceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create load balancer service params
func (o *CreateLoadBalancerServiceParams) WithHTTPClient(client *http.Client) *CreateLoadBalancerServiceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create load balancer service params
func (o *CreateLoadBalancerServiceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLbService adds the lbService to the create load balancer service params
func (o *CreateLoadBalancerServiceParams) WithLbService(lbService *models.LbService) *CreateLoadBalancerServiceParams {
	o.SetLbService(lbService)
	return o
}

// SetLbService adds the lbService to the create load balancer service params
func (o *CreateLoadBalancerServiceParams) SetLbService(lbService *models.LbService) {
	o.LbService = lbService
}

// WriteToRequest writes these params to a swagger request
func (o *CreateLoadBalancerServiceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LbService == nil {
		o.LbService = new(models.LbService)
	}

	if err := r.SetBodyParam(o.LbService); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
