// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new services API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for services API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateLoadBalancerMonitor creates a load balancer monitor

Create a load balancer monitor.

*/
func (a *Client) CreateLoadBalancerMonitor(params *CreateLoadBalancerMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*CreateLoadBalancerMonitorOK, *CreateLoadBalancerMonitorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLoadBalancerMonitorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateLoadBalancerMonitor",
		Method:             "POST",
		PathPattern:        "/loadbalancer/monitors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLoadBalancerMonitorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateLoadBalancerMonitorOK:
		return value, nil, nil
	case *CreateLoadBalancerMonitorCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
CreateLoadBalancerPool creates a load balancer pool

Create a load balancer pool.

*/
func (a *Client) CreateLoadBalancerPool(params *CreateLoadBalancerPoolParams, authInfo runtime.ClientAuthInfoWriter) (*CreateLoadBalancerPoolOK, *CreateLoadBalancerPoolCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLoadBalancerPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateLoadBalancerPool",
		Method:             "POST",
		PathPattern:        "/loadbalancer/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLoadBalancerPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateLoadBalancerPoolOK:
		return value, nil, nil
	case *CreateLoadBalancerPoolCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
CreateLoadBalancerService creates a load balancer service

Create a load balancer service.

*/
func (a *Client) CreateLoadBalancerService(params *CreateLoadBalancerServiceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateLoadBalancerServiceOK, *CreateLoadBalancerServiceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLoadBalancerServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateLoadBalancerService",
		Method:             "POST",
		PathPattern:        "/loadbalancer/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLoadBalancerServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateLoadBalancerServiceOK:
		return value, nil, nil
	case *CreateLoadBalancerServiceCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
CreateLoadBalancerVirtualServer creates a load balancer virtual server

Create a load balancer virtual server.

*/
func (a *Client) CreateLoadBalancerVirtualServer(params *CreateLoadBalancerVirtualServerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateLoadBalancerVirtualServerOK, *CreateLoadBalancerVirtualServerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLoadBalancerVirtualServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateLoadBalancerVirtualServer",
		Method:             "POST",
		PathPattern:        "/loadbalancer/virtual-servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLoadBalancerVirtualServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateLoadBalancerVirtualServerOK:
		return value, nil, nil
	case *CreateLoadBalancerVirtualServerCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteLoadBalancerMonitor deletes a load balancer monitor

Delete a load balancer monitor.

*/
func (a *Client) DeleteLoadBalancerMonitor(params *DeleteLoadBalancerMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLoadBalancerMonitorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLoadBalancerMonitorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLoadBalancerMonitor",
		Method:             "DELETE",
		PathPattern:        "/loadbalancer/monitors/{monitor-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLoadBalancerMonitorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLoadBalancerMonitorOK), nil

}

/*
DeleteLoadBalancerPersistenceProfile deletes a load balancer persistence profile

Delete a load balancer persistence profile.

*/
func (a *Client) DeleteLoadBalancerPersistenceProfile(params *DeleteLoadBalancerPersistenceProfileParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLoadBalancerPersistenceProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLoadBalancerPersistenceProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLoadBalancerPersistenceProfile",
		Method:             "DELETE",
		PathPattern:        "/loadbalancer/persistence-profiles/{persistence-profile-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLoadBalancerPersistenceProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLoadBalancerPersistenceProfileOK), nil

}

/*
DeleteLoadBalancerPool deletes a load balancer pool

Delete a load balancer pool.

*/
func (a *Client) DeleteLoadBalancerPool(params *DeleteLoadBalancerPoolParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLoadBalancerPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLoadBalancerPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLoadBalancerPool",
		Method:             "DELETE",
		PathPattern:        "/loadbalancer/pools/{pool-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLoadBalancerPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLoadBalancerPoolOK), nil

}

/*
DeleteLoadBalancerRule deletes a load balancer rule

Delete a load balancer rule.

*/
func (a *Client) DeleteLoadBalancerRule(params *DeleteLoadBalancerRuleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLoadBalancerRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLoadBalancerRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLoadBalancerRule",
		Method:             "DELETE",
		PathPattern:        "/loadbalancer/rules/{rule-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLoadBalancerRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLoadBalancerRuleOK), nil

}

/*
DeleteLoadBalancerService deletes a load balancer service

Delete a load balancer service.

*/
func (a *Client) DeleteLoadBalancerService(params *DeleteLoadBalancerServiceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLoadBalancerServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLoadBalancerServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLoadBalancerService",
		Method:             "DELETE",
		PathPattern:        "/loadbalancer/services/{service-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLoadBalancerServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLoadBalancerServiceOK), nil

}

/*
DeleteLoadBalancerVirtualServer deletes a load balancer virtual server

Delete a load balancer virtual server.

*/
func (a *Client) DeleteLoadBalancerVirtualServer(params *DeleteLoadBalancerVirtualServerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLoadBalancerVirtualServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLoadBalancerVirtualServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLoadBalancerVirtualServer",
		Method:             "DELETE",
		PathPattern:        "/loadbalancer/virtual-servers/{virtual-server-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLoadBalancerVirtualServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLoadBalancerVirtualServerOK), nil

}

/*
DeleteSection deletes an existing section and its associated rules

Removes firewall section from the system. Firewall section with
rules can only be deleted by passing "cascade=true" parameter.

*/
func (a *Client) DeleteSection(params *DeleteSectionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSection",
		Method:             "DELETE",
		PathPattern:        "/firewall/sections/{section-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSectionOK), nil

}

/*
ListLoadBalancerApplicationProfiles retrieves a paginated list of load balancer application profiles

Retrieve a paginated list of load balancer application profiles.

*/
func (a *Client) ListLoadBalancerApplicationProfiles(params *ListLoadBalancerApplicationProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*ListLoadBalancerApplicationProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLoadBalancerApplicationProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListLoadBalancerApplicationProfiles",
		Method:             "GET",
		PathPattern:        "/loadbalancer/application-profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListLoadBalancerApplicationProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListLoadBalancerApplicationProfilesOK), nil

}

/*
ListLoadBalancerPersistenceProfiles retrieves a paginated list of load balancer persistence profiles

Retrieve a paginated list of load balancer persistence profiles.

*/
func (a *Client) ListLoadBalancerPersistenceProfiles(params *ListLoadBalancerPersistenceProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*ListLoadBalancerPersistenceProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLoadBalancerPersistenceProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListLoadBalancerPersistenceProfiles",
		Method:             "GET",
		PathPattern:        "/loadbalancer/persistence-profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListLoadBalancerPersistenceProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListLoadBalancerPersistenceProfilesOK), nil

}

/*
ListLoadBalancerPools retrieves a paginated list of load balancer pools

Retrieve a paginated list of load balancer pools.

*/
func (a *Client) ListLoadBalancerPools(params *ListLoadBalancerPoolsParams, authInfo runtime.ClientAuthInfoWriter) (*ListLoadBalancerPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLoadBalancerPoolsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListLoadBalancerPools",
		Method:             "GET",
		PathPattern:        "/loadbalancer/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListLoadBalancerPoolsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListLoadBalancerPoolsOK), nil

}

/*
ListLoadBalancerRules retrieves a paginated list of load balancer rules

Retrieve a paginated list of load balancer rules.

*/
func (a *Client) ListLoadBalancerRules(params *ListLoadBalancerRulesParams, authInfo runtime.ClientAuthInfoWriter) (*ListLoadBalancerRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLoadBalancerRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListLoadBalancerRules",
		Method:             "GET",
		PathPattern:        "/loadbalancer/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListLoadBalancerRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListLoadBalancerRulesOK), nil

}

/*
ListLoadBalancerServices retrieves a paginated list of load balancer services

Retrieve a paginated list of load balancer services.

*/
func (a *Client) ListLoadBalancerServices(params *ListLoadBalancerServicesParams, authInfo runtime.ClientAuthInfoWriter) (*ListLoadBalancerServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLoadBalancerServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListLoadBalancerServices",
		Method:             "GET",
		PathPattern:        "/loadbalancer/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListLoadBalancerServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListLoadBalancerServicesOK), nil

}

/*
ListLoadBalancerVirtualServers retrieves a paginated list of load balancer virtual servers

Retrieve a paginated list of load balancer virtual servers.

*/
func (a *Client) ListLoadBalancerVirtualServers(params *ListLoadBalancerVirtualServersParams, authInfo runtime.ClientAuthInfoWriter) (*ListLoadBalancerVirtualServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLoadBalancerVirtualServersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListLoadBalancerVirtualServers",
		Method:             "GET",
		PathPattern:        "/loadbalancer/virtual-servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListLoadBalancerVirtualServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListLoadBalancerVirtualServersOK), nil

}

/*
ListSections lists all firewall sections

List all firewall section in paginated form. A default page size is limited
to 1000 firewall sections. By default list of section is filtered by LAYER3
type.

*/
func (a *Client) ListSections(params *ListSectionsParams, authInfo runtime.ClientAuthInfoWriter) (*ListSectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListSections",
		Method:             "GET",
		PathPattern:        "/firewall/sections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSectionsOK), nil

}

/*
PerformPoolMemberAction adds remove or modify load balancer pool members

For ADD_MEMBERS, pool members will be created and added to load balancer
pool. This action is only valid for static pool members.
For REMOVE_MEMBERS, pool members will be removed from load balancer pool
via IP and port in pool member settings. This action is only valid for
static pool members.
For UPDATE_MEMBERS, pool members admin state will be updated. This action
is valid for both static pool members and dynamic pool members. For dynamic
pool members, this update will be stored in customized_members field in load
balancer pool member group.

*/
func (a *Client) PerformPoolMemberAction(params *PerformPoolMemberActionParams, authInfo runtime.ClientAuthInfoWriter) (*PerformPoolMemberActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformPoolMemberActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PerformPoolMemberAction",
		Method:             "POST",
		PathPattern:        "/loadbalancer/pools/{pool-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformPoolMemberActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PerformPoolMemberActionOK), nil

}

/*
ReadLoadBalancerService retrieves a load balancer service

Retrieve a load balancer service.

*/
func (a *Client) ReadLoadBalancerService(params *ReadLoadBalancerServiceParams, authInfo runtime.ClientAuthInfoWriter) (*ReadLoadBalancerServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadLoadBalancerServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReadLoadBalancerService",
		Method:             "GET",
		PathPattern:        "/loadbalancer/services/{service-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadLoadBalancerServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReadLoadBalancerServiceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
