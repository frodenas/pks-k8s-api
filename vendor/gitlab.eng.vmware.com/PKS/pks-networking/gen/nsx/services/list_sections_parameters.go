// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListSectionsParams creates a new ListSectionsParams object
// with the default values initialized.
func NewListSectionsParams() *ListSectionsParams {
	var (
		filterTypeDefault = string("FILTER")
		pageSizeDefault   = int64(1000)
		typeVarDefault    = string("LAYER3")
	)
	return &ListSectionsParams{
		FilterType: &filterTypeDefault,
		PageSize:   &pageSizeDefault,
		Type:       &typeVarDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListSectionsParamsWithTimeout creates a new ListSectionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListSectionsParamsWithTimeout(timeout time.Duration) *ListSectionsParams {
	var (
		filterTypeDefault = string("FILTER")
		pageSizeDefault   = int64(1000)
		typeVarDefault    = string("LAYER3")
	)
	return &ListSectionsParams{
		FilterType: &filterTypeDefault,
		PageSize:   &pageSizeDefault,
		Type:       &typeVarDefault,

		timeout: timeout,
	}
}

// NewListSectionsParamsWithContext creates a new ListSectionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListSectionsParamsWithContext(ctx context.Context) *ListSectionsParams {
	var (
		filterTypeDefault = string("FILTER")
		pageSizeDefault   = int64(1000)
		typeDefault       = string("LAYER3")
	)
	return &ListSectionsParams{
		FilterType: &filterTypeDefault,
		PageSize:   &pageSizeDefault,
		Type:       &typeDefault,

		Context: ctx,
	}
}

// NewListSectionsParamsWithHTTPClient creates a new ListSectionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListSectionsParamsWithHTTPClient(client *http.Client) *ListSectionsParams {
	var (
		filterTypeDefault = string("FILTER")
		pageSizeDefault   = int64(1000)
		typeDefault       = string("LAYER3")
	)
	return &ListSectionsParams{
		FilterType: &filterTypeDefault,
		PageSize:   &pageSizeDefault,
		Type:       &typeDefault,
		HTTPClient: client,
	}
}

/*ListSectionsParams contains all the parameters to send to the API endpoint
for the list sections operation typically these are written to a http.Request
*/
type ListSectionsParams struct {

	/*AppliedTos
	  AppliedTo's  referenced by this section or section's Firewall Rules .

	*/
	AppliedTos *string
	/*Cursor
	  Opaque cursor to be used for getting next page of records (supplied by current result page)

	*/
	Cursor *string
	/*Destinations
	  Destinations referenced by this section's Firewall Rules .

	*/
	Destinations *string
	/*ExcludeAppliedToType
	  Resource type valid for use as AppliedTo filter in section API

	*/
	ExcludeAppliedToType *string
	/*FilterType
	  Filter type

	*/
	FilterType *string
	/*IncludeAppliedToType
	  Resource type valid for use as AppliedTo filter in section API

	*/
	IncludeAppliedToType *string
	/*IncludedFields
	  Comma separated list of fields that should be included to result of query

	*/
	IncludedFields *string
	/*PageSize
	  Maximum number of results to return in this page (server may return fewer)

	*/
	PageSize *int64
	/*Services
	  NSService referenced by this section's Firewall Rules .

	*/
	Services *string
	/*SortAscending*/
	SortAscending *bool
	/*SortBy
	  Field by which records are sorted

	*/
	SortBy *string
	/*Sources
	  Sources referenced by this section's Firewall Rules .

	*/
	Sources *string
	/*Type
	  Section Type

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list sections params
func (o *ListSectionsParams) WithTimeout(timeout time.Duration) *ListSectionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list sections params
func (o *ListSectionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list sections params
func (o *ListSectionsParams) WithContext(ctx context.Context) *ListSectionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list sections params
func (o *ListSectionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list sections params
func (o *ListSectionsParams) WithHTTPClient(client *http.Client) *ListSectionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list sections params
func (o *ListSectionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppliedTos adds the appliedTos to the list sections params
func (o *ListSectionsParams) WithAppliedTos(appliedTos *string) *ListSectionsParams {
	o.SetAppliedTos(appliedTos)
	return o
}

// SetAppliedTos adds the appliedTos to the list sections params
func (o *ListSectionsParams) SetAppliedTos(appliedTos *string) {
	o.AppliedTos = appliedTos
}

// WithCursor adds the cursor to the list sections params
func (o *ListSectionsParams) WithCursor(cursor *string) *ListSectionsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the list sections params
func (o *ListSectionsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithDestinations adds the destinations to the list sections params
func (o *ListSectionsParams) WithDestinations(destinations *string) *ListSectionsParams {
	o.SetDestinations(destinations)
	return o
}

// SetDestinations adds the destinations to the list sections params
func (o *ListSectionsParams) SetDestinations(destinations *string) {
	o.Destinations = destinations
}

// WithExcludeAppliedToType adds the excludeAppliedToType to the list sections params
func (o *ListSectionsParams) WithExcludeAppliedToType(excludeAppliedToType *string) *ListSectionsParams {
	o.SetExcludeAppliedToType(excludeAppliedToType)
	return o
}

// SetExcludeAppliedToType adds the excludeAppliedToType to the list sections params
func (o *ListSectionsParams) SetExcludeAppliedToType(excludeAppliedToType *string) {
	o.ExcludeAppliedToType = excludeAppliedToType
}

// WithFilterType adds the filterType to the list sections params
func (o *ListSectionsParams) WithFilterType(filterType *string) *ListSectionsParams {
	o.SetFilterType(filterType)
	return o
}

// SetFilterType adds the filterType to the list sections params
func (o *ListSectionsParams) SetFilterType(filterType *string) {
	o.FilterType = filterType
}

// WithIncludeAppliedToType adds the includeAppliedToType to the list sections params
func (o *ListSectionsParams) WithIncludeAppliedToType(includeAppliedToType *string) *ListSectionsParams {
	o.SetIncludeAppliedToType(includeAppliedToType)
	return o
}

// SetIncludeAppliedToType adds the includeAppliedToType to the list sections params
func (o *ListSectionsParams) SetIncludeAppliedToType(includeAppliedToType *string) {
	o.IncludeAppliedToType = includeAppliedToType
}

// WithIncludedFields adds the includedFields to the list sections params
func (o *ListSectionsParams) WithIncludedFields(includedFields *string) *ListSectionsParams {
	o.SetIncludedFields(includedFields)
	return o
}

// SetIncludedFields adds the includedFields to the list sections params
func (o *ListSectionsParams) SetIncludedFields(includedFields *string) {
	o.IncludedFields = includedFields
}

// WithPageSize adds the pageSize to the list sections params
func (o *ListSectionsParams) WithPageSize(pageSize *int64) *ListSectionsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list sections params
func (o *ListSectionsParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithServices adds the services to the list sections params
func (o *ListSectionsParams) WithServices(services *string) *ListSectionsParams {
	o.SetServices(services)
	return o
}

// SetServices adds the services to the list sections params
func (o *ListSectionsParams) SetServices(services *string) {
	o.Services = services
}

// WithSortAscending adds the sortAscending to the list sections params
func (o *ListSectionsParams) WithSortAscending(sortAscending *bool) *ListSectionsParams {
	o.SetSortAscending(sortAscending)
	return o
}

// SetSortAscending adds the sortAscending to the list sections params
func (o *ListSectionsParams) SetSortAscending(sortAscending *bool) {
	o.SortAscending = sortAscending
}

// WithSortBy adds the sortBy to the list sections params
func (o *ListSectionsParams) WithSortBy(sortBy *string) *ListSectionsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the list sections params
func (o *ListSectionsParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSources adds the sources to the list sections params
func (o *ListSectionsParams) WithSources(sources *string) *ListSectionsParams {
	o.SetSources(sources)
	return o
}

// SetSources adds the sources to the list sections params
func (o *ListSectionsParams) SetSources(sources *string) {
	o.Sources = sources
}

// WithType adds the typeVar to the list sections params
func (o *ListSectionsParams) WithType(typeVar *string) *ListSectionsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the list sections params
func (o *ListSectionsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *ListSectionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AppliedTos != nil {

		// query param applied_tos
		var qrAppliedTos string
		if o.AppliedTos != nil {
			qrAppliedTos = *o.AppliedTos
		}
		qAppliedTos := qrAppliedTos
		if qAppliedTos != "" {
			if err := r.SetQueryParam("applied_tos", qAppliedTos); err != nil {
				return err
			}
		}

	}

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string
		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {
			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}

	}

	if o.Destinations != nil {

		// query param destinations
		var qrDestinations string
		if o.Destinations != nil {
			qrDestinations = *o.Destinations
		}
		qDestinations := qrDestinations
		if qDestinations != "" {
			if err := r.SetQueryParam("destinations", qDestinations); err != nil {
				return err
			}
		}

	}

	if o.ExcludeAppliedToType != nil {

		// query param exclude_applied_to_type
		var qrExcludeAppliedToType string
		if o.ExcludeAppliedToType != nil {
			qrExcludeAppliedToType = *o.ExcludeAppliedToType
		}
		qExcludeAppliedToType := qrExcludeAppliedToType
		if qExcludeAppliedToType != "" {
			if err := r.SetQueryParam("exclude_applied_to_type", qExcludeAppliedToType); err != nil {
				return err
			}
		}

	}

	if o.FilterType != nil {

		// query param filter_type
		var qrFilterType string
		if o.FilterType != nil {
			qrFilterType = *o.FilterType
		}
		qFilterType := qrFilterType
		if qFilterType != "" {
			if err := r.SetQueryParam("filter_type", qFilterType); err != nil {
				return err
			}
		}

	}

	if o.IncludeAppliedToType != nil {

		// query param include_applied_to_type
		var qrIncludeAppliedToType string
		if o.IncludeAppliedToType != nil {
			qrIncludeAppliedToType = *o.IncludeAppliedToType
		}
		qIncludeAppliedToType := qrIncludeAppliedToType
		if qIncludeAppliedToType != "" {
			if err := r.SetQueryParam("include_applied_to_type", qIncludeAppliedToType); err != nil {
				return err
			}
		}

	}

	if o.IncludedFields != nil {

		// query param included_fields
		var qrIncludedFields string
		if o.IncludedFields != nil {
			qrIncludedFields = *o.IncludedFields
		}
		qIncludedFields := qrIncludedFields
		if qIncludedFields != "" {
			if err := r.SetQueryParam("included_fields", qIncludedFields); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.Services != nil {

		// query param services
		var qrServices string
		if o.Services != nil {
			qrServices = *o.Services
		}
		qServices := qrServices
		if qServices != "" {
			if err := r.SetQueryParam("services", qServices); err != nil {
				return err
			}
		}

	}

	if o.SortAscending != nil {

		// query param sort_ascending
		var qrSortAscending bool
		if o.SortAscending != nil {
			qrSortAscending = *o.SortAscending
		}
		qSortAscending := swag.FormatBool(qrSortAscending)
		if qSortAscending != "" {
			if err := r.SetQueryParam("sort_ascending", qSortAscending); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sort_by
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sort_by", qSortBy); err != nil {
				return err
			}
		}

	}

	if o.Sources != nil {

		// query param sources
		var qrSources string
		if o.Sources != nil {
			qrSources = *o.Sources
		}
		qSources := qrSources
		if qSources != "" {
			if err := r.SetQueryParam("sources", qSources); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
