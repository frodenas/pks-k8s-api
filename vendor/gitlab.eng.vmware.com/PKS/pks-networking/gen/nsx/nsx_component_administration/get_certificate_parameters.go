// Code generated by go-swagger; DO NOT EDIT.

package nsx_component_administration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCertificateParams creates a new GetCertificateParams object
// with the default values initialized.
func NewGetCertificateParams() *GetCertificateParams {
	var (
		detailsDefault = bool(false)
	)
	return &GetCertificateParams{
		Details: &detailsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCertificateParamsWithTimeout creates a new GetCertificateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCertificateParamsWithTimeout(timeout time.Duration) *GetCertificateParams {
	var (
		detailsDefault = bool(false)
	)
	return &GetCertificateParams{
		Details: &detailsDefault,

		timeout: timeout,
	}
}

// NewGetCertificateParamsWithContext creates a new GetCertificateParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCertificateParamsWithContext(ctx context.Context) *GetCertificateParams {
	var (
		detailsDefault = bool(false)
	)
	return &GetCertificateParams{
		Details: &detailsDefault,

		Context: ctx,
	}
}

// NewGetCertificateParamsWithHTTPClient creates a new GetCertificateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCertificateParamsWithHTTPClient(client *http.Client) *GetCertificateParams {
	var (
		detailsDefault = bool(false)
	)
	return &GetCertificateParams{
		Details:    &detailsDefault,
		HTTPClient: client,
	}
}

/*GetCertificateParams contains all the parameters to send to the API endpoint
for the get certificate operation typically these are written to a http.Request
*/
type GetCertificateParams struct {

	/*CertID
	  ID of certificate to read

	*/
	CertID string
	/*Details
	  whether to expand the pem data and show all its details

	*/
	Details *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get certificate params
func (o *GetCertificateParams) WithTimeout(timeout time.Duration) *GetCertificateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get certificate params
func (o *GetCertificateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get certificate params
func (o *GetCertificateParams) WithContext(ctx context.Context) *GetCertificateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get certificate params
func (o *GetCertificateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get certificate params
func (o *GetCertificateParams) WithHTTPClient(client *http.Client) *GetCertificateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get certificate params
func (o *GetCertificateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCertID adds the certID to the get certificate params
func (o *GetCertificateParams) WithCertID(certID string) *GetCertificateParams {
	o.SetCertID(certID)
	return o
}

// SetCertID adds the certId to the get certificate params
func (o *GetCertificateParams) SetCertID(certID string) {
	o.CertID = certID
}

// WithDetails adds the details to the get certificate params
func (o *GetCertificateParams) WithDetails(details *bool) *GetCertificateParams {
	o.SetDetails(details)
	return o
}

// SetDetails adds the details to the get certificate params
func (o *GetCertificateParams) SetDetails(details *bool) {
	o.Details = details
}

// WriteToRequest writes these params to a swagger request
func (o *GetCertificateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cert-id
	if err := r.SetPathParam("cert-id", o.CertID); err != nil {
		return err
	}

	if o.Details != nil {

		// query param details
		var qrDetails bool
		if o.Details != nil {
			qrDetails = *o.Details
		}
		qDetails := swag.FormatBool(qrDetails)
		if qDetails != "" {
			if err := r.SetQueryParam("details", qDetails); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
