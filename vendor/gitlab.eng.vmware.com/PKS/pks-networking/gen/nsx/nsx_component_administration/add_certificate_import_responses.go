// Code generated by go-swagger; DO NOT EDIT.

package nsx_component_administration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// AddCertificateImportReader is a Reader for the AddCertificateImport structure.
type AddCertificateImportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddCertificateImportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewAddCertificateImportCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddCertificateImportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddCertificateImportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAddCertificateImportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewAddCertificateImportPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewAddCertificateImportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewAddCertificateImportServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddCertificateImportCreated creates a AddCertificateImportCreated with default headers values
func NewAddCertificateImportCreated() *AddCertificateImportCreated {
	return &AddCertificateImportCreated{}
}

/*AddCertificateImportCreated handles this case with default header values.

Created
*/
type AddCertificateImportCreated struct {
	Payload *models.CertificateList
}

func (o *AddCertificateImportCreated) Error() string {
	return fmt.Sprintf("[POST /trust-management/certificates?action=import][%d] addCertificateImportCreated  %+v", 201, o.Payload)
}

func (o *AddCertificateImportCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCertificateImportBadRequest creates a AddCertificateImportBadRequest with default headers values
func NewAddCertificateImportBadRequest() *AddCertificateImportBadRequest {
	return &AddCertificateImportBadRequest{}
}

/*AddCertificateImportBadRequest handles this case with default header values.

Bad request
*/
type AddCertificateImportBadRequest struct {
	Payload *models.APIError
}

func (o *AddCertificateImportBadRequest) Error() string {
	return fmt.Sprintf("[POST /trust-management/certificates?action=import][%d] addCertificateImportBadRequest  %+v", 400, o.Payload)
}

func (o *AddCertificateImportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCertificateImportForbidden creates a AddCertificateImportForbidden with default headers values
func NewAddCertificateImportForbidden() *AddCertificateImportForbidden {
	return &AddCertificateImportForbidden{}
}

/*AddCertificateImportForbidden handles this case with default header values.

Operation forbidden
*/
type AddCertificateImportForbidden struct {
	Payload *models.APIError
}

func (o *AddCertificateImportForbidden) Error() string {
	return fmt.Sprintf("[POST /trust-management/certificates?action=import][%d] addCertificateImportForbidden  %+v", 403, o.Payload)
}

func (o *AddCertificateImportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCertificateImportNotFound creates a AddCertificateImportNotFound with default headers values
func NewAddCertificateImportNotFound() *AddCertificateImportNotFound {
	return &AddCertificateImportNotFound{}
}

/*AddCertificateImportNotFound handles this case with default header values.

Resource not found
*/
type AddCertificateImportNotFound struct {
	Payload *models.APIError
}

func (o *AddCertificateImportNotFound) Error() string {
	return fmt.Sprintf("[POST /trust-management/certificates?action=import][%d] addCertificateImportNotFound  %+v", 404, o.Payload)
}

func (o *AddCertificateImportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCertificateImportPreconditionFailed creates a AddCertificateImportPreconditionFailed with default headers values
func NewAddCertificateImportPreconditionFailed() *AddCertificateImportPreconditionFailed {
	return &AddCertificateImportPreconditionFailed{}
}

/*AddCertificateImportPreconditionFailed handles this case with default header values.

Precondition failed
*/
type AddCertificateImportPreconditionFailed struct {
	Payload *models.APIError
}

func (o *AddCertificateImportPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /trust-management/certificates?action=import][%d] addCertificateImportPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AddCertificateImportPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCertificateImportInternalServerError creates a AddCertificateImportInternalServerError with default headers values
func NewAddCertificateImportInternalServerError() *AddCertificateImportInternalServerError {
	return &AddCertificateImportInternalServerError{}
}

/*AddCertificateImportInternalServerError handles this case with default header values.

Internal server error
*/
type AddCertificateImportInternalServerError struct {
	Payload *models.APIError
}

func (o *AddCertificateImportInternalServerError) Error() string {
	return fmt.Sprintf("[POST /trust-management/certificates?action=import][%d] addCertificateImportInternalServerError  %+v", 500, o.Payload)
}

func (o *AddCertificateImportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCertificateImportServiceUnavailable creates a AddCertificateImportServiceUnavailable with default headers values
func NewAddCertificateImportServiceUnavailable() *AddCertificateImportServiceUnavailable {
	return &AddCertificateImportServiceUnavailable{}
}

/*AddCertificateImportServiceUnavailable handles this case with default header values.

Service unavailable
*/
type AddCertificateImportServiceUnavailable struct {
	Payload *models.APIError
}

func (o *AddCertificateImportServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /trust-management/certificates?action=import][%d] addCertificateImportServiceUnavailable  %+v", 503, o.Payload)
}

func (o *AddCertificateImportServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
