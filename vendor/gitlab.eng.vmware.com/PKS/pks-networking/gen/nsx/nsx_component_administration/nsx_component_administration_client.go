// Code generated by go-swagger; DO NOT EDIT.

package nsx_component_administration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new nsx component administration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nsx component administration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddCertificateImport adds a new certificate

Adds a new private-public certificate or a chain of certificates (CAs) and,
optionally, a private key that can be applied to one of the user-facing
components (appliance management or edge). The certificate and the key
should be stored in PEM format. If no private key is provided, the
certificate is used as a client certificate in the trust store.

*/
func (a *Client) AddCertificateImport(params *AddCertificateImportParams, authInfo runtime.ClientAuthInfoWriter) (*AddCertificateImportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCertificateImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddCertificateImport",
		Method:             "POST",
		PathPattern:        "/trust-management/certificates?action=import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddCertificateImportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddCertificateImportCreated), nil

}

/*
CreateProxyServiceApplyCertificateActionApplyCertificate updates http service certificate

Applies a security certificate to the http service. In the POST request,
the CERTIFICATE_ID references a certificate created with the
/api/v1/trust-management APIs. Issuing this request causes the http service
to restart so that the service can begin using the new certificate. When the
POST request succeeds, it doesn't return a valid response. The request times
out because of the restart.

*/
func (a *Client) CreateProxyServiceApplyCertificateActionApplyCertificate(params *CreateProxyServiceApplyCertificateActionApplyCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProxyServiceApplyCertificateActionApplyCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProxyServiceApplyCertificateActionApplyCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateProxyServiceApplyCertificateActionApply_certificate",
		Method:             "POST",
		PathPattern:        "/node/services/http?action=apply_certificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProxyServiceApplyCertificateActionApplyCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProxyServiceApplyCertificateActionApplyCertificateOK), nil

}

/*
DeleteCertificate deletes certificate for the given certificate ID

Removes the specified certificate. The private key associated with the
certificate is also deleted.

*/
func (a *Client) DeleteCertificate(params *DeleteCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCertificate",
		Method:             "DELETE",
		PathPattern:        "/trust-management/certificates/{cert-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCertificateOK), nil

}

/*
DeletePrincipalIdentity deletes a principal identity

Delete a principal identity. It does not delete the certificate.

*/
func (a *Client) DeletePrincipalIdentity(params *DeletePrincipalIdentityParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePrincipalIdentityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePrincipalIdentityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePrincipalIdentity",
		Method:             "DELETE",
		PathPattern:        "/trust-management/principal-identities/{principal-identity-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePrincipalIdentityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePrincipalIdentityOK), nil

}

/*
GetCertificate shows certificate data for the given certificate ID

Returns information for the specified certificate ID, including the
certificate's UUID; resource_type (for example, certificate_self_signed,
certificate_ca, or certificate_signed); pem_encoded data; and history of the
certificate (who created or modified it and when). For additional
information, include the ?details=true modifier at the end of the request
URI.

*/
func (a *Client) GetCertificate(params *GetCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*GetCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCertificate",
		Method:             "GET",
		PathPattern:        "/trust-management/certificates/{cert-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCertificateOK), nil

}

/*
GetCertificates returns all the user facing components certificates

Returns all certificate information viewable by the user, including each
certificate's UUID; resource_type (for example, certificate_self_signed,
certificate_ca, or certificate_signed); pem_encoded data; and history of the
certificate (who created or modified it and when). For additional
information, include the ?details=true modifier at the end of the request
URI.

*/
func (a *Client) GetCertificates(params *GetCertificatesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCertificatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCertificates",
		Method:             "GET",
		PathPattern:        "/trust-management/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCertificatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCertificatesOK), nil

}

/*
GetPrincipalIdentities returns the list of principal identities

Returns the list of principals registered with a certificate.
*/
func (a *Client) GetPrincipalIdentities(params *GetPrincipalIdentitiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPrincipalIdentitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrincipalIdentitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrincipalIdentities",
		Method:             "GET",
		PathPattern:        "/trust-management/principal-identities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPrincipalIdentitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrincipalIdentitiesOK), nil

}

/*
ReadClusterStatus reads cluster status

Returns status information for the NSX cluster control role and management
role.

*/
func (a *Client) ReadClusterStatus(params *ReadClusterStatusParams, authInfo runtime.ClientAuthInfoWriter) (*ReadClusterStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadClusterStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReadClusterStatus",
		Method:             "GET",
		PathPattern:        "/cluster/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadClusterStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReadClusterStatusOK), nil

}

/*
ReadNodeProperties reads node properties

Returns information about the NSX Manager appliance. Information includes
release number, time zone, system time, kernel version, message of the day
(motd), and host name.

*/
func (a *Client) ReadNodeProperties(params *ReadNodePropertiesParams, authInfo runtime.ClientAuthInfoWriter) (*ReadNodePropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadNodePropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReadNodeProperties",
		Method:             "GET",
		PathPattern:        "/node",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadNodePropertiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReadNodePropertiesOK), nil

}

/*
RegisterPrincipalIdentity registers a name certificate combination

Associates a principal's name with a certificate that is used to authenticate.

*/
func (a *Client) RegisterPrincipalIdentity(params *RegisterPrincipalIdentityParams, authInfo runtime.ClientAuthInfoWriter) (*RegisterPrincipalIdentityCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterPrincipalIdentityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RegisterPrincipalIdentity",
		Method:             "POST",
		PathPattern:        "/trust-management/principal-identities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegisterPrincipalIdentityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RegisterPrincipalIdentityCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
