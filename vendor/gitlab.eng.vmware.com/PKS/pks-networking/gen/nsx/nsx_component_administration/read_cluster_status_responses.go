// Code generated by go-swagger; DO NOT EDIT.

package nsx_component_administration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// ReadClusterStatusReader is a Reader for the ReadClusterStatus structure.
type ReadClusterStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadClusterStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewReadClusterStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewReadClusterStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewReadClusterStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReadClusterStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewReadClusterStatusPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewReadClusterStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewReadClusterStatusServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadClusterStatusOK creates a ReadClusterStatusOK with default headers values
func NewReadClusterStatusOK() *ReadClusterStatusOK {
	return &ReadClusterStatusOK{}
}

/*ReadClusterStatusOK handles this case with default header values.

Success
*/
type ReadClusterStatusOK struct {
	Payload *models.ClusterStatus
}

func (o *ReadClusterStatusOK) Error() string {
	return fmt.Sprintf("[GET /cluster/status][%d] readClusterStatusOK  %+v", 200, o.Payload)
}

func (o *ReadClusterStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ClusterStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadClusterStatusBadRequest creates a ReadClusterStatusBadRequest with default headers values
func NewReadClusterStatusBadRequest() *ReadClusterStatusBadRequest {
	return &ReadClusterStatusBadRequest{}
}

/*ReadClusterStatusBadRequest handles this case with default header values.

Bad request
*/
type ReadClusterStatusBadRequest struct {
	Payload *models.APIError
}

func (o *ReadClusterStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /cluster/status][%d] readClusterStatusBadRequest  %+v", 400, o.Payload)
}

func (o *ReadClusterStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadClusterStatusForbidden creates a ReadClusterStatusForbidden with default headers values
func NewReadClusterStatusForbidden() *ReadClusterStatusForbidden {
	return &ReadClusterStatusForbidden{}
}

/*ReadClusterStatusForbidden handles this case with default header values.

Operation forbidden
*/
type ReadClusterStatusForbidden struct {
	Payload *models.APIError
}

func (o *ReadClusterStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /cluster/status][%d] readClusterStatusForbidden  %+v", 403, o.Payload)
}

func (o *ReadClusterStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadClusterStatusNotFound creates a ReadClusterStatusNotFound with default headers values
func NewReadClusterStatusNotFound() *ReadClusterStatusNotFound {
	return &ReadClusterStatusNotFound{}
}

/*ReadClusterStatusNotFound handles this case with default header values.

Resource not found
*/
type ReadClusterStatusNotFound struct {
	Payload *models.APIError
}

func (o *ReadClusterStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /cluster/status][%d] readClusterStatusNotFound  %+v", 404, o.Payload)
}

func (o *ReadClusterStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadClusterStatusPreconditionFailed creates a ReadClusterStatusPreconditionFailed with default headers values
func NewReadClusterStatusPreconditionFailed() *ReadClusterStatusPreconditionFailed {
	return &ReadClusterStatusPreconditionFailed{}
}

/*ReadClusterStatusPreconditionFailed handles this case with default header values.

Precondition failed
*/
type ReadClusterStatusPreconditionFailed struct {
	Payload *models.APIError
}

func (o *ReadClusterStatusPreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /cluster/status][%d] readClusterStatusPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ReadClusterStatusPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadClusterStatusInternalServerError creates a ReadClusterStatusInternalServerError with default headers values
func NewReadClusterStatusInternalServerError() *ReadClusterStatusInternalServerError {
	return &ReadClusterStatusInternalServerError{}
}

/*ReadClusterStatusInternalServerError handles this case with default header values.

Internal server error
*/
type ReadClusterStatusInternalServerError struct {
	Payload *models.APIError
}

func (o *ReadClusterStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cluster/status][%d] readClusterStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadClusterStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadClusterStatusServiceUnavailable creates a ReadClusterStatusServiceUnavailable with default headers values
func NewReadClusterStatusServiceUnavailable() *ReadClusterStatusServiceUnavailable {
	return &ReadClusterStatusServiceUnavailable{}
}

/*ReadClusterStatusServiceUnavailable handles this case with default header values.

Service unavailable
*/
type ReadClusterStatusServiceUnavailable struct {
	Payload *models.APIError
}

func (o *ReadClusterStatusServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /cluster/status][%d] readClusterStatusServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ReadClusterStatusServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
