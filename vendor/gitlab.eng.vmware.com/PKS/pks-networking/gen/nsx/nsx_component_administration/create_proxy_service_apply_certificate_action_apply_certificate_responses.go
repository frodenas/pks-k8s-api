// Code generated by go-swagger; DO NOT EDIT.

package nsx_component_administration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// CreateProxyServiceApplyCertificateActionApplyCertificateReader is a Reader for the CreateProxyServiceApplyCertificateActionApplyCertificate structure.
type CreateProxyServiceApplyCertificateActionApplyCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateProxyServiceApplyCertificateActionApplyCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateProxyServiceApplyCertificateActionApplyCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateProxyServiceApplyCertificateActionApplyCertificateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateProxyServiceApplyCertificateActionApplyCertificateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateProxyServiceApplyCertificateActionApplyCertificateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewCreateProxyServiceApplyCertificateActionApplyCertificatePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateProxyServiceApplyCertificateActionApplyCertificateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewCreateProxyServiceApplyCertificateActionApplyCertificateServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateProxyServiceApplyCertificateActionApplyCertificateOK creates a CreateProxyServiceApplyCertificateActionApplyCertificateOK with default headers values
func NewCreateProxyServiceApplyCertificateActionApplyCertificateOK() *CreateProxyServiceApplyCertificateActionApplyCertificateOK {
	return &CreateProxyServiceApplyCertificateActionApplyCertificateOK{}
}

/*CreateProxyServiceApplyCertificateActionApplyCertificateOK handles this case with default header values.

OK
*/
type CreateProxyServiceApplyCertificateActionApplyCertificateOK struct {
}

func (o *CreateProxyServiceApplyCertificateActionApplyCertificateOK) Error() string {
	return fmt.Sprintf("[POST /node/services/http?action=apply_certificate][%d] createProxyServiceApplyCertificateActionApplyCertificateOK ", 200)
}

func (o *CreateProxyServiceApplyCertificateActionApplyCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateProxyServiceApplyCertificateActionApplyCertificateBadRequest creates a CreateProxyServiceApplyCertificateActionApplyCertificateBadRequest with default headers values
func NewCreateProxyServiceApplyCertificateActionApplyCertificateBadRequest() *CreateProxyServiceApplyCertificateActionApplyCertificateBadRequest {
	return &CreateProxyServiceApplyCertificateActionApplyCertificateBadRequest{}
}

/*CreateProxyServiceApplyCertificateActionApplyCertificateBadRequest handles this case with default header values.

Bad request
*/
type CreateProxyServiceApplyCertificateActionApplyCertificateBadRequest struct {
	Payload *models.APIError
}

func (o *CreateProxyServiceApplyCertificateActionApplyCertificateBadRequest) Error() string {
	return fmt.Sprintf("[POST /node/services/http?action=apply_certificate][%d] createProxyServiceApplyCertificateActionApplyCertificateBadRequest  %+v", 400, o.Payload)
}

func (o *CreateProxyServiceApplyCertificateActionApplyCertificateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateProxyServiceApplyCertificateActionApplyCertificateForbidden creates a CreateProxyServiceApplyCertificateActionApplyCertificateForbidden with default headers values
func NewCreateProxyServiceApplyCertificateActionApplyCertificateForbidden() *CreateProxyServiceApplyCertificateActionApplyCertificateForbidden {
	return &CreateProxyServiceApplyCertificateActionApplyCertificateForbidden{}
}

/*CreateProxyServiceApplyCertificateActionApplyCertificateForbidden handles this case with default header values.

Operation forbidden
*/
type CreateProxyServiceApplyCertificateActionApplyCertificateForbidden struct {
	Payload *models.APIError
}

func (o *CreateProxyServiceApplyCertificateActionApplyCertificateForbidden) Error() string {
	return fmt.Sprintf("[POST /node/services/http?action=apply_certificate][%d] createProxyServiceApplyCertificateActionApplyCertificateForbidden  %+v", 403, o.Payload)
}

func (o *CreateProxyServiceApplyCertificateActionApplyCertificateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateProxyServiceApplyCertificateActionApplyCertificateNotFound creates a CreateProxyServiceApplyCertificateActionApplyCertificateNotFound with default headers values
func NewCreateProxyServiceApplyCertificateActionApplyCertificateNotFound() *CreateProxyServiceApplyCertificateActionApplyCertificateNotFound {
	return &CreateProxyServiceApplyCertificateActionApplyCertificateNotFound{}
}

/*CreateProxyServiceApplyCertificateActionApplyCertificateNotFound handles this case with default header values.

Not Found
*/
type CreateProxyServiceApplyCertificateActionApplyCertificateNotFound struct {
}

func (o *CreateProxyServiceApplyCertificateActionApplyCertificateNotFound) Error() string {
	return fmt.Sprintf("[POST /node/services/http?action=apply_certificate][%d] createProxyServiceApplyCertificateActionApplyCertificateNotFound ", 404)
}

func (o *CreateProxyServiceApplyCertificateActionApplyCertificateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateProxyServiceApplyCertificateActionApplyCertificatePreconditionFailed creates a CreateProxyServiceApplyCertificateActionApplyCertificatePreconditionFailed with default headers values
func NewCreateProxyServiceApplyCertificateActionApplyCertificatePreconditionFailed() *CreateProxyServiceApplyCertificateActionApplyCertificatePreconditionFailed {
	return &CreateProxyServiceApplyCertificateActionApplyCertificatePreconditionFailed{}
}

/*CreateProxyServiceApplyCertificateActionApplyCertificatePreconditionFailed handles this case with default header values.

Precondition failed
*/
type CreateProxyServiceApplyCertificateActionApplyCertificatePreconditionFailed struct {
	Payload *models.APIError
}

func (o *CreateProxyServiceApplyCertificateActionApplyCertificatePreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /node/services/http?action=apply_certificate][%d] createProxyServiceApplyCertificateActionApplyCertificatePreconditionFailed  %+v", 412, o.Payload)
}

func (o *CreateProxyServiceApplyCertificateActionApplyCertificatePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateProxyServiceApplyCertificateActionApplyCertificateInternalServerError creates a CreateProxyServiceApplyCertificateActionApplyCertificateInternalServerError with default headers values
func NewCreateProxyServiceApplyCertificateActionApplyCertificateInternalServerError() *CreateProxyServiceApplyCertificateActionApplyCertificateInternalServerError {
	return &CreateProxyServiceApplyCertificateActionApplyCertificateInternalServerError{}
}

/*CreateProxyServiceApplyCertificateActionApplyCertificateInternalServerError handles this case with default header values.

Internal server error
*/
type CreateProxyServiceApplyCertificateActionApplyCertificateInternalServerError struct {
	Payload *models.APIError
}

func (o *CreateProxyServiceApplyCertificateActionApplyCertificateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /node/services/http?action=apply_certificate][%d] createProxyServiceApplyCertificateActionApplyCertificateInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateProxyServiceApplyCertificateActionApplyCertificateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateProxyServiceApplyCertificateActionApplyCertificateServiceUnavailable creates a CreateProxyServiceApplyCertificateActionApplyCertificateServiceUnavailable with default headers values
func NewCreateProxyServiceApplyCertificateActionApplyCertificateServiceUnavailable() *CreateProxyServiceApplyCertificateActionApplyCertificateServiceUnavailable {
	return &CreateProxyServiceApplyCertificateActionApplyCertificateServiceUnavailable{}
}

/*CreateProxyServiceApplyCertificateActionApplyCertificateServiceUnavailable handles this case with default header values.

Service unavailable
*/
type CreateProxyServiceApplyCertificateActionApplyCertificateServiceUnavailable struct {
	Payload *models.APIError
}

func (o *CreateProxyServiceApplyCertificateActionApplyCertificateServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /node/services/http?action=apply_certificate][%d] createProxyServiceApplyCertificateActionApplyCertificateServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateProxyServiceApplyCertificateActionApplyCertificateServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
