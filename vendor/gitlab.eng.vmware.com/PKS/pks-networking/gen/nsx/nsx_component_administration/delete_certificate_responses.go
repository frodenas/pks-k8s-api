// Code generated by go-swagger; DO NOT EDIT.

package nsx_component_administration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// DeleteCertificateReader is a Reader for the DeleteCertificate structure.
type DeleteCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteCertificateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteCertificateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteCertificateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteCertificatePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteCertificateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewDeleteCertificateServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteCertificateOK creates a DeleteCertificateOK with default headers values
func NewDeleteCertificateOK() *DeleteCertificateOK {
	return &DeleteCertificateOK{}
}

/*DeleteCertificateOK handles this case with default header values.

OK
*/
type DeleteCertificateOK struct {
}

func (o *DeleteCertificateOK) Error() string {
	return fmt.Sprintf("[DELETE /trust-management/certificates/{cert-id}][%d] deleteCertificateOK ", 200)
}

func (o *DeleteCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteCertificateBadRequest creates a DeleteCertificateBadRequest with default headers values
func NewDeleteCertificateBadRequest() *DeleteCertificateBadRequest {
	return &DeleteCertificateBadRequest{}
}

/*DeleteCertificateBadRequest handles this case with default header values.

Bad request
*/
type DeleteCertificateBadRequest struct {
	Payload *models.APIError
}

func (o *DeleteCertificateBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /trust-management/certificates/{cert-id}][%d] deleteCertificateBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteCertificateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCertificateForbidden creates a DeleteCertificateForbidden with default headers values
func NewDeleteCertificateForbidden() *DeleteCertificateForbidden {
	return &DeleteCertificateForbidden{}
}

/*DeleteCertificateForbidden handles this case with default header values.

Operation forbidden
*/
type DeleteCertificateForbidden struct {
	Payload *models.APIError
}

func (o *DeleteCertificateForbidden) Error() string {
	return fmt.Sprintf("[DELETE /trust-management/certificates/{cert-id}][%d] deleteCertificateForbidden  %+v", 403, o.Payload)
}

func (o *DeleteCertificateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCertificateNotFound creates a DeleteCertificateNotFound with default headers values
func NewDeleteCertificateNotFound() *DeleteCertificateNotFound {
	return &DeleteCertificateNotFound{}
}

/*DeleteCertificateNotFound handles this case with default header values.

Resource not found
*/
type DeleteCertificateNotFound struct {
	Payload *models.APIError
}

func (o *DeleteCertificateNotFound) Error() string {
	return fmt.Sprintf("[DELETE /trust-management/certificates/{cert-id}][%d] deleteCertificateNotFound  %+v", 404, o.Payload)
}

func (o *DeleteCertificateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCertificatePreconditionFailed creates a DeleteCertificatePreconditionFailed with default headers values
func NewDeleteCertificatePreconditionFailed() *DeleteCertificatePreconditionFailed {
	return &DeleteCertificatePreconditionFailed{}
}

/*DeleteCertificatePreconditionFailed handles this case with default header values.

Precondition failed
*/
type DeleteCertificatePreconditionFailed struct {
	Payload *models.APIError
}

func (o *DeleteCertificatePreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /trust-management/certificates/{cert-id}][%d] deleteCertificatePreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteCertificatePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCertificateInternalServerError creates a DeleteCertificateInternalServerError with default headers values
func NewDeleteCertificateInternalServerError() *DeleteCertificateInternalServerError {
	return &DeleteCertificateInternalServerError{}
}

/*DeleteCertificateInternalServerError handles this case with default header values.

Internal server error
*/
type DeleteCertificateInternalServerError struct {
	Payload *models.APIError
}

func (o *DeleteCertificateInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /trust-management/certificates/{cert-id}][%d] deleteCertificateInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteCertificateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCertificateServiceUnavailable creates a DeleteCertificateServiceUnavailable with default headers values
func NewDeleteCertificateServiceUnavailable() *DeleteCertificateServiceUnavailable {
	return &DeleteCertificateServiceUnavailable{}
}

/*DeleteCertificateServiceUnavailable handles this case with default header values.

Service unavailable
*/
type DeleteCertificateServiceUnavailable struct {
	Payload *models.APIError
}

func (o *DeleteCertificateServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /trust-management/certificates/{cert-id}][%d] deleteCertificateServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteCertificateServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
