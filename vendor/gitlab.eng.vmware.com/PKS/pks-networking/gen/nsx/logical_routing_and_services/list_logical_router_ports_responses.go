// Code generated by go-swagger; DO NOT EDIT.

package logical_routing_and_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// ListLogicalRouterPortsReader is a Reader for the ListLogicalRouterPorts structure.
type ListLogicalRouterPortsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListLogicalRouterPortsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListLogicalRouterPortsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListLogicalRouterPortsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListLogicalRouterPortsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListLogicalRouterPortsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewListLogicalRouterPortsPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListLogicalRouterPortsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewListLogicalRouterPortsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListLogicalRouterPortsOK creates a ListLogicalRouterPortsOK with default headers values
func NewListLogicalRouterPortsOK() *ListLogicalRouterPortsOK {
	return &ListLogicalRouterPortsOK{}
}

/*ListLogicalRouterPortsOK handles this case with default header values.

Success
*/
type ListLogicalRouterPortsOK struct {
	Payload *models.LogicalRouterPortListResult
}

func (o *ListLogicalRouterPortsOK) Error() string {
	return fmt.Sprintf("[GET /logical-router-ports][%d] listLogicalRouterPortsOK  %+v", 200, o.Payload)
}

func (o *ListLogicalRouterPortsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogicalRouterPortListResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogicalRouterPortsBadRequest creates a ListLogicalRouterPortsBadRequest with default headers values
func NewListLogicalRouterPortsBadRequest() *ListLogicalRouterPortsBadRequest {
	return &ListLogicalRouterPortsBadRequest{}
}

/*ListLogicalRouterPortsBadRequest handles this case with default header values.

Bad request
*/
type ListLogicalRouterPortsBadRequest struct {
	Payload *models.APIError
}

func (o *ListLogicalRouterPortsBadRequest) Error() string {
	return fmt.Sprintf("[GET /logical-router-ports][%d] listLogicalRouterPortsBadRequest  %+v", 400, o.Payload)
}

func (o *ListLogicalRouterPortsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogicalRouterPortsForbidden creates a ListLogicalRouterPortsForbidden with default headers values
func NewListLogicalRouterPortsForbidden() *ListLogicalRouterPortsForbidden {
	return &ListLogicalRouterPortsForbidden{}
}

/*ListLogicalRouterPortsForbidden handles this case with default header values.

Operation forbidden
*/
type ListLogicalRouterPortsForbidden struct {
	Payload *models.APIError
}

func (o *ListLogicalRouterPortsForbidden) Error() string {
	return fmt.Sprintf("[GET /logical-router-ports][%d] listLogicalRouterPortsForbidden  %+v", 403, o.Payload)
}

func (o *ListLogicalRouterPortsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogicalRouterPortsNotFound creates a ListLogicalRouterPortsNotFound with default headers values
func NewListLogicalRouterPortsNotFound() *ListLogicalRouterPortsNotFound {
	return &ListLogicalRouterPortsNotFound{}
}

/*ListLogicalRouterPortsNotFound handles this case with default header values.

Resource not found
*/
type ListLogicalRouterPortsNotFound struct {
	Payload *models.APIError
}

func (o *ListLogicalRouterPortsNotFound) Error() string {
	return fmt.Sprintf("[GET /logical-router-ports][%d] listLogicalRouterPortsNotFound  %+v", 404, o.Payload)
}

func (o *ListLogicalRouterPortsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogicalRouterPortsPreconditionFailed creates a ListLogicalRouterPortsPreconditionFailed with default headers values
func NewListLogicalRouterPortsPreconditionFailed() *ListLogicalRouterPortsPreconditionFailed {
	return &ListLogicalRouterPortsPreconditionFailed{}
}

/*ListLogicalRouterPortsPreconditionFailed handles this case with default header values.

Precondition failed
*/
type ListLogicalRouterPortsPreconditionFailed struct {
	Payload *models.APIError
}

func (o *ListLogicalRouterPortsPreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /logical-router-ports][%d] listLogicalRouterPortsPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ListLogicalRouterPortsPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogicalRouterPortsInternalServerError creates a ListLogicalRouterPortsInternalServerError with default headers values
func NewListLogicalRouterPortsInternalServerError() *ListLogicalRouterPortsInternalServerError {
	return &ListLogicalRouterPortsInternalServerError{}
}

/*ListLogicalRouterPortsInternalServerError handles this case with default header values.

Internal server error
*/
type ListLogicalRouterPortsInternalServerError struct {
	Payload *models.APIError
}

func (o *ListLogicalRouterPortsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /logical-router-ports][%d] listLogicalRouterPortsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListLogicalRouterPortsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogicalRouterPortsServiceUnavailable creates a ListLogicalRouterPortsServiceUnavailable with default headers values
func NewListLogicalRouterPortsServiceUnavailable() *ListLogicalRouterPortsServiceUnavailable {
	return &ListLogicalRouterPortsServiceUnavailable{}
}

/*ListLogicalRouterPortsServiceUnavailable handles this case with default header values.

Service unavailable
*/
type ListLogicalRouterPortsServiceUnavailable struct {
	Payload *models.APIError
}

func (o *ListLogicalRouterPortsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /logical-router-ports][%d] listLogicalRouterPortsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListLogicalRouterPortsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
