// Code generated by go-swagger; DO NOT EDIT.

package logical_routing_and_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// DeleteNatRuleReader is a Reader for the DeleteNatRule structure.
type DeleteNatRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteNatRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteNatRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteNatRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteNatRuleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteNatRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteNatRulePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteNatRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewDeleteNatRuleServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteNatRuleOK creates a DeleteNatRuleOK with default headers values
func NewDeleteNatRuleOK() *DeleteNatRuleOK {
	return &DeleteNatRuleOK{}
}

/*DeleteNatRuleOK handles this case with default header values.

The NAT rule was successfully deleted
*/
type DeleteNatRuleOK struct {
}

func (o *DeleteNatRuleOK) Error() string {
	return fmt.Sprintf("[DELETE /logical-routers/{logical-router-id}/nat/rules/{rule-id}][%d] deleteNatRuleOK ", 200)
}

func (o *DeleteNatRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteNatRuleBadRequest creates a DeleteNatRuleBadRequest with default headers values
func NewDeleteNatRuleBadRequest() *DeleteNatRuleBadRequest {
	return &DeleteNatRuleBadRequest{}
}

/*DeleteNatRuleBadRequest handles this case with default header values.

Bad request
*/
type DeleteNatRuleBadRequest struct {
	Payload *models.APIError
}

func (o *DeleteNatRuleBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /logical-routers/{logical-router-id}/nat/rules/{rule-id}][%d] deleteNatRuleBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteNatRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNatRuleForbidden creates a DeleteNatRuleForbidden with default headers values
func NewDeleteNatRuleForbidden() *DeleteNatRuleForbidden {
	return &DeleteNatRuleForbidden{}
}

/*DeleteNatRuleForbidden handles this case with default header values.

Operation forbidden
*/
type DeleteNatRuleForbidden struct {
	Payload *models.APIError
}

func (o *DeleteNatRuleForbidden) Error() string {
	return fmt.Sprintf("[DELETE /logical-routers/{logical-router-id}/nat/rules/{rule-id}][%d] deleteNatRuleForbidden  %+v", 403, o.Payload)
}

func (o *DeleteNatRuleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNatRuleNotFound creates a DeleteNatRuleNotFound with default headers values
func NewDeleteNatRuleNotFound() *DeleteNatRuleNotFound {
	return &DeleteNatRuleNotFound{}
}

/*DeleteNatRuleNotFound handles this case with default header values.

Resource not found
*/
type DeleteNatRuleNotFound struct {
	Payload *models.APIError
}

func (o *DeleteNatRuleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /logical-routers/{logical-router-id}/nat/rules/{rule-id}][%d] deleteNatRuleNotFound  %+v", 404, o.Payload)
}

func (o *DeleteNatRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNatRulePreconditionFailed creates a DeleteNatRulePreconditionFailed with default headers values
func NewDeleteNatRulePreconditionFailed() *DeleteNatRulePreconditionFailed {
	return &DeleteNatRulePreconditionFailed{}
}

/*DeleteNatRulePreconditionFailed handles this case with default header values.

Precondition failed
*/
type DeleteNatRulePreconditionFailed struct {
	Payload *models.APIError
}

func (o *DeleteNatRulePreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /logical-routers/{logical-router-id}/nat/rules/{rule-id}][%d] deleteNatRulePreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteNatRulePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNatRuleInternalServerError creates a DeleteNatRuleInternalServerError with default headers values
func NewDeleteNatRuleInternalServerError() *DeleteNatRuleInternalServerError {
	return &DeleteNatRuleInternalServerError{}
}

/*DeleteNatRuleInternalServerError handles this case with default header values.

Internal server error
*/
type DeleteNatRuleInternalServerError struct {
	Payload *models.APIError
}

func (o *DeleteNatRuleInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /logical-routers/{logical-router-id}/nat/rules/{rule-id}][%d] deleteNatRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteNatRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNatRuleServiceUnavailable creates a DeleteNatRuleServiceUnavailable with default headers values
func NewDeleteNatRuleServiceUnavailable() *DeleteNatRuleServiceUnavailable {
	return &DeleteNatRuleServiceUnavailable{}
}

/*DeleteNatRuleServiceUnavailable handles this case with default header values.

Service unavailable
*/
type DeleteNatRuleServiceUnavailable struct {
	Payload *models.APIError
}

func (o *DeleteNatRuleServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /logical-routers/{logical-router-id}/nat/rules/{rule-id}][%d] deleteNatRuleServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteNatRuleServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
