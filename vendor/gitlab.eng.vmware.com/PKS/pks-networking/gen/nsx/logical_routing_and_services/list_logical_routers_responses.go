// Code generated by go-swagger; DO NOT EDIT.

package logical_routing_and_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// ListLogicalRoutersReader is a Reader for the ListLogicalRouters structure.
type ListLogicalRoutersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListLogicalRoutersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListLogicalRoutersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListLogicalRoutersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListLogicalRoutersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListLogicalRoutersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewListLogicalRoutersPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListLogicalRoutersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewListLogicalRoutersServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListLogicalRoutersOK creates a ListLogicalRoutersOK with default headers values
func NewListLogicalRoutersOK() *ListLogicalRoutersOK {
	return &ListLogicalRoutersOK{}
}

/*ListLogicalRoutersOK handles this case with default header values.

Success
*/
type ListLogicalRoutersOK struct {
	Payload *models.LogicalRouterListResult
}

func (o *ListLogicalRoutersOK) Error() string {
	return fmt.Sprintf("[GET /logical-routers][%d] listLogicalRoutersOK  %+v", 200, o.Payload)
}

func (o *ListLogicalRoutersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogicalRouterListResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogicalRoutersBadRequest creates a ListLogicalRoutersBadRequest with default headers values
func NewListLogicalRoutersBadRequest() *ListLogicalRoutersBadRequest {
	return &ListLogicalRoutersBadRequest{}
}

/*ListLogicalRoutersBadRequest handles this case with default header values.

Bad request
*/
type ListLogicalRoutersBadRequest struct {
	Payload *models.APIError
}

func (o *ListLogicalRoutersBadRequest) Error() string {
	return fmt.Sprintf("[GET /logical-routers][%d] listLogicalRoutersBadRequest  %+v", 400, o.Payload)
}

func (o *ListLogicalRoutersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogicalRoutersForbidden creates a ListLogicalRoutersForbidden with default headers values
func NewListLogicalRoutersForbidden() *ListLogicalRoutersForbidden {
	return &ListLogicalRoutersForbidden{}
}

/*ListLogicalRoutersForbidden handles this case with default header values.

Operation forbidden
*/
type ListLogicalRoutersForbidden struct {
	Payload *models.APIError
}

func (o *ListLogicalRoutersForbidden) Error() string {
	return fmt.Sprintf("[GET /logical-routers][%d] listLogicalRoutersForbidden  %+v", 403, o.Payload)
}

func (o *ListLogicalRoutersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogicalRoutersNotFound creates a ListLogicalRoutersNotFound with default headers values
func NewListLogicalRoutersNotFound() *ListLogicalRoutersNotFound {
	return &ListLogicalRoutersNotFound{}
}

/*ListLogicalRoutersNotFound handles this case with default header values.

Resource not found
*/
type ListLogicalRoutersNotFound struct {
	Payload *models.APIError
}

func (o *ListLogicalRoutersNotFound) Error() string {
	return fmt.Sprintf("[GET /logical-routers][%d] listLogicalRoutersNotFound  %+v", 404, o.Payload)
}

func (o *ListLogicalRoutersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogicalRoutersPreconditionFailed creates a ListLogicalRoutersPreconditionFailed with default headers values
func NewListLogicalRoutersPreconditionFailed() *ListLogicalRoutersPreconditionFailed {
	return &ListLogicalRoutersPreconditionFailed{}
}

/*ListLogicalRoutersPreconditionFailed handles this case with default header values.

Precondition failed
*/
type ListLogicalRoutersPreconditionFailed struct {
	Payload *models.APIError
}

func (o *ListLogicalRoutersPreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /logical-routers][%d] listLogicalRoutersPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ListLogicalRoutersPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogicalRoutersInternalServerError creates a ListLogicalRoutersInternalServerError with default headers values
func NewListLogicalRoutersInternalServerError() *ListLogicalRoutersInternalServerError {
	return &ListLogicalRoutersInternalServerError{}
}

/*ListLogicalRoutersInternalServerError handles this case with default header values.

Internal server error
*/
type ListLogicalRoutersInternalServerError struct {
	Payload *models.APIError
}

func (o *ListLogicalRoutersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /logical-routers][%d] listLogicalRoutersInternalServerError  %+v", 500, o.Payload)
}

func (o *ListLogicalRoutersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogicalRoutersServiceUnavailable creates a ListLogicalRoutersServiceUnavailable with default headers values
func NewListLogicalRoutersServiceUnavailable() *ListLogicalRoutersServiceUnavailable {
	return &ListLogicalRoutersServiceUnavailable{}
}

/*ListLogicalRoutersServiceUnavailable handles this case with default header values.

Service unavailable
*/
type ListLogicalRoutersServiceUnavailable struct {
	Payload *models.APIError
}

func (o *ListLogicalRoutersServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /logical-routers][%d] listLogicalRoutersServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListLogicalRoutersServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
