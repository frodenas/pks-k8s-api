// Code generated by go-swagger; DO NOT EDIT.

package logical_routing_and_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// AddNatRuleReader is a Reader for the AddNatRule structure.
type AddNatRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddNatRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewAddNatRuleCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddNatRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddNatRuleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAddNatRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewAddNatRulePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewAddNatRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewAddNatRuleServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddNatRuleCreated creates a AddNatRuleCreated with default headers values
func NewAddNatRuleCreated() *AddNatRuleCreated {
	return &AddNatRuleCreated{}
}

/*AddNatRuleCreated handles this case with default header values.

Resource created successfully
*/
type AddNatRuleCreated struct {
	Payload *models.NatRule
}

func (o *AddNatRuleCreated) Error() string {
	return fmt.Sprintf("[POST /logical-routers/{logical-router-id}/nat/rules][%d] addNatRuleCreated  %+v", 201, o.Payload)
}

func (o *AddNatRuleCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NatRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddNatRuleBadRequest creates a AddNatRuleBadRequest with default headers values
func NewAddNatRuleBadRequest() *AddNatRuleBadRequest {
	return &AddNatRuleBadRequest{}
}

/*AddNatRuleBadRequest handles this case with default header values.

Bad request
*/
type AddNatRuleBadRequest struct {
	Payload *models.APIError
}

func (o *AddNatRuleBadRequest) Error() string {
	return fmt.Sprintf("[POST /logical-routers/{logical-router-id}/nat/rules][%d] addNatRuleBadRequest  %+v", 400, o.Payload)
}

func (o *AddNatRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddNatRuleForbidden creates a AddNatRuleForbidden with default headers values
func NewAddNatRuleForbidden() *AddNatRuleForbidden {
	return &AddNatRuleForbidden{}
}

/*AddNatRuleForbidden handles this case with default header values.

Operation forbidden
*/
type AddNatRuleForbidden struct {
	Payload *models.APIError
}

func (o *AddNatRuleForbidden) Error() string {
	return fmt.Sprintf("[POST /logical-routers/{logical-router-id}/nat/rules][%d] addNatRuleForbidden  %+v", 403, o.Payload)
}

func (o *AddNatRuleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddNatRuleNotFound creates a AddNatRuleNotFound with default headers values
func NewAddNatRuleNotFound() *AddNatRuleNotFound {
	return &AddNatRuleNotFound{}
}

/*AddNatRuleNotFound handles this case with default header values.

Resource not found
*/
type AddNatRuleNotFound struct {
	Payload *models.APIError
}

func (o *AddNatRuleNotFound) Error() string {
	return fmt.Sprintf("[POST /logical-routers/{logical-router-id}/nat/rules][%d] addNatRuleNotFound  %+v", 404, o.Payload)
}

func (o *AddNatRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddNatRulePreconditionFailed creates a AddNatRulePreconditionFailed with default headers values
func NewAddNatRulePreconditionFailed() *AddNatRulePreconditionFailed {
	return &AddNatRulePreconditionFailed{}
}

/*AddNatRulePreconditionFailed handles this case with default header values.

Precondition failed
*/
type AddNatRulePreconditionFailed struct {
	Payload *models.APIError
}

func (o *AddNatRulePreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /logical-routers/{logical-router-id}/nat/rules][%d] addNatRulePreconditionFailed  %+v", 412, o.Payload)
}

func (o *AddNatRulePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddNatRuleInternalServerError creates a AddNatRuleInternalServerError with default headers values
func NewAddNatRuleInternalServerError() *AddNatRuleInternalServerError {
	return &AddNatRuleInternalServerError{}
}

/*AddNatRuleInternalServerError handles this case with default header values.

Internal server error
*/
type AddNatRuleInternalServerError struct {
	Payload *models.APIError
}

func (o *AddNatRuleInternalServerError) Error() string {
	return fmt.Sprintf("[POST /logical-routers/{logical-router-id}/nat/rules][%d] addNatRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *AddNatRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddNatRuleServiceUnavailable creates a AddNatRuleServiceUnavailable with default headers values
func NewAddNatRuleServiceUnavailable() *AddNatRuleServiceUnavailable {
	return &AddNatRuleServiceUnavailable{}
}

/*AddNatRuleServiceUnavailable handles this case with default header values.

Service unavailable
*/
type AddNatRuleServiceUnavailable struct {
	Payload *models.APIError
}

func (o *AddNatRuleServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /logical-routers/{logical-router-id}/nat/rules][%d] addNatRuleServiceUnavailable  %+v", 503, o.Payload)
}

func (o *AddNatRuleServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
