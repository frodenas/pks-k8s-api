// Code generated by go-swagger; DO NOT EDIT.

package logical_routing_and_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// GetNatRuleReader is a Reader for the GetNatRule structure.
type GetNatRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNatRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetNatRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetNatRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetNatRuleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetNatRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewGetNatRulePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetNatRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetNatRuleServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetNatRuleOK creates a GetNatRuleOK with default headers values
func NewGetNatRuleOK() *GetNatRuleOK {
	return &GetNatRuleOK{}
}

/*GetNatRuleOK handles this case with default header values.

Success
*/
type GetNatRuleOK struct {
	Payload *models.NatRule
}

func (o *GetNatRuleOK) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}/nat/rules/{rule-id}][%d] getNatRuleOK  %+v", 200, o.Payload)
}

func (o *GetNatRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NatRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNatRuleBadRequest creates a GetNatRuleBadRequest with default headers values
func NewGetNatRuleBadRequest() *GetNatRuleBadRequest {
	return &GetNatRuleBadRequest{}
}

/*GetNatRuleBadRequest handles this case with default header values.

Bad request
*/
type GetNatRuleBadRequest struct {
	Payload *models.APIError
}

func (o *GetNatRuleBadRequest) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}/nat/rules/{rule-id}][%d] getNatRuleBadRequest  %+v", 400, o.Payload)
}

func (o *GetNatRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNatRuleForbidden creates a GetNatRuleForbidden with default headers values
func NewGetNatRuleForbidden() *GetNatRuleForbidden {
	return &GetNatRuleForbidden{}
}

/*GetNatRuleForbidden handles this case with default header values.

Operation forbidden
*/
type GetNatRuleForbidden struct {
	Payload *models.APIError
}

func (o *GetNatRuleForbidden) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}/nat/rules/{rule-id}][%d] getNatRuleForbidden  %+v", 403, o.Payload)
}

func (o *GetNatRuleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNatRuleNotFound creates a GetNatRuleNotFound with default headers values
func NewGetNatRuleNotFound() *GetNatRuleNotFound {
	return &GetNatRuleNotFound{}
}

/*GetNatRuleNotFound handles this case with default header values.

Resource not found
*/
type GetNatRuleNotFound struct {
	Payload *models.APIError
}

func (o *GetNatRuleNotFound) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}/nat/rules/{rule-id}][%d] getNatRuleNotFound  %+v", 404, o.Payload)
}

func (o *GetNatRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNatRulePreconditionFailed creates a GetNatRulePreconditionFailed with default headers values
func NewGetNatRulePreconditionFailed() *GetNatRulePreconditionFailed {
	return &GetNatRulePreconditionFailed{}
}

/*GetNatRulePreconditionFailed handles this case with default header values.

Precondition failed
*/
type GetNatRulePreconditionFailed struct {
	Payload *models.APIError
}

func (o *GetNatRulePreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}/nat/rules/{rule-id}][%d] getNatRulePreconditionFailed  %+v", 412, o.Payload)
}

func (o *GetNatRulePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNatRuleInternalServerError creates a GetNatRuleInternalServerError with default headers values
func NewGetNatRuleInternalServerError() *GetNatRuleInternalServerError {
	return &GetNatRuleInternalServerError{}
}

/*GetNatRuleInternalServerError handles this case with default header values.

Internal server error
*/
type GetNatRuleInternalServerError struct {
	Payload *models.APIError
}

func (o *GetNatRuleInternalServerError) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}/nat/rules/{rule-id}][%d] getNatRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *GetNatRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNatRuleServiceUnavailable creates a GetNatRuleServiceUnavailable with default headers values
func NewGetNatRuleServiceUnavailable() *GetNatRuleServiceUnavailable {
	return &GetNatRuleServiceUnavailable{}
}

/*GetNatRuleServiceUnavailable handles this case with default header values.

Service unavailable
*/
type GetNatRuleServiceUnavailable struct {
	Payload *models.APIError
}

func (o *GetNatRuleServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}/nat/rules/{rule-id}][%d] getNatRuleServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetNatRuleServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
