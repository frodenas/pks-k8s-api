// Code generated by go-swagger; DO NOT EDIT.

package logical_routing_and_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// ReadLogicalRouterPortReader is a Reader for the ReadLogicalRouterPort structure.
type ReadLogicalRouterPortReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadLogicalRouterPortReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewReadLogicalRouterPortOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewReadLogicalRouterPortBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewReadLogicalRouterPortForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReadLogicalRouterPortNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewReadLogicalRouterPortPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewReadLogicalRouterPortInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewReadLogicalRouterPortServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadLogicalRouterPortOK creates a ReadLogicalRouterPortOK with default headers values
func NewReadLogicalRouterPortOK() *ReadLogicalRouterPortOK {
	return &ReadLogicalRouterPortOK{}
}

/*ReadLogicalRouterPortOK handles this case with default header values.

Success
*/
type ReadLogicalRouterPortOK struct {
	Payload *models.LogicalRouterPort
}

func (o *ReadLogicalRouterPortOK) Error() string {
	return fmt.Sprintf("[GET /logical-router-ports/{logical-router-port-id}][%d] readLogicalRouterPortOK  %+v", 200, o.Payload)
}

func (o *ReadLogicalRouterPortOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogicalRouterPort)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLogicalRouterPortBadRequest creates a ReadLogicalRouterPortBadRequest with default headers values
func NewReadLogicalRouterPortBadRequest() *ReadLogicalRouterPortBadRequest {
	return &ReadLogicalRouterPortBadRequest{}
}

/*ReadLogicalRouterPortBadRequest handles this case with default header values.

Bad request
*/
type ReadLogicalRouterPortBadRequest struct {
	Payload *models.APIError
}

func (o *ReadLogicalRouterPortBadRequest) Error() string {
	return fmt.Sprintf("[GET /logical-router-ports/{logical-router-port-id}][%d] readLogicalRouterPortBadRequest  %+v", 400, o.Payload)
}

func (o *ReadLogicalRouterPortBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLogicalRouterPortForbidden creates a ReadLogicalRouterPortForbidden with default headers values
func NewReadLogicalRouterPortForbidden() *ReadLogicalRouterPortForbidden {
	return &ReadLogicalRouterPortForbidden{}
}

/*ReadLogicalRouterPortForbidden handles this case with default header values.

Operation forbidden
*/
type ReadLogicalRouterPortForbidden struct {
	Payload *models.APIError
}

func (o *ReadLogicalRouterPortForbidden) Error() string {
	return fmt.Sprintf("[GET /logical-router-ports/{logical-router-port-id}][%d] readLogicalRouterPortForbidden  %+v", 403, o.Payload)
}

func (o *ReadLogicalRouterPortForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLogicalRouterPortNotFound creates a ReadLogicalRouterPortNotFound with default headers values
func NewReadLogicalRouterPortNotFound() *ReadLogicalRouterPortNotFound {
	return &ReadLogicalRouterPortNotFound{}
}

/*ReadLogicalRouterPortNotFound handles this case with default header values.

Resource not found
*/
type ReadLogicalRouterPortNotFound struct {
	Payload *models.APIError
}

func (o *ReadLogicalRouterPortNotFound) Error() string {
	return fmt.Sprintf("[GET /logical-router-ports/{logical-router-port-id}][%d] readLogicalRouterPortNotFound  %+v", 404, o.Payload)
}

func (o *ReadLogicalRouterPortNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLogicalRouterPortPreconditionFailed creates a ReadLogicalRouterPortPreconditionFailed with default headers values
func NewReadLogicalRouterPortPreconditionFailed() *ReadLogicalRouterPortPreconditionFailed {
	return &ReadLogicalRouterPortPreconditionFailed{}
}

/*ReadLogicalRouterPortPreconditionFailed handles this case with default header values.

Precondition failed
*/
type ReadLogicalRouterPortPreconditionFailed struct {
	Payload *models.APIError
}

func (o *ReadLogicalRouterPortPreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /logical-router-ports/{logical-router-port-id}][%d] readLogicalRouterPortPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ReadLogicalRouterPortPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLogicalRouterPortInternalServerError creates a ReadLogicalRouterPortInternalServerError with default headers values
func NewReadLogicalRouterPortInternalServerError() *ReadLogicalRouterPortInternalServerError {
	return &ReadLogicalRouterPortInternalServerError{}
}

/*ReadLogicalRouterPortInternalServerError handles this case with default header values.

Internal server error
*/
type ReadLogicalRouterPortInternalServerError struct {
	Payload *models.APIError
}

func (o *ReadLogicalRouterPortInternalServerError) Error() string {
	return fmt.Sprintf("[GET /logical-router-ports/{logical-router-port-id}][%d] readLogicalRouterPortInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadLogicalRouterPortInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLogicalRouterPortServiceUnavailable creates a ReadLogicalRouterPortServiceUnavailable with default headers values
func NewReadLogicalRouterPortServiceUnavailable() *ReadLogicalRouterPortServiceUnavailable {
	return &ReadLogicalRouterPortServiceUnavailable{}
}

/*ReadLogicalRouterPortServiceUnavailable handles this case with default header values.

Service unavailable
*/
type ReadLogicalRouterPortServiceUnavailable struct {
	Payload *models.APIError
}

func (o *ReadLogicalRouterPortServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /logical-router-ports/{logical-router-port-id}][%d] readLogicalRouterPortServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ReadLogicalRouterPortServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
