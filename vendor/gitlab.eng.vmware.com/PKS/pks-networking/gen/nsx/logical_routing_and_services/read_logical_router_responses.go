// Code generated by go-swagger; DO NOT EDIT.

package logical_routing_and_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// ReadLogicalRouterReader is a Reader for the ReadLogicalRouter structure.
type ReadLogicalRouterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadLogicalRouterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewReadLogicalRouterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewReadLogicalRouterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewReadLogicalRouterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReadLogicalRouterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewReadLogicalRouterPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewReadLogicalRouterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewReadLogicalRouterServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadLogicalRouterOK creates a ReadLogicalRouterOK with default headers values
func NewReadLogicalRouterOK() *ReadLogicalRouterOK {
	return &ReadLogicalRouterOK{}
}

/*ReadLogicalRouterOK handles this case with default header values.

Success
*/
type ReadLogicalRouterOK struct {
	Payload *models.LogicalRouter
}

func (o *ReadLogicalRouterOK) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}][%d] readLogicalRouterOK  %+v", 200, o.Payload)
}

func (o *ReadLogicalRouterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogicalRouter)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLogicalRouterBadRequest creates a ReadLogicalRouterBadRequest with default headers values
func NewReadLogicalRouterBadRequest() *ReadLogicalRouterBadRequest {
	return &ReadLogicalRouterBadRequest{}
}

/*ReadLogicalRouterBadRequest handles this case with default header values.

Bad request
*/
type ReadLogicalRouterBadRequest struct {
	Payload *models.APIError
}

func (o *ReadLogicalRouterBadRequest) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}][%d] readLogicalRouterBadRequest  %+v", 400, o.Payload)
}

func (o *ReadLogicalRouterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLogicalRouterForbidden creates a ReadLogicalRouterForbidden with default headers values
func NewReadLogicalRouterForbidden() *ReadLogicalRouterForbidden {
	return &ReadLogicalRouterForbidden{}
}

/*ReadLogicalRouterForbidden handles this case with default header values.

Operation forbidden
*/
type ReadLogicalRouterForbidden struct {
	Payload *models.APIError
}

func (o *ReadLogicalRouterForbidden) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}][%d] readLogicalRouterForbidden  %+v", 403, o.Payload)
}

func (o *ReadLogicalRouterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLogicalRouterNotFound creates a ReadLogicalRouterNotFound with default headers values
func NewReadLogicalRouterNotFound() *ReadLogicalRouterNotFound {
	return &ReadLogicalRouterNotFound{}
}

/*ReadLogicalRouterNotFound handles this case with default header values.

Resource not found
*/
type ReadLogicalRouterNotFound struct {
	Payload *models.APIError
}

func (o *ReadLogicalRouterNotFound) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}][%d] readLogicalRouterNotFound  %+v", 404, o.Payload)
}

func (o *ReadLogicalRouterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLogicalRouterPreconditionFailed creates a ReadLogicalRouterPreconditionFailed with default headers values
func NewReadLogicalRouterPreconditionFailed() *ReadLogicalRouterPreconditionFailed {
	return &ReadLogicalRouterPreconditionFailed{}
}

/*ReadLogicalRouterPreconditionFailed handles this case with default header values.

Precondition failed
*/
type ReadLogicalRouterPreconditionFailed struct {
	Payload *models.APIError
}

func (o *ReadLogicalRouterPreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}][%d] readLogicalRouterPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ReadLogicalRouterPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLogicalRouterInternalServerError creates a ReadLogicalRouterInternalServerError with default headers values
func NewReadLogicalRouterInternalServerError() *ReadLogicalRouterInternalServerError {
	return &ReadLogicalRouterInternalServerError{}
}

/*ReadLogicalRouterInternalServerError handles this case with default header values.

Internal server error
*/
type ReadLogicalRouterInternalServerError struct {
	Payload *models.APIError
}

func (o *ReadLogicalRouterInternalServerError) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}][%d] readLogicalRouterInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadLogicalRouterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLogicalRouterServiceUnavailable creates a ReadLogicalRouterServiceUnavailable with default headers values
func NewReadLogicalRouterServiceUnavailable() *ReadLogicalRouterServiceUnavailable {
	return &ReadLogicalRouterServiceUnavailable{}
}

/*ReadLogicalRouterServiceUnavailable handles this case with default header values.

Service unavailable
*/
type ReadLogicalRouterServiceUnavailable struct {
	Payload *models.APIError
}

func (o *ReadLogicalRouterServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}][%d] readLogicalRouterServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ReadLogicalRouterServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
