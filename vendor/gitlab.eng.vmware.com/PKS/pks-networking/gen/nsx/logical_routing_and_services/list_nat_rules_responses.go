// Code generated by go-swagger; DO NOT EDIT.

package logical_routing_and_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// ListNatRulesReader is a Reader for the ListNatRules structure.
type ListNatRulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListNatRulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListNatRulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListNatRulesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListNatRulesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListNatRulesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewListNatRulesPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListNatRulesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewListNatRulesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListNatRulesOK creates a ListNatRulesOK with default headers values
func NewListNatRulesOK() *ListNatRulesOK {
	return &ListNatRulesOK{}
}

/*ListNatRulesOK handles this case with default header values.

Success
*/
type ListNatRulesOK struct {
	Payload *models.NatRuleListResult
}

func (o *ListNatRulesOK) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}/nat/rules][%d] listNatRulesOK  %+v", 200, o.Payload)
}

func (o *ListNatRulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NatRuleListResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNatRulesBadRequest creates a ListNatRulesBadRequest with default headers values
func NewListNatRulesBadRequest() *ListNatRulesBadRequest {
	return &ListNatRulesBadRequest{}
}

/*ListNatRulesBadRequest handles this case with default header values.

Bad request
*/
type ListNatRulesBadRequest struct {
	Payload *models.APIError
}

func (o *ListNatRulesBadRequest) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}/nat/rules][%d] listNatRulesBadRequest  %+v", 400, o.Payload)
}

func (o *ListNatRulesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNatRulesForbidden creates a ListNatRulesForbidden with default headers values
func NewListNatRulesForbidden() *ListNatRulesForbidden {
	return &ListNatRulesForbidden{}
}

/*ListNatRulesForbidden handles this case with default header values.

Operation forbidden
*/
type ListNatRulesForbidden struct {
	Payload *models.APIError
}

func (o *ListNatRulesForbidden) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}/nat/rules][%d] listNatRulesForbidden  %+v", 403, o.Payload)
}

func (o *ListNatRulesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNatRulesNotFound creates a ListNatRulesNotFound with default headers values
func NewListNatRulesNotFound() *ListNatRulesNotFound {
	return &ListNatRulesNotFound{}
}

/*ListNatRulesNotFound handles this case with default header values.

Resource not found
*/
type ListNatRulesNotFound struct {
	Payload *models.APIError
}

func (o *ListNatRulesNotFound) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}/nat/rules][%d] listNatRulesNotFound  %+v", 404, o.Payload)
}

func (o *ListNatRulesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNatRulesPreconditionFailed creates a ListNatRulesPreconditionFailed with default headers values
func NewListNatRulesPreconditionFailed() *ListNatRulesPreconditionFailed {
	return &ListNatRulesPreconditionFailed{}
}

/*ListNatRulesPreconditionFailed handles this case with default header values.

Precondition failed
*/
type ListNatRulesPreconditionFailed struct {
	Payload *models.APIError
}

func (o *ListNatRulesPreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}/nat/rules][%d] listNatRulesPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ListNatRulesPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNatRulesInternalServerError creates a ListNatRulesInternalServerError with default headers values
func NewListNatRulesInternalServerError() *ListNatRulesInternalServerError {
	return &ListNatRulesInternalServerError{}
}

/*ListNatRulesInternalServerError handles this case with default header values.

Internal server error
*/
type ListNatRulesInternalServerError struct {
	Payload *models.APIError
}

func (o *ListNatRulesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}/nat/rules][%d] listNatRulesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListNatRulesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNatRulesServiceUnavailable creates a ListNatRulesServiceUnavailable with default headers values
func NewListNatRulesServiceUnavailable() *ListNatRulesServiceUnavailable {
	return &ListNatRulesServiceUnavailable{}
}

/*ListNatRulesServiceUnavailable handles this case with default header values.

Service unavailable
*/
type ListNatRulesServiceUnavailable struct {
	Payload *models.APIError
}

func (o *ListNatRulesServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /logical-routers/{logical-router-id}/nat/rules][%d] listNatRulesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListNatRulesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
