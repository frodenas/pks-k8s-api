// Code generated by go-swagger; DO NOT EDIT.

package logical_routing_and_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// UpdateLogicalRouterReader is a Reader for the UpdateLogicalRouter structure.
type UpdateLogicalRouterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateLogicalRouterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateLogicalRouterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateLogicalRouterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateLogicalRouterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateLogicalRouterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdateLogicalRouterPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateLogicalRouterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewUpdateLogicalRouterServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateLogicalRouterOK creates a UpdateLogicalRouterOK with default headers values
func NewUpdateLogicalRouterOK() *UpdateLogicalRouterOK {
	return &UpdateLogicalRouterOK{}
}

/*UpdateLogicalRouterOK handles this case with default header values.

Success
*/
type UpdateLogicalRouterOK struct {
	Payload *models.LogicalRouter
}

func (o *UpdateLogicalRouterOK) Error() string {
	return fmt.Sprintf("[PUT /logical-routers/{logical-router-id}][%d] updateLogicalRouterOK  %+v", 200, o.Payload)
}

func (o *UpdateLogicalRouterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogicalRouter)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogicalRouterBadRequest creates a UpdateLogicalRouterBadRequest with default headers values
func NewUpdateLogicalRouterBadRequest() *UpdateLogicalRouterBadRequest {
	return &UpdateLogicalRouterBadRequest{}
}

/*UpdateLogicalRouterBadRequest handles this case with default header values.

Bad request
*/
type UpdateLogicalRouterBadRequest struct {
	Payload *models.APIError
}

func (o *UpdateLogicalRouterBadRequest) Error() string {
	return fmt.Sprintf("[PUT /logical-routers/{logical-router-id}][%d] updateLogicalRouterBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateLogicalRouterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogicalRouterForbidden creates a UpdateLogicalRouterForbidden with default headers values
func NewUpdateLogicalRouterForbidden() *UpdateLogicalRouterForbidden {
	return &UpdateLogicalRouterForbidden{}
}

/*UpdateLogicalRouterForbidden handles this case with default header values.

Operation forbidden
*/
type UpdateLogicalRouterForbidden struct {
	Payload *models.APIError
}

func (o *UpdateLogicalRouterForbidden) Error() string {
	return fmt.Sprintf("[PUT /logical-routers/{logical-router-id}][%d] updateLogicalRouterForbidden  %+v", 403, o.Payload)
}

func (o *UpdateLogicalRouterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogicalRouterNotFound creates a UpdateLogicalRouterNotFound with default headers values
func NewUpdateLogicalRouterNotFound() *UpdateLogicalRouterNotFound {
	return &UpdateLogicalRouterNotFound{}
}

/*UpdateLogicalRouterNotFound handles this case with default header values.

Resource not found
*/
type UpdateLogicalRouterNotFound struct {
	Payload *models.APIError
}

func (o *UpdateLogicalRouterNotFound) Error() string {
	return fmt.Sprintf("[PUT /logical-routers/{logical-router-id}][%d] updateLogicalRouterNotFound  %+v", 404, o.Payload)
}

func (o *UpdateLogicalRouterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogicalRouterPreconditionFailed creates a UpdateLogicalRouterPreconditionFailed with default headers values
func NewUpdateLogicalRouterPreconditionFailed() *UpdateLogicalRouterPreconditionFailed {
	return &UpdateLogicalRouterPreconditionFailed{}
}

/*UpdateLogicalRouterPreconditionFailed handles this case with default header values.

Precondition failed
*/
type UpdateLogicalRouterPreconditionFailed struct {
	Payload *models.APIError
}

func (o *UpdateLogicalRouterPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /logical-routers/{logical-router-id}][%d] updateLogicalRouterPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateLogicalRouterPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogicalRouterInternalServerError creates a UpdateLogicalRouterInternalServerError with default headers values
func NewUpdateLogicalRouterInternalServerError() *UpdateLogicalRouterInternalServerError {
	return &UpdateLogicalRouterInternalServerError{}
}

/*UpdateLogicalRouterInternalServerError handles this case with default header values.

Internal server error
*/
type UpdateLogicalRouterInternalServerError struct {
	Payload *models.APIError
}

func (o *UpdateLogicalRouterInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /logical-routers/{logical-router-id}][%d] updateLogicalRouterInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateLogicalRouterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogicalRouterServiceUnavailable creates a UpdateLogicalRouterServiceUnavailable with default headers values
func NewUpdateLogicalRouterServiceUnavailable() *UpdateLogicalRouterServiceUnavailable {
	return &UpdateLogicalRouterServiceUnavailable{}
}

/*UpdateLogicalRouterServiceUnavailable handles this case with default header values.

Service unavailable
*/
type UpdateLogicalRouterServiceUnavailable struct {
	Payload *models.APIError
}

func (o *UpdateLogicalRouterServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /logical-routers/{logical-router-id}][%d] updateLogicalRouterServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateLogicalRouterServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
