// Code generated by go-swagger; DO NOT EDIT.

package logical_routing_and_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteNatRuleParams creates a new DeleteNatRuleParams object
// with the default values initialized.
func NewDeleteNatRuleParams() *DeleteNatRuleParams {
	var ()
	return &DeleteNatRuleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteNatRuleParamsWithTimeout creates a new DeleteNatRuleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteNatRuleParamsWithTimeout(timeout time.Duration) *DeleteNatRuleParams {
	var ()
	return &DeleteNatRuleParams{

		timeout: timeout,
	}
}

// NewDeleteNatRuleParamsWithContext creates a new DeleteNatRuleParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteNatRuleParamsWithContext(ctx context.Context) *DeleteNatRuleParams {
	var ()
	return &DeleteNatRuleParams{

		Context: ctx,
	}
}

// NewDeleteNatRuleParamsWithHTTPClient creates a new DeleteNatRuleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteNatRuleParamsWithHTTPClient(client *http.Client) *DeleteNatRuleParams {
	var ()
	return &DeleteNatRuleParams{
		HTTPClient: client,
	}
}

/*DeleteNatRuleParams contains all the parameters to send to the API endpoint
for the delete nat rule operation typically these are written to a http.Request
*/
type DeleteNatRuleParams struct {

	/*LogicalRouterID*/
	LogicalRouterID string
	/*RuleID*/
	RuleID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete nat rule params
func (o *DeleteNatRuleParams) WithTimeout(timeout time.Duration) *DeleteNatRuleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete nat rule params
func (o *DeleteNatRuleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete nat rule params
func (o *DeleteNatRuleParams) WithContext(ctx context.Context) *DeleteNatRuleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete nat rule params
func (o *DeleteNatRuleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete nat rule params
func (o *DeleteNatRuleParams) WithHTTPClient(client *http.Client) *DeleteNatRuleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete nat rule params
func (o *DeleteNatRuleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLogicalRouterID adds the logicalRouterID to the delete nat rule params
func (o *DeleteNatRuleParams) WithLogicalRouterID(logicalRouterID string) *DeleteNatRuleParams {
	o.SetLogicalRouterID(logicalRouterID)
	return o
}

// SetLogicalRouterID adds the logicalRouterId to the delete nat rule params
func (o *DeleteNatRuleParams) SetLogicalRouterID(logicalRouterID string) {
	o.LogicalRouterID = logicalRouterID
}

// WithRuleID adds the ruleID to the delete nat rule params
func (o *DeleteNatRuleParams) WithRuleID(ruleID string) *DeleteNatRuleParams {
	o.SetRuleID(ruleID)
	return o
}

// SetRuleID adds the ruleId to the delete nat rule params
func (o *DeleteNatRuleParams) SetRuleID(ruleID string) {
	o.RuleID = ruleID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteNatRuleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param logical-router-id
	if err := r.SetPathParam("logical-router-id", o.LogicalRouterID); err != nil {
		return err
	}

	// path param rule-id
	if err := r.SetPathParam("rule-id", o.RuleID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
