// Code generated by go-swagger; DO NOT EDIT.

package logical_routing_and_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// DeleteLogicalRouterReader is a Reader for the DeleteLogicalRouter structure.
type DeleteLogicalRouterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteLogicalRouterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteLogicalRouterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteLogicalRouterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteLogicalRouterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteLogicalRouterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteLogicalRouterPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteLogicalRouterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewDeleteLogicalRouterServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteLogicalRouterOK creates a DeleteLogicalRouterOK with default headers values
func NewDeleteLogicalRouterOK() *DeleteLogicalRouterOK {
	return &DeleteLogicalRouterOK{}
}

/*DeleteLogicalRouterOK handles this case with default header values.

Logical Router successfully deleted
*/
type DeleteLogicalRouterOK struct {
}

func (o *DeleteLogicalRouterOK) Error() string {
	return fmt.Sprintf("[DELETE /logical-routers/{logical-router-id}][%d] deleteLogicalRouterOK ", 200)
}

func (o *DeleteLogicalRouterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteLogicalRouterBadRequest creates a DeleteLogicalRouterBadRequest with default headers values
func NewDeleteLogicalRouterBadRequest() *DeleteLogicalRouterBadRequest {
	return &DeleteLogicalRouterBadRequest{}
}

/*DeleteLogicalRouterBadRequest handles this case with default header values.

Bad request
*/
type DeleteLogicalRouterBadRequest struct {
	Payload *models.APIError
}

func (o *DeleteLogicalRouterBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /logical-routers/{logical-router-id}][%d] deleteLogicalRouterBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteLogicalRouterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogicalRouterForbidden creates a DeleteLogicalRouterForbidden with default headers values
func NewDeleteLogicalRouterForbidden() *DeleteLogicalRouterForbidden {
	return &DeleteLogicalRouterForbidden{}
}

/*DeleteLogicalRouterForbidden handles this case with default header values.

Operation forbidden
*/
type DeleteLogicalRouterForbidden struct {
	Payload *models.APIError
}

func (o *DeleteLogicalRouterForbidden) Error() string {
	return fmt.Sprintf("[DELETE /logical-routers/{logical-router-id}][%d] deleteLogicalRouterForbidden  %+v", 403, o.Payload)
}

func (o *DeleteLogicalRouterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogicalRouterNotFound creates a DeleteLogicalRouterNotFound with default headers values
func NewDeleteLogicalRouterNotFound() *DeleteLogicalRouterNotFound {
	return &DeleteLogicalRouterNotFound{}
}

/*DeleteLogicalRouterNotFound handles this case with default header values.

Resource not found
*/
type DeleteLogicalRouterNotFound struct {
	Payload *models.APIError
}

func (o *DeleteLogicalRouterNotFound) Error() string {
	return fmt.Sprintf("[DELETE /logical-routers/{logical-router-id}][%d] deleteLogicalRouterNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLogicalRouterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogicalRouterPreconditionFailed creates a DeleteLogicalRouterPreconditionFailed with default headers values
func NewDeleteLogicalRouterPreconditionFailed() *DeleteLogicalRouterPreconditionFailed {
	return &DeleteLogicalRouterPreconditionFailed{}
}

/*DeleteLogicalRouterPreconditionFailed handles this case with default header values.

Precondition failed
*/
type DeleteLogicalRouterPreconditionFailed struct {
	Payload *models.APIError
}

func (o *DeleteLogicalRouterPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /logical-routers/{logical-router-id}][%d] deleteLogicalRouterPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteLogicalRouterPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogicalRouterInternalServerError creates a DeleteLogicalRouterInternalServerError with default headers values
func NewDeleteLogicalRouterInternalServerError() *DeleteLogicalRouterInternalServerError {
	return &DeleteLogicalRouterInternalServerError{}
}

/*DeleteLogicalRouterInternalServerError handles this case with default header values.

Internal server error
*/
type DeleteLogicalRouterInternalServerError struct {
	Payload *models.APIError
}

func (o *DeleteLogicalRouterInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /logical-routers/{logical-router-id}][%d] deleteLogicalRouterInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteLogicalRouterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogicalRouterServiceUnavailable creates a DeleteLogicalRouterServiceUnavailable with default headers values
func NewDeleteLogicalRouterServiceUnavailable() *DeleteLogicalRouterServiceUnavailable {
	return &DeleteLogicalRouterServiceUnavailable{}
}

/*DeleteLogicalRouterServiceUnavailable handles this case with default header values.

Service unavailable
*/
type DeleteLogicalRouterServiceUnavailable struct {
	Payload *models.APIError
}

func (o *DeleteLogicalRouterServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /logical-routers/{logical-router-id}][%d] deleteLogicalRouterServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteLogicalRouterServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
