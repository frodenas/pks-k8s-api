// Code generated by go-swagger; DO NOT EDIT.

package logical_routing_and_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// NewCreateLogicalRouterPortParams creates a new CreateLogicalRouterPortParams object
// with the default values initialized.
func NewCreateLogicalRouterPortParams() *CreateLogicalRouterPortParams {
	var ()
	return &CreateLogicalRouterPortParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateLogicalRouterPortParamsWithTimeout creates a new CreateLogicalRouterPortParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateLogicalRouterPortParamsWithTimeout(timeout time.Duration) *CreateLogicalRouterPortParams {
	var ()
	return &CreateLogicalRouterPortParams{

		timeout: timeout,
	}
}

// NewCreateLogicalRouterPortParamsWithContext creates a new CreateLogicalRouterPortParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateLogicalRouterPortParamsWithContext(ctx context.Context) *CreateLogicalRouterPortParams {
	var ()
	return &CreateLogicalRouterPortParams{

		Context: ctx,
	}
}

// NewCreateLogicalRouterPortParamsWithHTTPClient creates a new CreateLogicalRouterPortParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateLogicalRouterPortParamsWithHTTPClient(client *http.Client) *CreateLogicalRouterPortParams {
	var ()
	return &CreateLogicalRouterPortParams{
		HTTPClient: client,
	}
}

/*CreateLogicalRouterPortParams contains all the parameters to send to the API endpoint
for the create logical router port operation typically these are written to a http.Request
*/
type CreateLogicalRouterPortParams struct {

	/*LogicalRouterPort*/
	LogicalRouterPort *models.LogicalRouterPort

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create logical router port params
func (o *CreateLogicalRouterPortParams) WithTimeout(timeout time.Duration) *CreateLogicalRouterPortParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create logical router port params
func (o *CreateLogicalRouterPortParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create logical router port params
func (o *CreateLogicalRouterPortParams) WithContext(ctx context.Context) *CreateLogicalRouterPortParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create logical router port params
func (o *CreateLogicalRouterPortParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create logical router port params
func (o *CreateLogicalRouterPortParams) WithHTTPClient(client *http.Client) *CreateLogicalRouterPortParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create logical router port params
func (o *CreateLogicalRouterPortParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLogicalRouterPort adds the logicalRouterPort to the create logical router port params
func (o *CreateLogicalRouterPortParams) WithLogicalRouterPort(logicalRouterPort *models.LogicalRouterPort) *CreateLogicalRouterPortParams {
	o.SetLogicalRouterPort(logicalRouterPort)
	return o
}

// SetLogicalRouterPort adds the logicalRouterPort to the create logical router port params
func (o *CreateLogicalRouterPortParams) SetLogicalRouterPort(logicalRouterPort *models.LogicalRouterPort) {
	o.LogicalRouterPort = logicalRouterPort
}

// WriteToRequest writes these params to a swagger request
func (o *CreateLogicalRouterPortParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LogicalRouterPort == nil {
		o.LogicalRouterPort = new(models.LogicalRouterPort)
	}

	if err := r.SetBodyParam(o.LogicalRouterPort); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
