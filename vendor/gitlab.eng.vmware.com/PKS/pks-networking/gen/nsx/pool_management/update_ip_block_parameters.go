// Code generated by go-swagger; DO NOT EDIT.

package pool_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// NewUpdateIPBlockParams creates a new UpdateIPBlockParams object
// with the default values initialized.
func NewUpdateIPBlockParams() *UpdateIPBlockParams {
	var ()
	return &UpdateIPBlockParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateIPBlockParamsWithTimeout creates a new UpdateIPBlockParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateIPBlockParamsWithTimeout(timeout time.Duration) *UpdateIPBlockParams {
	var ()
	return &UpdateIPBlockParams{

		timeout: timeout,
	}
}

// NewUpdateIPBlockParamsWithContext creates a new UpdateIPBlockParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateIPBlockParamsWithContext(ctx context.Context) *UpdateIPBlockParams {
	var ()
	return &UpdateIPBlockParams{

		Context: ctx,
	}
}

// NewUpdateIPBlockParamsWithHTTPClient creates a new UpdateIPBlockParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateIPBlockParamsWithHTTPClient(client *http.Client) *UpdateIPBlockParams {
	var ()
	return &UpdateIPBlockParams{
		HTTPClient: client,
	}
}

/*UpdateIPBlockParams contains all the parameters to send to the API endpoint
for the update Ip block operation typically these are written to a http.Request
*/
type UpdateIPBlockParams struct {

	/*IPBlock*/
	IPBlock *models.IPBlock
	/*BlockID
	  IP address block id

	*/
	BlockID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update Ip block params
func (o *UpdateIPBlockParams) WithTimeout(timeout time.Duration) *UpdateIPBlockParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update Ip block params
func (o *UpdateIPBlockParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update Ip block params
func (o *UpdateIPBlockParams) WithContext(ctx context.Context) *UpdateIPBlockParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update Ip block params
func (o *UpdateIPBlockParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update Ip block params
func (o *UpdateIPBlockParams) WithHTTPClient(client *http.Client) *UpdateIPBlockParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update Ip block params
func (o *UpdateIPBlockParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIPBlock adds the iPBlock to the update Ip block params
func (o *UpdateIPBlockParams) WithIPBlock(iPBlock *models.IPBlock) *UpdateIPBlockParams {
	o.SetIPBlock(iPBlock)
	return o
}

// SetIPBlock adds the ipBlock to the update Ip block params
func (o *UpdateIPBlockParams) SetIPBlock(iPBlock *models.IPBlock) {
	o.IPBlock = iPBlock
}

// WithBlockID adds the blockID to the update Ip block params
func (o *UpdateIPBlockParams) WithBlockID(blockID string) *UpdateIPBlockParams {
	o.SetBlockID(blockID)
	return o
}

// SetBlockID adds the blockId to the update Ip block params
func (o *UpdateIPBlockParams) SetBlockID(blockID string) {
	o.BlockID = blockID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateIPBlockParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IPBlock == nil {
		o.IPBlock = new(models.IPBlock)
	}

	if err := r.SetBodyParam(o.IPBlock); err != nil {
		return err
	}

	// path param block-id
	if err := r.SetPathParam("block-id", o.BlockID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
