// Code generated by go-swagger; DO NOT EDIT.

package pool_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// NewCreateIPBlockSubnetParams creates a new CreateIPBlockSubnetParams object
// with the default values initialized.
func NewCreateIPBlockSubnetParams() *CreateIPBlockSubnetParams {
	var ()
	return &CreateIPBlockSubnetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateIPBlockSubnetParamsWithTimeout creates a new CreateIPBlockSubnetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateIPBlockSubnetParamsWithTimeout(timeout time.Duration) *CreateIPBlockSubnetParams {
	var ()
	return &CreateIPBlockSubnetParams{

		timeout: timeout,
	}
}

// NewCreateIPBlockSubnetParamsWithContext creates a new CreateIPBlockSubnetParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateIPBlockSubnetParamsWithContext(ctx context.Context) *CreateIPBlockSubnetParams {
	var ()
	return &CreateIPBlockSubnetParams{

		Context: ctx,
	}
}

// NewCreateIPBlockSubnetParamsWithHTTPClient creates a new CreateIPBlockSubnetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateIPBlockSubnetParamsWithHTTPClient(client *http.Client) *CreateIPBlockSubnetParams {
	var ()
	return &CreateIPBlockSubnetParams{
		HTTPClient: client,
	}
}

/*CreateIPBlockSubnetParams contains all the parameters to send to the API endpoint
for the create Ip block subnet operation typically these are written to a http.Request
*/
type CreateIPBlockSubnetParams struct {

	/*IPBlockSubnet*/
	IPBlockSubnet *models.IPBlockSubnet

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create Ip block subnet params
func (o *CreateIPBlockSubnetParams) WithTimeout(timeout time.Duration) *CreateIPBlockSubnetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create Ip block subnet params
func (o *CreateIPBlockSubnetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create Ip block subnet params
func (o *CreateIPBlockSubnetParams) WithContext(ctx context.Context) *CreateIPBlockSubnetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create Ip block subnet params
func (o *CreateIPBlockSubnetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create Ip block subnet params
func (o *CreateIPBlockSubnetParams) WithHTTPClient(client *http.Client) *CreateIPBlockSubnetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create Ip block subnet params
func (o *CreateIPBlockSubnetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIPBlockSubnet adds the iPBlockSubnet to the create Ip block subnet params
func (o *CreateIPBlockSubnetParams) WithIPBlockSubnet(iPBlockSubnet *models.IPBlockSubnet) *CreateIPBlockSubnetParams {
	o.SetIPBlockSubnet(iPBlockSubnet)
	return o
}

// SetIPBlockSubnet adds the ipBlockSubnet to the create Ip block subnet params
func (o *CreateIPBlockSubnetParams) SetIPBlockSubnet(iPBlockSubnet *models.IPBlockSubnet) {
	o.IPBlockSubnet = iPBlockSubnet
}

// WriteToRequest writes these params to a swagger request
func (o *CreateIPBlockSubnetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IPBlockSubnet == nil {
		o.IPBlockSubnet = new(models.IPBlockSubnet)
	}

	if err := r.SetBodyParam(o.IPBlockSubnet); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
