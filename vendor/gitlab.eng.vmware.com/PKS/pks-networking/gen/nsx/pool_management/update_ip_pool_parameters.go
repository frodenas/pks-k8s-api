// Code generated by go-swagger; DO NOT EDIT.

package pool_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// NewUpdateIPPoolParams creates a new UpdateIPPoolParams object
// with the default values initialized.
func NewUpdateIPPoolParams() *UpdateIPPoolParams {
	var ()
	return &UpdateIPPoolParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateIPPoolParamsWithTimeout creates a new UpdateIPPoolParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateIPPoolParamsWithTimeout(timeout time.Duration) *UpdateIPPoolParams {
	var ()
	return &UpdateIPPoolParams{

		timeout: timeout,
	}
}

// NewUpdateIPPoolParamsWithContext creates a new UpdateIPPoolParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateIPPoolParamsWithContext(ctx context.Context) *UpdateIPPoolParams {
	var ()
	return &UpdateIPPoolParams{

		Context: ctx,
	}
}

// NewUpdateIPPoolParamsWithHTTPClient creates a new UpdateIPPoolParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateIPPoolParamsWithHTTPClient(client *http.Client) *UpdateIPPoolParams {
	var ()
	return &UpdateIPPoolParams{
		HTTPClient: client,
	}
}

/*UpdateIPPoolParams contains all the parameters to send to the API endpoint
for the update Ip pool operation typically these are written to a http.Request
*/
type UpdateIPPoolParams struct {

	/*IPPool*/
	IPPool *models.IPPool
	/*PoolID
	  IP pool ID

	*/
	PoolID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update Ip pool params
func (o *UpdateIPPoolParams) WithTimeout(timeout time.Duration) *UpdateIPPoolParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update Ip pool params
func (o *UpdateIPPoolParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update Ip pool params
func (o *UpdateIPPoolParams) WithContext(ctx context.Context) *UpdateIPPoolParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update Ip pool params
func (o *UpdateIPPoolParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update Ip pool params
func (o *UpdateIPPoolParams) WithHTTPClient(client *http.Client) *UpdateIPPoolParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update Ip pool params
func (o *UpdateIPPoolParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIPPool adds the iPPool to the update Ip pool params
func (o *UpdateIPPoolParams) WithIPPool(iPPool *models.IPPool) *UpdateIPPoolParams {
	o.SetIPPool(iPPool)
	return o
}

// SetIPPool adds the ipPool to the update Ip pool params
func (o *UpdateIPPoolParams) SetIPPool(iPPool *models.IPPool) {
	o.IPPool = iPPool
}

// WithPoolID adds the poolID to the update Ip pool params
func (o *UpdateIPPoolParams) WithPoolID(poolID string) *UpdateIPPoolParams {
	o.SetPoolID(poolID)
	return o
}

// SetPoolID adds the poolId to the update Ip pool params
func (o *UpdateIPPoolParams) SetPoolID(poolID string) {
	o.PoolID = poolID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateIPPoolParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IPPool == nil {
		o.IPPool = new(models.IPPool)
	}

	if err := r.SetBodyParam(o.IPPool); err != nil {
		return err
	}

	// path param pool-id
	if err := r.SetPathParam("pool-id", o.PoolID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
