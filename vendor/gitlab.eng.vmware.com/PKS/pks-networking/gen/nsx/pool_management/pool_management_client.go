// Code generated by go-swagger; DO NOT EDIT.

package pool_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new pool management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pool management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AllocateOrReleaseFromIPBlockSubnet allocates or release an IP address from a Ip subnet

Allocates or releases an IP address from the specified IP subnet. To allocate
an address, include ?action=ALLOCATE in the request and a "{}"
in the request body. When the request is successful, the response is
"allocation_id": "<ip-address>", where <ip-address> is an IP address from
the specified pool. To release an IP address (return it back to the pool),
include ?action=RELEASE in the request and "allocation_id":<ip-address> in
the request body, where <ip-address> is the address to be released. When the
request is successful, the response is NULL.

*/
func (a *Client) AllocateOrReleaseFromIPBlockSubnet(params *AllocateOrReleaseFromIPBlockSubnetParams, authInfo runtime.ClientAuthInfoWriter) (*AllocateOrReleaseFromIPBlockSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllocateOrReleaseFromIPBlockSubnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AllocateOrReleaseFromIpBlockSubnet",
		Method:             "POST",
		PathPattern:        "/pools/ip-subnets/{subnet-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllocateOrReleaseFromIPBlockSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllocateOrReleaseFromIPBlockSubnetOK), nil

}

/*
AllocateOrReleaseFromIPPool allocates or release an IP address from a pool

Allocates or releases an IP address from the specified IP pool. To allocate
an address, include ?action=ALLOCATE in the request and "allocation_id":null
in the request body. When the request is successful, the response is
"allocation_id": "<ip-address>", where <ip-address> is an IP address from
the specified pool. To release an IP address (return it back to the pool),
include ?action=RELEASE in the request and "allocation_id":<ip-address> in
the request body, where <ip-address> is the address to be released. When the
request is successful, the response is NULL. Tags, display_name and description
attributes are not supported for AllocationIpAddress in this release.

*/
func (a *Client) AllocateOrReleaseFromIPPool(params *AllocateOrReleaseFromIPPoolParams, authInfo runtime.ClientAuthInfoWriter) (*AllocateOrReleaseFromIPPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllocateOrReleaseFromIPPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AllocateOrReleaseFromIpPool",
		Method:             "POST",
		PathPattern:        "/pools/ip-pools/{pool-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllocateOrReleaseFromIPPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllocateOrReleaseFromIPPoolOK), nil

}

/*
CreateIPBlockSubnet creates subnet of specified size within an IP block

Carves out a subnet of requested size from the specified IP block. The "size"
parameter  and the "block_id " are the requireds field while invoking this API.
If the IP block has sufficient resources/space to allocate a subnet of specified size,
the response will contain all the details of the newly created subnet including the
display_name, description, cidr & allocation_ranges. Returns a conflict error
if the IP block does not have enough resources/space to allocate a subnet of
the requested size.

*/
func (a *Client) CreateIPBlockSubnet(params *CreateIPBlockSubnetParams, authInfo runtime.ClientAuthInfoWriter) (*CreateIPBlockSubnetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIPBlockSubnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateIpBlockSubnet",
		Method:             "POST",
		PathPattern:        "/pools/ip-subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIPBlockSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateIPBlockSubnetCreated), nil

}

/*
CreateIPPool creates an IP pool

Creates a new IPv4 or IPv6 address pool. Required parameters are
allocation_ranges and cidr. Optional parameters are display_name,
description, dns_nameservers, dns_suffix, and gateway_ip.

*/
func (a *Client) CreateIPPool(params *CreateIPPoolParams, authInfo runtime.ClientAuthInfoWriter) (*CreateIPPoolCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIPPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateIpPool",
		Method:             "POST",
		PathPattern:        "/pools/ip-pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIPPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateIPPoolCreated), nil

}

/*
DeleteIPBlock deletes an IP address block

Deletes the IP address block with specified id if it exists. IP
block cannot be deleted if there are allocated subnets from the block.

*/
func (a *Client) DeleteIPBlock(params *DeleteIPBlockParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIpBlock",
		Method:             "DELETE",
		PathPattern:        "/pools/ip-blocks/{block-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPBlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPBlockOK), nil

}

/*
DeleteIPBlockSubnet deletes subnet within an IP block

Deletes a subnet with specified id within a given IP address block.
Deletion is allowed only when there are no allocated IP addresses
from that subnet.

*/
func (a *Client) DeleteIPBlockSubnet(params *DeleteIPBlockSubnetParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPBlockSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPBlockSubnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIpBlockSubnet",
		Method:             "DELETE",
		PathPattern:        "/pools/ip-subnets/{subnet-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPBlockSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPBlockSubnetOK), nil

}

/*
DeleteIPPool deletes an IP pool

Deletes the specified IP address pool. By default, if the IpPool is used in other configurations (such as transport node template), it won't be deleted. In such situations, pass "force=true" as query param to force delete the IpPool
*/
func (a *Client) DeleteIPPool(params *DeleteIPPoolParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIpPool",
		Method:             "DELETE",
		PathPattern:        "/pools/ip-pools/{pool-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPPoolOK), nil

}

/*
ListIPBlockSubnets lists subnets within an IP block

Returns information about all subnets present within an IP address
block. Information includes subnet's id, display_name, description, cidr and
allocation ranges.

*/
func (a *Client) ListIPBlockSubnets(params *ListIPBlockSubnetsParams, authInfo runtime.ClientAuthInfoWriter) (*ListIPBlockSubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIPBlockSubnetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListIpBlockSubnets",
		Method:             "GET",
		PathPattern:        "/pools/ip-subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIPBlockSubnetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListIPBlockSubnetsOK), nil

}

/*
ListIPBlocks returns list of configured IP address blocks

Returns information about configured IP address blocks. Information includes
the id, display name, description & CIDR of IP address blocks

*/
func (a *Client) ListIPBlocks(params *ListIPBlocksParams, authInfo runtime.ClientAuthInfoWriter) (*ListIPBlocksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIPBlocksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListIpBlocks",
		Method:             "GET",
		PathPattern:        "/pools/ip-blocks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIPBlocksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListIPBlocksOK), nil

}

/*
ListIPPoolAllocations lists IP pool allocations

Returns information about which addresses have been allocated from a
specified IP address pool.

*/
func (a *Client) ListIPPoolAllocations(params *ListIPPoolAllocationsParams, authInfo runtime.ClientAuthInfoWriter) (*ListIPPoolAllocationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIPPoolAllocationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListIpPoolAllocations",
		Method:             "GET",
		PathPattern:        "/pools/ip-pools/{pool-id}/allocations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIPPoolAllocationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListIPPoolAllocationsOK), nil

}

/*
ListIPPools lists IP pools

Returns information about the configured IP address pools. Information
includes the display name and description of the pool and the details of
each of the subnets in the pool, including the DNS servers, allocation
ranges, gateway, and CIDR subnet address.

*/
func (a *Client) ListIPPools(params *ListIPPoolsParams, authInfo runtime.ClientAuthInfoWriter) (*ListIPPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIPPoolsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListIpPools",
		Method:             "GET",
		PathPattern:        "/pools/ip-pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIPPoolsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListIPPoolsOK), nil

}

/*
ReadIPBlock gets IP address block information

Returns information about the IP address block with specified id.
Information includes id, display_name, description & cidr.

*/
func (a *Client) ReadIPBlock(params *ReadIPBlockParams, authInfo runtime.ClientAuthInfoWriter) (*ReadIPBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadIPBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReadIpBlock",
		Method:             "GET",
		PathPattern:        "/pools/ip-blocks/{block-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadIPBlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReadIPBlockOK), nil

}

/*
ReadIPBlockSubnet gets the subnet within an IP block

Returns information about the subnet with specified id within a given
IP address block. Information includes display_name, description, cidr and
allocation_ranges.

*/
func (a *Client) ReadIPBlockSubnet(params *ReadIPBlockSubnetParams, authInfo runtime.ClientAuthInfoWriter) (*ReadIPBlockSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadIPBlockSubnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReadIpBlockSubnet",
		Method:             "GET",
		PathPattern:        "/pools/ip-subnets/{subnet-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadIPBlockSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReadIPBlockSubnetOK), nil

}

/*
ReadIPPool reads IP pool

Returns information about the specified IP address pool.
*/
func (a *Client) ReadIPPool(params *ReadIPPoolParams, authInfo runtime.ClientAuthInfoWriter) (*ReadIPPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadIPPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReadIpPool",
		Method:             "GET",
		PathPattern:        "/pools/ip-pools/{pool-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadIPPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReadIPPoolOK), nil

}

/*
UpdateIPBlock updates an IP address block

Modifies the IP address block with specifed id. display_name, description
and cidr are parameters that can be modified. If a new cidr is specified,
it should contain all existing subnets in the IP block. Returns a conflict error
if the IP address block cidr can not be modified due to the presence of
subnets that it contains. Eg: If the IP block contains a subnet 192.168.0.1/24
and we try to change the IP block cidr to 10.1.0.1/16, it results in a conflict.

*/
func (a *Client) UpdateIPBlock(params *UpdateIPBlockParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateIPBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIPBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateIpBlock",
		Method:             "PUT",
		PathPattern:        "/pools/ip-blocks/{block-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIPBlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateIPBlockOK), nil

}

/*
UpdateIPPool updates an IP pool

Modifies the specified IP address pool. Modifiable parameters include the
description, display_name, and all subnet information.

*/
func (a *Client) UpdateIPPool(params *UpdateIPPoolParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateIPPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIPPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateIpPool",
		Method:             "PUT",
		PathPattern:        "/pools/ip-pools/{pool-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIPPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateIPPoolOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
