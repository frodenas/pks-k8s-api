// Code generated by go-swagger; DO NOT EDIT.

package pool_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// AllocateOrReleaseFromIPBlockSubnetReader is a Reader for the AllocateOrReleaseFromIPBlockSubnet structure.
type AllocateOrReleaseFromIPBlockSubnetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AllocateOrReleaseFromIPBlockSubnetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAllocateOrReleaseFromIPBlockSubnetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAllocateOrReleaseFromIPBlockSubnetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAllocateOrReleaseFromIPBlockSubnetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAllocateOrReleaseFromIPBlockSubnetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewAllocateOrReleaseFromIPBlockSubnetConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewAllocateOrReleaseFromIPBlockSubnetPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewAllocateOrReleaseFromIPBlockSubnetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewAllocateOrReleaseFromIPBlockSubnetServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAllocateOrReleaseFromIPBlockSubnetOK creates a AllocateOrReleaseFromIPBlockSubnetOK with default headers values
func NewAllocateOrReleaseFromIPBlockSubnetOK() *AllocateOrReleaseFromIPBlockSubnetOK {
	return &AllocateOrReleaseFromIPBlockSubnetOK{}
}

/*AllocateOrReleaseFromIPBlockSubnetOK handles this case with default header values.

Success
*/
type AllocateOrReleaseFromIPBlockSubnetOK struct {
	Payload *models.AllocationIPAddress
}

func (o *AllocateOrReleaseFromIPBlockSubnetOK) Error() string {
	return fmt.Sprintf("[POST /pools/ip-subnets/{subnet-id}][%d] allocateOrReleaseFromIpBlockSubnetOK  %+v", 200, o.Payload)
}

func (o *AllocateOrReleaseFromIPBlockSubnetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AllocationIPAddress)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllocateOrReleaseFromIPBlockSubnetBadRequest creates a AllocateOrReleaseFromIPBlockSubnetBadRequest with default headers values
func NewAllocateOrReleaseFromIPBlockSubnetBadRequest() *AllocateOrReleaseFromIPBlockSubnetBadRequest {
	return &AllocateOrReleaseFromIPBlockSubnetBadRequest{}
}

/*AllocateOrReleaseFromIPBlockSubnetBadRequest handles this case with default header values.

Bad request
*/
type AllocateOrReleaseFromIPBlockSubnetBadRequest struct {
	Payload *models.APIError
}

func (o *AllocateOrReleaseFromIPBlockSubnetBadRequest) Error() string {
	return fmt.Sprintf("[POST /pools/ip-subnets/{subnet-id}][%d] allocateOrReleaseFromIpBlockSubnetBadRequest  %+v", 400, o.Payload)
}

func (o *AllocateOrReleaseFromIPBlockSubnetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllocateOrReleaseFromIPBlockSubnetForbidden creates a AllocateOrReleaseFromIPBlockSubnetForbidden with default headers values
func NewAllocateOrReleaseFromIPBlockSubnetForbidden() *AllocateOrReleaseFromIPBlockSubnetForbidden {
	return &AllocateOrReleaseFromIPBlockSubnetForbidden{}
}

/*AllocateOrReleaseFromIPBlockSubnetForbidden handles this case with default header values.

Operation forbidden
*/
type AllocateOrReleaseFromIPBlockSubnetForbidden struct {
	Payload *models.APIError
}

func (o *AllocateOrReleaseFromIPBlockSubnetForbidden) Error() string {
	return fmt.Sprintf("[POST /pools/ip-subnets/{subnet-id}][%d] allocateOrReleaseFromIpBlockSubnetForbidden  %+v", 403, o.Payload)
}

func (o *AllocateOrReleaseFromIPBlockSubnetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllocateOrReleaseFromIPBlockSubnetNotFound creates a AllocateOrReleaseFromIPBlockSubnetNotFound with default headers values
func NewAllocateOrReleaseFromIPBlockSubnetNotFound() *AllocateOrReleaseFromIPBlockSubnetNotFound {
	return &AllocateOrReleaseFromIPBlockSubnetNotFound{}
}

/*AllocateOrReleaseFromIPBlockSubnetNotFound handles this case with default header values.

Resource not found
*/
type AllocateOrReleaseFromIPBlockSubnetNotFound struct {
	Payload *models.APIError
}

func (o *AllocateOrReleaseFromIPBlockSubnetNotFound) Error() string {
	return fmt.Sprintf("[POST /pools/ip-subnets/{subnet-id}][%d] allocateOrReleaseFromIpBlockSubnetNotFound  %+v", 404, o.Payload)
}

func (o *AllocateOrReleaseFromIPBlockSubnetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllocateOrReleaseFromIPBlockSubnetConflict creates a AllocateOrReleaseFromIPBlockSubnetConflict with default headers values
func NewAllocateOrReleaseFromIPBlockSubnetConflict() *AllocateOrReleaseFromIPBlockSubnetConflict {
	return &AllocateOrReleaseFromIPBlockSubnetConflict{}
}

/*AllocateOrReleaseFromIPBlockSubnetConflict handles this case with default header values.

Resource conflict
*/
type AllocateOrReleaseFromIPBlockSubnetConflict struct {
	Payload *models.APIError
}

func (o *AllocateOrReleaseFromIPBlockSubnetConflict) Error() string {
	return fmt.Sprintf("[POST /pools/ip-subnets/{subnet-id}][%d] allocateOrReleaseFromIpBlockSubnetConflict  %+v", 409, o.Payload)
}

func (o *AllocateOrReleaseFromIPBlockSubnetConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllocateOrReleaseFromIPBlockSubnetPreconditionFailed creates a AllocateOrReleaseFromIPBlockSubnetPreconditionFailed with default headers values
func NewAllocateOrReleaseFromIPBlockSubnetPreconditionFailed() *AllocateOrReleaseFromIPBlockSubnetPreconditionFailed {
	return &AllocateOrReleaseFromIPBlockSubnetPreconditionFailed{}
}

/*AllocateOrReleaseFromIPBlockSubnetPreconditionFailed handles this case with default header values.

Precondition failed
*/
type AllocateOrReleaseFromIPBlockSubnetPreconditionFailed struct {
	Payload *models.APIError
}

func (o *AllocateOrReleaseFromIPBlockSubnetPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /pools/ip-subnets/{subnet-id}][%d] allocateOrReleaseFromIpBlockSubnetPreconditionFailed  %+v", 412, o.Payload)
}

func (o *AllocateOrReleaseFromIPBlockSubnetPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllocateOrReleaseFromIPBlockSubnetInternalServerError creates a AllocateOrReleaseFromIPBlockSubnetInternalServerError with default headers values
func NewAllocateOrReleaseFromIPBlockSubnetInternalServerError() *AllocateOrReleaseFromIPBlockSubnetInternalServerError {
	return &AllocateOrReleaseFromIPBlockSubnetInternalServerError{}
}

/*AllocateOrReleaseFromIPBlockSubnetInternalServerError handles this case with default header values.

Internal server error
*/
type AllocateOrReleaseFromIPBlockSubnetInternalServerError struct {
	Payload *models.APIError
}

func (o *AllocateOrReleaseFromIPBlockSubnetInternalServerError) Error() string {
	return fmt.Sprintf("[POST /pools/ip-subnets/{subnet-id}][%d] allocateOrReleaseFromIpBlockSubnetInternalServerError  %+v", 500, o.Payload)
}

func (o *AllocateOrReleaseFromIPBlockSubnetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllocateOrReleaseFromIPBlockSubnetServiceUnavailable creates a AllocateOrReleaseFromIPBlockSubnetServiceUnavailable with default headers values
func NewAllocateOrReleaseFromIPBlockSubnetServiceUnavailable() *AllocateOrReleaseFromIPBlockSubnetServiceUnavailable {
	return &AllocateOrReleaseFromIPBlockSubnetServiceUnavailable{}
}

/*AllocateOrReleaseFromIPBlockSubnetServiceUnavailable handles this case with default header values.

Service unavailable
*/
type AllocateOrReleaseFromIPBlockSubnetServiceUnavailable struct {
	Payload *models.APIError
}

func (o *AllocateOrReleaseFromIPBlockSubnetServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /pools/ip-subnets/{subnet-id}][%d] allocateOrReleaseFromIpBlockSubnetServiceUnavailable  %+v", 503, o.Payload)
}

func (o *AllocateOrReleaseFromIPBlockSubnetServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
