// Code generated by go-swagger; DO NOT EDIT.

package pool_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// NewAllocateOrReleaseFromIPBlockSubnetParams creates a new AllocateOrReleaseFromIPBlockSubnetParams object
// with the default values initialized.
func NewAllocateOrReleaseFromIPBlockSubnetParams() *AllocateOrReleaseFromIPBlockSubnetParams {
	var ()
	return &AllocateOrReleaseFromIPBlockSubnetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAllocateOrReleaseFromIPBlockSubnetParamsWithTimeout creates a new AllocateOrReleaseFromIPBlockSubnetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAllocateOrReleaseFromIPBlockSubnetParamsWithTimeout(timeout time.Duration) *AllocateOrReleaseFromIPBlockSubnetParams {
	var ()
	return &AllocateOrReleaseFromIPBlockSubnetParams{

		timeout: timeout,
	}
}

// NewAllocateOrReleaseFromIPBlockSubnetParamsWithContext creates a new AllocateOrReleaseFromIPBlockSubnetParams object
// with the default values initialized, and the ability to set a context for a request
func NewAllocateOrReleaseFromIPBlockSubnetParamsWithContext(ctx context.Context) *AllocateOrReleaseFromIPBlockSubnetParams {
	var ()
	return &AllocateOrReleaseFromIPBlockSubnetParams{

		Context: ctx,
	}
}

// NewAllocateOrReleaseFromIPBlockSubnetParamsWithHTTPClient creates a new AllocateOrReleaseFromIPBlockSubnetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAllocateOrReleaseFromIPBlockSubnetParamsWithHTTPClient(client *http.Client) *AllocateOrReleaseFromIPBlockSubnetParams {
	var ()
	return &AllocateOrReleaseFromIPBlockSubnetParams{
		HTTPClient: client,
	}
}

/*AllocateOrReleaseFromIPBlockSubnetParams contains all the parameters to send to the API endpoint
for the allocate or release from Ip block subnet operation typically these are written to a http.Request
*/
type AllocateOrReleaseFromIPBlockSubnetParams struct {

	/*AllocationIPAddress*/
	AllocationIPAddress *models.AllocationIPAddress
	/*Action
	  Specifies allocate or release action

	*/
	Action string
	/*SubnetID
	  IP subnet id

	*/
	SubnetID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the allocate or release from Ip block subnet params
func (o *AllocateOrReleaseFromIPBlockSubnetParams) WithTimeout(timeout time.Duration) *AllocateOrReleaseFromIPBlockSubnetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the allocate or release from Ip block subnet params
func (o *AllocateOrReleaseFromIPBlockSubnetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the allocate or release from Ip block subnet params
func (o *AllocateOrReleaseFromIPBlockSubnetParams) WithContext(ctx context.Context) *AllocateOrReleaseFromIPBlockSubnetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the allocate or release from Ip block subnet params
func (o *AllocateOrReleaseFromIPBlockSubnetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the allocate or release from Ip block subnet params
func (o *AllocateOrReleaseFromIPBlockSubnetParams) WithHTTPClient(client *http.Client) *AllocateOrReleaseFromIPBlockSubnetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the allocate or release from Ip block subnet params
func (o *AllocateOrReleaseFromIPBlockSubnetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllocationIPAddress adds the allocationIPAddress to the allocate or release from Ip block subnet params
func (o *AllocateOrReleaseFromIPBlockSubnetParams) WithAllocationIPAddress(allocationIPAddress *models.AllocationIPAddress) *AllocateOrReleaseFromIPBlockSubnetParams {
	o.SetAllocationIPAddress(allocationIPAddress)
	return o
}

// SetAllocationIPAddress adds the allocationIpAddress to the allocate or release from Ip block subnet params
func (o *AllocateOrReleaseFromIPBlockSubnetParams) SetAllocationIPAddress(allocationIPAddress *models.AllocationIPAddress) {
	o.AllocationIPAddress = allocationIPAddress
}

// WithAction adds the action to the allocate or release from Ip block subnet params
func (o *AllocateOrReleaseFromIPBlockSubnetParams) WithAction(action string) *AllocateOrReleaseFromIPBlockSubnetParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the allocate or release from Ip block subnet params
func (o *AllocateOrReleaseFromIPBlockSubnetParams) SetAction(action string) {
	o.Action = action
}

// WithSubnetID adds the subnetID to the allocate or release from Ip block subnet params
func (o *AllocateOrReleaseFromIPBlockSubnetParams) WithSubnetID(subnetID string) *AllocateOrReleaseFromIPBlockSubnetParams {
	o.SetSubnetID(subnetID)
	return o
}

// SetSubnetID adds the subnetId to the allocate or release from Ip block subnet params
func (o *AllocateOrReleaseFromIPBlockSubnetParams) SetSubnetID(subnetID string) {
	o.SubnetID = subnetID
}

// WriteToRequest writes these params to a swagger request
func (o *AllocateOrReleaseFromIPBlockSubnetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllocationIPAddress == nil {
		o.AllocationIPAddress = new(models.AllocationIPAddress)
	}

	if err := r.SetBodyParam(o.AllocationIPAddress); err != nil {
		return err
	}

	// query param action
	qrAction := o.Action
	qAction := qrAction
	if qAction != "" {
		if err := r.SetQueryParam("action", qAction); err != nil {
			return err
		}
	}

	// path param subnet-id
	if err := r.SetPathParam("subnet-id", o.SubnetID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
