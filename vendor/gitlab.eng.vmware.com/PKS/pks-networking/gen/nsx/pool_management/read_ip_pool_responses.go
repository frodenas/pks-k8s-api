// Code generated by go-swagger; DO NOT EDIT.

package pool_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// ReadIPPoolReader is a Reader for the ReadIPPool structure.
type ReadIPPoolReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadIPPoolReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewReadIPPoolOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewReadIPPoolBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewReadIPPoolForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReadIPPoolNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewReadIPPoolPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewReadIPPoolInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewReadIPPoolServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadIPPoolOK creates a ReadIPPoolOK with default headers values
func NewReadIPPoolOK() *ReadIPPoolOK {
	return &ReadIPPoolOK{}
}

/*ReadIPPoolOK handles this case with default header values.

Success
*/
type ReadIPPoolOK struct {
	Payload *models.IPPool
}

func (o *ReadIPPoolOK) Error() string {
	return fmt.Sprintf("[GET /pools/ip-pools/{pool-id}][%d] readIpPoolOK  %+v", 200, o.Payload)
}

func (o *ReadIPPoolOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IPPool)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIPPoolBadRequest creates a ReadIPPoolBadRequest with default headers values
func NewReadIPPoolBadRequest() *ReadIPPoolBadRequest {
	return &ReadIPPoolBadRequest{}
}

/*ReadIPPoolBadRequest handles this case with default header values.

Bad request
*/
type ReadIPPoolBadRequest struct {
	Payload *models.APIError
}

func (o *ReadIPPoolBadRequest) Error() string {
	return fmt.Sprintf("[GET /pools/ip-pools/{pool-id}][%d] readIpPoolBadRequest  %+v", 400, o.Payload)
}

func (o *ReadIPPoolBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIPPoolForbidden creates a ReadIPPoolForbidden with default headers values
func NewReadIPPoolForbidden() *ReadIPPoolForbidden {
	return &ReadIPPoolForbidden{}
}

/*ReadIPPoolForbidden handles this case with default header values.

Operation forbidden
*/
type ReadIPPoolForbidden struct {
	Payload *models.APIError
}

func (o *ReadIPPoolForbidden) Error() string {
	return fmt.Sprintf("[GET /pools/ip-pools/{pool-id}][%d] readIpPoolForbidden  %+v", 403, o.Payload)
}

func (o *ReadIPPoolForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIPPoolNotFound creates a ReadIPPoolNotFound with default headers values
func NewReadIPPoolNotFound() *ReadIPPoolNotFound {
	return &ReadIPPoolNotFound{}
}

/*ReadIPPoolNotFound handles this case with default header values.

Resource not found
*/
type ReadIPPoolNotFound struct {
	Payload *models.APIError
}

func (o *ReadIPPoolNotFound) Error() string {
	return fmt.Sprintf("[GET /pools/ip-pools/{pool-id}][%d] readIpPoolNotFound  %+v", 404, o.Payload)
}

func (o *ReadIPPoolNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIPPoolPreconditionFailed creates a ReadIPPoolPreconditionFailed with default headers values
func NewReadIPPoolPreconditionFailed() *ReadIPPoolPreconditionFailed {
	return &ReadIPPoolPreconditionFailed{}
}

/*ReadIPPoolPreconditionFailed handles this case with default header values.

Precondition failed
*/
type ReadIPPoolPreconditionFailed struct {
	Payload *models.APIError
}

func (o *ReadIPPoolPreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /pools/ip-pools/{pool-id}][%d] readIpPoolPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ReadIPPoolPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIPPoolInternalServerError creates a ReadIPPoolInternalServerError with default headers values
func NewReadIPPoolInternalServerError() *ReadIPPoolInternalServerError {
	return &ReadIPPoolInternalServerError{}
}

/*ReadIPPoolInternalServerError handles this case with default header values.

Internal server error
*/
type ReadIPPoolInternalServerError struct {
	Payload *models.APIError
}

func (o *ReadIPPoolInternalServerError) Error() string {
	return fmt.Sprintf("[GET /pools/ip-pools/{pool-id}][%d] readIpPoolInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadIPPoolInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIPPoolServiceUnavailable creates a ReadIPPoolServiceUnavailable with default headers values
func NewReadIPPoolServiceUnavailable() *ReadIPPoolServiceUnavailable {
	return &ReadIPPoolServiceUnavailable{}
}

/*ReadIPPoolServiceUnavailable handles this case with default header values.

Service unavailable
*/
type ReadIPPoolServiceUnavailable struct {
	Payload *models.APIError
}

func (o *ReadIPPoolServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /pools/ip-pools/{pool-id}][%d] readIpPoolServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ReadIPPoolServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
