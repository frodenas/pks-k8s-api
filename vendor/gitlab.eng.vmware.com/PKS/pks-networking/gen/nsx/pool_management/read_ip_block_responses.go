// Code generated by go-swagger; DO NOT EDIT.

package pool_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// ReadIPBlockReader is a Reader for the ReadIPBlock structure.
type ReadIPBlockReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadIPBlockReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewReadIPBlockOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewReadIPBlockBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewReadIPBlockForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReadIPBlockNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewReadIPBlockPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewReadIPBlockInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewReadIPBlockServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadIPBlockOK creates a ReadIPBlockOK with default headers values
func NewReadIPBlockOK() *ReadIPBlockOK {
	return &ReadIPBlockOK{}
}

/*ReadIPBlockOK handles this case with default header values.

Success
*/
type ReadIPBlockOK struct {
	Payload *models.IPBlock
}

func (o *ReadIPBlockOK) Error() string {
	return fmt.Sprintf("[GET /pools/ip-blocks/{block-id}][%d] readIpBlockOK  %+v", 200, o.Payload)
}

func (o *ReadIPBlockOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IPBlock)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIPBlockBadRequest creates a ReadIPBlockBadRequest with default headers values
func NewReadIPBlockBadRequest() *ReadIPBlockBadRequest {
	return &ReadIPBlockBadRequest{}
}

/*ReadIPBlockBadRequest handles this case with default header values.

Bad request
*/
type ReadIPBlockBadRequest struct {
	Payload *models.APIError
}

func (o *ReadIPBlockBadRequest) Error() string {
	return fmt.Sprintf("[GET /pools/ip-blocks/{block-id}][%d] readIpBlockBadRequest  %+v", 400, o.Payload)
}

func (o *ReadIPBlockBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIPBlockForbidden creates a ReadIPBlockForbidden with default headers values
func NewReadIPBlockForbidden() *ReadIPBlockForbidden {
	return &ReadIPBlockForbidden{}
}

/*ReadIPBlockForbidden handles this case with default header values.

Operation forbidden
*/
type ReadIPBlockForbidden struct {
	Payload *models.APIError
}

func (o *ReadIPBlockForbidden) Error() string {
	return fmt.Sprintf("[GET /pools/ip-blocks/{block-id}][%d] readIpBlockForbidden  %+v", 403, o.Payload)
}

func (o *ReadIPBlockForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIPBlockNotFound creates a ReadIPBlockNotFound with default headers values
func NewReadIPBlockNotFound() *ReadIPBlockNotFound {
	return &ReadIPBlockNotFound{}
}

/*ReadIPBlockNotFound handles this case with default header values.

Resource not found
*/
type ReadIPBlockNotFound struct {
	Payload *models.APIError
}

func (o *ReadIPBlockNotFound) Error() string {
	return fmt.Sprintf("[GET /pools/ip-blocks/{block-id}][%d] readIpBlockNotFound  %+v", 404, o.Payload)
}

func (o *ReadIPBlockNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIPBlockPreconditionFailed creates a ReadIPBlockPreconditionFailed with default headers values
func NewReadIPBlockPreconditionFailed() *ReadIPBlockPreconditionFailed {
	return &ReadIPBlockPreconditionFailed{}
}

/*ReadIPBlockPreconditionFailed handles this case with default header values.

Precondition failed
*/
type ReadIPBlockPreconditionFailed struct {
	Payload *models.APIError
}

func (o *ReadIPBlockPreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /pools/ip-blocks/{block-id}][%d] readIpBlockPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ReadIPBlockPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIPBlockInternalServerError creates a ReadIPBlockInternalServerError with default headers values
func NewReadIPBlockInternalServerError() *ReadIPBlockInternalServerError {
	return &ReadIPBlockInternalServerError{}
}

/*ReadIPBlockInternalServerError handles this case with default header values.

Internal server error
*/
type ReadIPBlockInternalServerError struct {
	Payload *models.APIError
}

func (o *ReadIPBlockInternalServerError) Error() string {
	return fmt.Sprintf("[GET /pools/ip-blocks/{block-id}][%d] readIpBlockInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadIPBlockInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIPBlockServiceUnavailable creates a ReadIPBlockServiceUnavailable with default headers values
func NewReadIPBlockServiceUnavailable() *ReadIPBlockServiceUnavailable {
	return &ReadIPBlockServiceUnavailable{}
}

/*ReadIPBlockServiceUnavailable handles this case with default header values.

Service unavailable
*/
type ReadIPBlockServiceUnavailable struct {
	Payload *models.APIError
}

func (o *ReadIPBlockServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /pools/ip-blocks/{block-id}][%d] readIpBlockServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ReadIPBlockServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
