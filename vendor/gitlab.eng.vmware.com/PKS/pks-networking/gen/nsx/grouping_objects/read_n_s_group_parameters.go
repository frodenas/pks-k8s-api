// Code generated by go-swagger; DO NOT EDIT.

package grouping_objects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewReadNSGroupParams creates a new ReadNSGroupParams object
// with the default values initialized.
func NewReadNSGroupParams() *ReadNSGroupParams {
	var (
		populateReferencesDefault = bool(false)
	)
	return &ReadNSGroupParams{
		PopulateReferences: &populateReferencesDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewReadNSGroupParamsWithTimeout creates a new ReadNSGroupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewReadNSGroupParamsWithTimeout(timeout time.Duration) *ReadNSGroupParams {
	var (
		populateReferencesDefault = bool(false)
	)
	return &ReadNSGroupParams{
		PopulateReferences: &populateReferencesDefault,

		timeout: timeout,
	}
}

// NewReadNSGroupParamsWithContext creates a new ReadNSGroupParams object
// with the default values initialized, and the ability to set a context for a request
func NewReadNSGroupParamsWithContext(ctx context.Context) *ReadNSGroupParams {
	var (
		populateReferencesDefault = bool(false)
	)
	return &ReadNSGroupParams{
		PopulateReferences: &populateReferencesDefault,

		Context: ctx,
	}
}

// NewReadNSGroupParamsWithHTTPClient creates a new ReadNSGroupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewReadNSGroupParamsWithHTTPClient(client *http.Client) *ReadNSGroupParams {
	var (
		populateReferencesDefault = bool(false)
	)
	return &ReadNSGroupParams{
		PopulateReferences: &populateReferencesDefault,
		HTTPClient:         client,
	}
}

/*ReadNSGroupParams contains all the parameters to send to the API endpoint
for the read n s group operation typically these are written to a http.Request
*/
type ReadNSGroupParams struct {

	/*NsGroupID
	  NSGroup Id

	*/
	NsGroupID string
	/*PopulateReferences
	  Populate metadata of resource referenced by NSGroupExpressions


	*/
	PopulateReferences *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the read n s group params
func (o *ReadNSGroupParams) WithTimeout(timeout time.Duration) *ReadNSGroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the read n s group params
func (o *ReadNSGroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the read n s group params
func (o *ReadNSGroupParams) WithContext(ctx context.Context) *ReadNSGroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the read n s group params
func (o *ReadNSGroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the read n s group params
func (o *ReadNSGroupParams) WithHTTPClient(client *http.Client) *ReadNSGroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the read n s group params
func (o *ReadNSGroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNsGroupID adds the nsGroupID to the read n s group params
func (o *ReadNSGroupParams) WithNsGroupID(nsGroupID string) *ReadNSGroupParams {
	o.SetNsGroupID(nsGroupID)
	return o
}

// SetNsGroupID adds the nsGroupId to the read n s group params
func (o *ReadNSGroupParams) SetNsGroupID(nsGroupID string) {
	o.NsGroupID = nsGroupID
}

// WithPopulateReferences adds the populateReferences to the read n s group params
func (o *ReadNSGroupParams) WithPopulateReferences(populateReferences *bool) *ReadNSGroupParams {
	o.SetPopulateReferences(populateReferences)
	return o
}

// SetPopulateReferences adds the populateReferences to the read n s group params
func (o *ReadNSGroupParams) SetPopulateReferences(populateReferences *bool) {
	o.PopulateReferences = populateReferences
}

// WriteToRequest writes these params to a swagger request
func (o *ReadNSGroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ns-group-id
	if err := r.SetPathParam("ns-group-id", o.NsGroupID); err != nil {
		return err
	}

	if o.PopulateReferences != nil {

		// query param populate_references
		var qrPopulateReferences bool
		if o.PopulateReferences != nil {
			qrPopulateReferences = *o.PopulateReferences
		}
		qPopulateReferences := swag.FormatBool(qrPopulateReferences)
		if qPopulateReferences != "" {
			if err := r.SetQueryParam("populate_references", qPopulateReferences); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
