// Code generated by go-swagger; DO NOT EDIT.

package grouping_objects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// ListNSGroupsReader is a Reader for the ListNSGroups structure.
type ListNSGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListNSGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListNSGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListNSGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListNSGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListNSGroupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewListNSGroupsPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListNSGroupsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewListNSGroupsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListNSGroupsOK creates a ListNSGroupsOK with default headers values
func NewListNSGroupsOK() *ListNSGroupsOK {
	return &ListNSGroupsOK{}
}

/*ListNSGroupsOK handles this case with default header values.

OK
*/
type ListNSGroupsOK struct {
	Payload *models.NSGroupListResult
}

func (o *ListNSGroupsOK) Error() string {
	return fmt.Sprintf("[GET /ns-groups][%d] listNSGroupsOK  %+v", 200, o.Payload)
}

func (o *ListNSGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NSGroupListResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNSGroupsBadRequest creates a ListNSGroupsBadRequest with default headers values
func NewListNSGroupsBadRequest() *ListNSGroupsBadRequest {
	return &ListNSGroupsBadRequest{}
}

/*ListNSGroupsBadRequest handles this case with default header values.

Bad request
*/
type ListNSGroupsBadRequest struct {
	Payload *models.APIError
}

func (o *ListNSGroupsBadRequest) Error() string {
	return fmt.Sprintf("[GET /ns-groups][%d] listNSGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *ListNSGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNSGroupsForbidden creates a ListNSGroupsForbidden with default headers values
func NewListNSGroupsForbidden() *ListNSGroupsForbidden {
	return &ListNSGroupsForbidden{}
}

/*ListNSGroupsForbidden handles this case with default header values.

Operation forbidden
*/
type ListNSGroupsForbidden struct {
	Payload *models.APIError
}

func (o *ListNSGroupsForbidden) Error() string {
	return fmt.Sprintf("[GET /ns-groups][%d] listNSGroupsForbidden  %+v", 403, o.Payload)
}

func (o *ListNSGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNSGroupsNotFound creates a ListNSGroupsNotFound with default headers values
func NewListNSGroupsNotFound() *ListNSGroupsNotFound {
	return &ListNSGroupsNotFound{}
}

/*ListNSGroupsNotFound handles this case with default header values.

Resource not found
*/
type ListNSGroupsNotFound struct {
	Payload *models.APIError
}

func (o *ListNSGroupsNotFound) Error() string {
	return fmt.Sprintf("[GET /ns-groups][%d] listNSGroupsNotFound  %+v", 404, o.Payload)
}

func (o *ListNSGroupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNSGroupsPreconditionFailed creates a ListNSGroupsPreconditionFailed with default headers values
func NewListNSGroupsPreconditionFailed() *ListNSGroupsPreconditionFailed {
	return &ListNSGroupsPreconditionFailed{}
}

/*ListNSGroupsPreconditionFailed handles this case with default header values.

Precondition failed
*/
type ListNSGroupsPreconditionFailed struct {
	Payload *models.APIError
}

func (o *ListNSGroupsPreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /ns-groups][%d] listNSGroupsPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ListNSGroupsPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNSGroupsInternalServerError creates a ListNSGroupsInternalServerError with default headers values
func NewListNSGroupsInternalServerError() *ListNSGroupsInternalServerError {
	return &ListNSGroupsInternalServerError{}
}

/*ListNSGroupsInternalServerError handles this case with default header values.

Internal server error
*/
type ListNSGroupsInternalServerError struct {
	Payload *models.APIError
}

func (o *ListNSGroupsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ns-groups][%d] listNSGroupsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListNSGroupsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNSGroupsServiceUnavailable creates a ListNSGroupsServiceUnavailable with default headers values
func NewListNSGroupsServiceUnavailable() *ListNSGroupsServiceUnavailable {
	return &ListNSGroupsServiceUnavailable{}
}

/*ListNSGroupsServiceUnavailable handles this case with default header values.

Service unavailable
*/
type ListNSGroupsServiceUnavailable struct {
	Payload *models.APIError
}

func (o *ListNSGroupsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /ns-groups][%d] listNSGroupsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListNSGroupsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
