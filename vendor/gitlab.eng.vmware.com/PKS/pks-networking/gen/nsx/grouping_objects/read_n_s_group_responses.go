// Code generated by go-swagger; DO NOT EDIT.

package grouping_objects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// ReadNSGroupReader is a Reader for the ReadNSGroup structure.
type ReadNSGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadNSGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewReadNSGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewReadNSGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewReadNSGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReadNSGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewReadNSGroupPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewReadNSGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewReadNSGroupServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadNSGroupOK creates a ReadNSGroupOK with default headers values
func NewReadNSGroupOK() *ReadNSGroupOK {
	return &ReadNSGroupOK{}
}

/*ReadNSGroupOK handles this case with default header values.

OK
*/
type ReadNSGroupOK struct {
	Payload *models.NSGroup
}

func (o *ReadNSGroupOK) Error() string {
	return fmt.Sprintf("[GET /ns-groups/{ns-group-id}][%d] readNSGroupOK  %+v", 200, o.Payload)
}

func (o *ReadNSGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NSGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadNSGroupBadRequest creates a ReadNSGroupBadRequest with default headers values
func NewReadNSGroupBadRequest() *ReadNSGroupBadRequest {
	return &ReadNSGroupBadRequest{}
}

/*ReadNSGroupBadRequest handles this case with default header values.

Bad request
*/
type ReadNSGroupBadRequest struct {
	Payload *models.APIError
}

func (o *ReadNSGroupBadRequest) Error() string {
	return fmt.Sprintf("[GET /ns-groups/{ns-group-id}][%d] readNSGroupBadRequest  %+v", 400, o.Payload)
}

func (o *ReadNSGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadNSGroupForbidden creates a ReadNSGroupForbidden with default headers values
func NewReadNSGroupForbidden() *ReadNSGroupForbidden {
	return &ReadNSGroupForbidden{}
}

/*ReadNSGroupForbidden handles this case with default header values.

Operation forbidden
*/
type ReadNSGroupForbidden struct {
	Payload *models.APIError
}

func (o *ReadNSGroupForbidden) Error() string {
	return fmt.Sprintf("[GET /ns-groups/{ns-group-id}][%d] readNSGroupForbidden  %+v", 403, o.Payload)
}

func (o *ReadNSGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadNSGroupNotFound creates a ReadNSGroupNotFound with default headers values
func NewReadNSGroupNotFound() *ReadNSGroupNotFound {
	return &ReadNSGroupNotFound{}
}

/*ReadNSGroupNotFound handles this case with default header values.

Not Found
*/
type ReadNSGroupNotFound struct {
}

func (o *ReadNSGroupNotFound) Error() string {
	return fmt.Sprintf("[GET /ns-groups/{ns-group-id}][%d] readNSGroupNotFound ", 404)
}

func (o *ReadNSGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReadNSGroupPreconditionFailed creates a ReadNSGroupPreconditionFailed with default headers values
func NewReadNSGroupPreconditionFailed() *ReadNSGroupPreconditionFailed {
	return &ReadNSGroupPreconditionFailed{}
}

/*ReadNSGroupPreconditionFailed handles this case with default header values.

Precondition failed
*/
type ReadNSGroupPreconditionFailed struct {
	Payload *models.APIError
}

func (o *ReadNSGroupPreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /ns-groups/{ns-group-id}][%d] readNSGroupPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ReadNSGroupPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadNSGroupInternalServerError creates a ReadNSGroupInternalServerError with default headers values
func NewReadNSGroupInternalServerError() *ReadNSGroupInternalServerError {
	return &ReadNSGroupInternalServerError{}
}

/*ReadNSGroupInternalServerError handles this case with default header values.

Internal server error
*/
type ReadNSGroupInternalServerError struct {
	Payload *models.APIError
}

func (o *ReadNSGroupInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ns-groups/{ns-group-id}][%d] readNSGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadNSGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadNSGroupServiceUnavailable creates a ReadNSGroupServiceUnavailable with default headers values
func NewReadNSGroupServiceUnavailable() *ReadNSGroupServiceUnavailable {
	return &ReadNSGroupServiceUnavailable{}
}

/*ReadNSGroupServiceUnavailable handles this case with default header values.

Service unavailable
*/
type ReadNSGroupServiceUnavailable struct {
	Payload *models.APIError
}

func (o *ReadNSGroupServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /ns-groups/{ns-group-id}][%d] readNSGroupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ReadNSGroupServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
