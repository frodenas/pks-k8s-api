// Code generated by go-swagger; DO NOT EDIT.

package grouping_objects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListNSGroupsParams creates a new ListNSGroupsParams object
// with the default values initialized.
func NewListNSGroupsParams() *ListNSGroupsParams {
	var (
		pageSizeDefault           = int64(1000)
		populateReferencesDefault = bool(false)
	)
	return &ListNSGroupsParams{
		PageSize:           &pageSizeDefault,
		PopulateReferences: &populateReferencesDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListNSGroupsParamsWithTimeout creates a new ListNSGroupsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListNSGroupsParamsWithTimeout(timeout time.Duration) *ListNSGroupsParams {
	var (
		pageSizeDefault           = int64(1000)
		populateReferencesDefault = bool(false)
	)
	return &ListNSGroupsParams{
		PageSize:           &pageSizeDefault,
		PopulateReferences: &populateReferencesDefault,

		timeout: timeout,
	}
}

// NewListNSGroupsParamsWithContext creates a new ListNSGroupsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListNSGroupsParamsWithContext(ctx context.Context) *ListNSGroupsParams {
	var (
		pageSizeDefault           = int64(1000)
		populateReferencesDefault = bool(false)
	)
	return &ListNSGroupsParams{
		PageSize:           &pageSizeDefault,
		PopulateReferences: &populateReferencesDefault,

		Context: ctx,
	}
}

// NewListNSGroupsParamsWithHTTPClient creates a new ListNSGroupsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListNSGroupsParamsWithHTTPClient(client *http.Client) *ListNSGroupsParams {
	var (
		pageSizeDefault           = int64(1000)
		populateReferencesDefault = bool(false)
	)
	return &ListNSGroupsParams{
		PageSize:           &pageSizeDefault,
		PopulateReferences: &populateReferencesDefault,
		HTTPClient:         client,
	}
}

/*ListNSGroupsParams contains all the parameters to send to the API endpoint
for the list n s groups operation typically these are written to a http.Request
*/
type ListNSGroupsParams struct {

	/*Cursor
	  Opaque cursor to be used for getting next page of records (supplied by current result page)

	*/
	Cursor *string
	/*IncludedFields
	  Comma separated list of fields that should be included to result of query

	*/
	IncludedFields *string
	/*MemberTypes
	  Specify member types to filter corresponding NSGroups


	*/
	MemberTypes *string
	/*PageSize
	  Maximum number of results to return in this page (server may return fewer)

	*/
	PageSize *int64
	/*PopulateReferences
	  Populate metadata of resource referenced by NSGroupExpressions


	*/
	PopulateReferences *bool
	/*SortAscending*/
	SortAscending *bool
	/*SortBy
	  Field by which records are sorted

	*/
	SortBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list n s groups params
func (o *ListNSGroupsParams) WithTimeout(timeout time.Duration) *ListNSGroupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list n s groups params
func (o *ListNSGroupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list n s groups params
func (o *ListNSGroupsParams) WithContext(ctx context.Context) *ListNSGroupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list n s groups params
func (o *ListNSGroupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list n s groups params
func (o *ListNSGroupsParams) WithHTTPClient(client *http.Client) *ListNSGroupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list n s groups params
func (o *ListNSGroupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursor adds the cursor to the list n s groups params
func (o *ListNSGroupsParams) WithCursor(cursor *string) *ListNSGroupsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the list n s groups params
func (o *ListNSGroupsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithIncludedFields adds the includedFields to the list n s groups params
func (o *ListNSGroupsParams) WithIncludedFields(includedFields *string) *ListNSGroupsParams {
	o.SetIncludedFields(includedFields)
	return o
}

// SetIncludedFields adds the includedFields to the list n s groups params
func (o *ListNSGroupsParams) SetIncludedFields(includedFields *string) {
	o.IncludedFields = includedFields
}

// WithMemberTypes adds the memberTypes to the list n s groups params
func (o *ListNSGroupsParams) WithMemberTypes(memberTypes *string) *ListNSGroupsParams {
	o.SetMemberTypes(memberTypes)
	return o
}

// SetMemberTypes adds the memberTypes to the list n s groups params
func (o *ListNSGroupsParams) SetMemberTypes(memberTypes *string) {
	o.MemberTypes = memberTypes
}

// WithPageSize adds the pageSize to the list n s groups params
func (o *ListNSGroupsParams) WithPageSize(pageSize *int64) *ListNSGroupsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list n s groups params
func (o *ListNSGroupsParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithPopulateReferences adds the populateReferences to the list n s groups params
func (o *ListNSGroupsParams) WithPopulateReferences(populateReferences *bool) *ListNSGroupsParams {
	o.SetPopulateReferences(populateReferences)
	return o
}

// SetPopulateReferences adds the populateReferences to the list n s groups params
func (o *ListNSGroupsParams) SetPopulateReferences(populateReferences *bool) {
	o.PopulateReferences = populateReferences
}

// WithSortAscending adds the sortAscending to the list n s groups params
func (o *ListNSGroupsParams) WithSortAscending(sortAscending *bool) *ListNSGroupsParams {
	o.SetSortAscending(sortAscending)
	return o
}

// SetSortAscending adds the sortAscending to the list n s groups params
func (o *ListNSGroupsParams) SetSortAscending(sortAscending *bool) {
	o.SortAscending = sortAscending
}

// WithSortBy adds the sortBy to the list n s groups params
func (o *ListNSGroupsParams) WithSortBy(sortBy *string) *ListNSGroupsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the list n s groups params
func (o *ListNSGroupsParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WriteToRequest writes these params to a swagger request
func (o *ListNSGroupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string
		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {
			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}

	}

	if o.IncludedFields != nil {

		// query param included_fields
		var qrIncludedFields string
		if o.IncludedFields != nil {
			qrIncludedFields = *o.IncludedFields
		}
		qIncludedFields := qrIncludedFields
		if qIncludedFields != "" {
			if err := r.SetQueryParam("included_fields", qIncludedFields); err != nil {
				return err
			}
		}

	}

	if o.MemberTypes != nil {

		// query param member_types
		var qrMemberTypes string
		if o.MemberTypes != nil {
			qrMemberTypes = *o.MemberTypes
		}
		qMemberTypes := qrMemberTypes
		if qMemberTypes != "" {
			if err := r.SetQueryParam("member_types", qMemberTypes); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.PopulateReferences != nil {

		// query param populate_references
		var qrPopulateReferences bool
		if o.PopulateReferences != nil {
			qrPopulateReferences = *o.PopulateReferences
		}
		qPopulateReferences := swag.FormatBool(qrPopulateReferences)
		if qPopulateReferences != "" {
			if err := r.SetQueryParam("populate_references", qPopulateReferences); err != nil {
				return err
			}
		}

	}

	if o.SortAscending != nil {

		// query param sort_ascending
		var qrSortAscending bool
		if o.SortAscending != nil {
			qrSortAscending = *o.SortAscending
		}
		qSortAscending := swag.FormatBool(qrSortAscending)
		if qSortAscending != "" {
			if err := r.SetQueryParam("sort_ascending", qSortAscending); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sort_by
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sort_by", qSortBy); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
