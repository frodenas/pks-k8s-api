// Code generated by go-swagger; DO NOT EDIT.

package grouping_objects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// NewCreateNSGroupParams creates a new CreateNSGroupParams object
// with the default values initialized.
func NewCreateNSGroupParams() *CreateNSGroupParams {
	var ()
	return &CreateNSGroupParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateNSGroupParamsWithTimeout creates a new CreateNSGroupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateNSGroupParamsWithTimeout(timeout time.Duration) *CreateNSGroupParams {
	var ()
	return &CreateNSGroupParams{

		timeout: timeout,
	}
}

// NewCreateNSGroupParamsWithContext creates a new CreateNSGroupParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateNSGroupParamsWithContext(ctx context.Context) *CreateNSGroupParams {
	var ()
	return &CreateNSGroupParams{

		Context: ctx,
	}
}

// NewCreateNSGroupParamsWithHTTPClient creates a new CreateNSGroupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateNSGroupParamsWithHTTPClient(client *http.Client) *CreateNSGroupParams {
	var ()
	return &CreateNSGroupParams{
		HTTPClient: client,
	}
}

/*CreateNSGroupParams contains all the parameters to send to the API endpoint
for the create n s group operation typically these are written to a http.Request
*/
type CreateNSGroupParams struct {

	/*NSGroup*/
	NSGroup *models.NSGroup

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create n s group params
func (o *CreateNSGroupParams) WithTimeout(timeout time.Duration) *CreateNSGroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create n s group params
func (o *CreateNSGroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create n s group params
func (o *CreateNSGroupParams) WithContext(ctx context.Context) *CreateNSGroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create n s group params
func (o *CreateNSGroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create n s group params
func (o *CreateNSGroupParams) WithHTTPClient(client *http.Client) *CreateNSGroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create n s group params
func (o *CreateNSGroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNSGroup adds the nSGroup to the create n s group params
func (o *CreateNSGroupParams) WithNSGroup(nSGroup *models.NSGroup) *CreateNSGroupParams {
	o.SetNSGroup(nSGroup)
	return o
}

// SetNSGroup adds the nSGroup to the create n s group params
func (o *CreateNSGroupParams) SetNSGroup(nSGroup *models.NSGroup) {
	o.NSGroup = nSGroup
}

// WriteToRequest writes these params to a swagger request
func (o *CreateNSGroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NSGroup == nil {
		o.NSGroup = new(models.NSGroup)
	}

	if err := r.SetBodyParam(o.NSGroup); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
