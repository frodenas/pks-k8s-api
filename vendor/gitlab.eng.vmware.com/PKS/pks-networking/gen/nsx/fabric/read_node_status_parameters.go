// Code generated by go-swagger; DO NOT EDIT.

package fabric

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewReadNodeStatusParams creates a new ReadNodeStatusParams object
// with the default values initialized.
func NewReadNodeStatusParams() *ReadNodeStatusParams {
	var ()
	return &ReadNodeStatusParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewReadNodeStatusParamsWithTimeout creates a new ReadNodeStatusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewReadNodeStatusParamsWithTimeout(timeout time.Duration) *ReadNodeStatusParams {
	var ()
	return &ReadNodeStatusParams{

		timeout: timeout,
	}
}

// NewReadNodeStatusParamsWithContext creates a new ReadNodeStatusParams object
// with the default values initialized, and the ability to set a context for a request
func NewReadNodeStatusParamsWithContext(ctx context.Context) *ReadNodeStatusParams {
	var ()
	return &ReadNodeStatusParams{

		Context: ctx,
	}
}

// NewReadNodeStatusParamsWithHTTPClient creates a new ReadNodeStatusParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewReadNodeStatusParamsWithHTTPClient(client *http.Client) *ReadNodeStatusParams {
	var ()
	return &ReadNodeStatusParams{
		HTTPClient: client,
	}
}

/*ReadNodeStatusParams contains all the parameters to send to the API endpoint
for the read node status operation typically these are written to a http.Request
*/
type ReadNodeStatusParams struct {

	/*NodeID*/
	NodeID string
	/*Source
	  Data source type.

	*/
	Source *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the read node status params
func (o *ReadNodeStatusParams) WithTimeout(timeout time.Duration) *ReadNodeStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the read node status params
func (o *ReadNodeStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the read node status params
func (o *ReadNodeStatusParams) WithContext(ctx context.Context) *ReadNodeStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the read node status params
func (o *ReadNodeStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the read node status params
func (o *ReadNodeStatusParams) WithHTTPClient(client *http.Client) *ReadNodeStatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the read node status params
func (o *ReadNodeStatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNodeID adds the nodeID to the read node status params
func (o *ReadNodeStatusParams) WithNodeID(nodeID string) *ReadNodeStatusParams {
	o.SetNodeID(nodeID)
	return o
}

// SetNodeID adds the nodeId to the read node status params
func (o *ReadNodeStatusParams) SetNodeID(nodeID string) {
	o.NodeID = nodeID
}

// WithSource adds the source to the read node status params
func (o *ReadNodeStatusParams) WithSource(source *string) *ReadNodeStatusParams {
	o.SetSource(source)
	return o
}

// SetSource adds the source to the read node status params
func (o *ReadNodeStatusParams) SetSource(source *string) {
	o.Source = source
}

// WriteToRequest writes these params to a swagger request
func (o *ReadNodeStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param node-id
	if err := r.SetPathParam("node-id", o.NodeID); err != nil {
		return err
	}

	if o.Source != nil {

		// query param source
		var qrSource string
		if o.Source != nil {
			qrSource = *o.Source
		}
		qSource := qrSource
		if qSource != "" {
			if err := r.SetQueryParam("source", qSource); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
