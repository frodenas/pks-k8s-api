// Code generated by go-swagger; DO NOT EDIT.

package fabric

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListNodesParams creates a new ListNodesParams object
// with the default values initialized.
func NewListNodesParams() *ListNodesParams {
	var (
		pageSizeDefault = int64(1000)
	)
	return &ListNodesParams{
		PageSize: &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListNodesParamsWithTimeout creates a new ListNodesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListNodesParamsWithTimeout(timeout time.Duration) *ListNodesParams {
	var (
		pageSizeDefault = int64(1000)
	)
	return &ListNodesParams{
		PageSize: &pageSizeDefault,

		timeout: timeout,
	}
}

// NewListNodesParamsWithContext creates a new ListNodesParams object
// with the default values initialized, and the ability to set a context for a request
func NewListNodesParamsWithContext(ctx context.Context) *ListNodesParams {
	var (
		pageSizeDefault = int64(1000)
	)
	return &ListNodesParams{
		PageSize: &pageSizeDefault,

		Context: ctx,
	}
}

// NewListNodesParamsWithHTTPClient creates a new ListNodesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListNodesParamsWithHTTPClient(client *http.Client) *ListNodesParams {
	var (
		pageSizeDefault = int64(1000)
	)
	return &ListNodesParams{
		PageSize:   &pageSizeDefault,
		HTTPClient: client,
	}
}

/*ListNodesParams contains all the parameters to send to the API endpoint
for the list nodes operation typically these are written to a http.Request
*/
type ListNodesParams struct {

	/*Cursor
	  Opaque cursor to be used for getting next page of records (supplied by current result page)

	*/
	Cursor *string
	/*DiscoveredNodeID
	  Id of the discovered node which was converted to create this node

	*/
	DiscoveredNodeID *string
	/*DisplayName
	  HostNode display name

	*/
	DisplayName *string
	/*ExternalID
	  HostNode external id

	*/
	ExternalID *string
	/*HypervisorOsType
	  HostNode's Hypervisor type, for example ESXi, RHEL KVM or UBUNTU KVM.

	*/
	HypervisorOsType *string
	/*IncludedFields
	  Comma separated list of fields that should be included to result of query

	*/
	IncludedFields *string
	/*IPAddress
	  Management IP address of the node

	*/
	IPAddress *string
	/*PageSize
	  Maximum number of results to return in this page (server may return fewer)

	*/
	PageSize *int64
	/*ResourceType
	  Node type from 'HostNode', 'EdgeNode', 'PublicCloudGatewayNode'

	*/
	ResourceType *string
	/*SortAscending*/
	SortAscending *bool
	/*SortBy
	  Field by which records are sorted

	*/
	SortBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list nodes params
func (o *ListNodesParams) WithTimeout(timeout time.Duration) *ListNodesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list nodes params
func (o *ListNodesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list nodes params
func (o *ListNodesParams) WithContext(ctx context.Context) *ListNodesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list nodes params
func (o *ListNodesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list nodes params
func (o *ListNodesParams) WithHTTPClient(client *http.Client) *ListNodesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list nodes params
func (o *ListNodesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursor adds the cursor to the list nodes params
func (o *ListNodesParams) WithCursor(cursor *string) *ListNodesParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the list nodes params
func (o *ListNodesParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithDiscoveredNodeID adds the discoveredNodeID to the list nodes params
func (o *ListNodesParams) WithDiscoveredNodeID(discoveredNodeID *string) *ListNodesParams {
	o.SetDiscoveredNodeID(discoveredNodeID)
	return o
}

// SetDiscoveredNodeID adds the discoveredNodeId to the list nodes params
func (o *ListNodesParams) SetDiscoveredNodeID(discoveredNodeID *string) {
	o.DiscoveredNodeID = discoveredNodeID
}

// WithDisplayName adds the displayName to the list nodes params
func (o *ListNodesParams) WithDisplayName(displayName *string) *ListNodesParams {
	o.SetDisplayName(displayName)
	return o
}

// SetDisplayName adds the displayName to the list nodes params
func (o *ListNodesParams) SetDisplayName(displayName *string) {
	o.DisplayName = displayName
}

// WithExternalID adds the externalID to the list nodes params
func (o *ListNodesParams) WithExternalID(externalID *string) *ListNodesParams {
	o.SetExternalID(externalID)
	return o
}

// SetExternalID adds the externalId to the list nodes params
func (o *ListNodesParams) SetExternalID(externalID *string) {
	o.ExternalID = externalID
}

// WithHypervisorOsType adds the hypervisorOsType to the list nodes params
func (o *ListNodesParams) WithHypervisorOsType(hypervisorOsType *string) *ListNodesParams {
	o.SetHypervisorOsType(hypervisorOsType)
	return o
}

// SetHypervisorOsType adds the hypervisorOsType to the list nodes params
func (o *ListNodesParams) SetHypervisorOsType(hypervisorOsType *string) {
	o.HypervisorOsType = hypervisorOsType
}

// WithIncludedFields adds the includedFields to the list nodes params
func (o *ListNodesParams) WithIncludedFields(includedFields *string) *ListNodesParams {
	o.SetIncludedFields(includedFields)
	return o
}

// SetIncludedFields adds the includedFields to the list nodes params
func (o *ListNodesParams) SetIncludedFields(includedFields *string) {
	o.IncludedFields = includedFields
}

// WithIPAddress adds the iPAddress to the list nodes params
func (o *ListNodesParams) WithIPAddress(iPAddress *string) *ListNodesParams {
	o.SetIPAddress(iPAddress)
	return o
}

// SetIPAddress adds the ipAddress to the list nodes params
func (o *ListNodesParams) SetIPAddress(iPAddress *string) {
	o.IPAddress = iPAddress
}

// WithPageSize adds the pageSize to the list nodes params
func (o *ListNodesParams) WithPageSize(pageSize *int64) *ListNodesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list nodes params
func (o *ListNodesParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithResourceType adds the resourceType to the list nodes params
func (o *ListNodesParams) WithResourceType(resourceType *string) *ListNodesParams {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the list nodes params
func (o *ListNodesParams) SetResourceType(resourceType *string) {
	o.ResourceType = resourceType
}

// WithSortAscending adds the sortAscending to the list nodes params
func (o *ListNodesParams) WithSortAscending(sortAscending *bool) *ListNodesParams {
	o.SetSortAscending(sortAscending)
	return o
}

// SetSortAscending adds the sortAscending to the list nodes params
func (o *ListNodesParams) SetSortAscending(sortAscending *bool) {
	o.SortAscending = sortAscending
}

// WithSortBy adds the sortBy to the list nodes params
func (o *ListNodesParams) WithSortBy(sortBy *string) *ListNodesParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the list nodes params
func (o *ListNodesParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WriteToRequest writes these params to a swagger request
func (o *ListNodesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string
		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {
			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}

	}

	if o.DiscoveredNodeID != nil {

		// query param discovered_node_id
		var qrDiscoveredNodeID string
		if o.DiscoveredNodeID != nil {
			qrDiscoveredNodeID = *o.DiscoveredNodeID
		}
		qDiscoveredNodeID := qrDiscoveredNodeID
		if qDiscoveredNodeID != "" {
			if err := r.SetQueryParam("discovered_node_id", qDiscoveredNodeID); err != nil {
				return err
			}
		}

	}

	if o.DisplayName != nil {

		// query param display_name
		var qrDisplayName string
		if o.DisplayName != nil {
			qrDisplayName = *o.DisplayName
		}
		qDisplayName := qrDisplayName
		if qDisplayName != "" {
			if err := r.SetQueryParam("display_name", qDisplayName); err != nil {
				return err
			}
		}

	}

	if o.ExternalID != nil {

		// query param external_id
		var qrExternalID string
		if o.ExternalID != nil {
			qrExternalID = *o.ExternalID
		}
		qExternalID := qrExternalID
		if qExternalID != "" {
			if err := r.SetQueryParam("external_id", qExternalID); err != nil {
				return err
			}
		}

	}

	if o.HypervisorOsType != nil {

		// query param hypervisor_os_type
		var qrHypervisorOsType string
		if o.HypervisorOsType != nil {
			qrHypervisorOsType = *o.HypervisorOsType
		}
		qHypervisorOsType := qrHypervisorOsType
		if qHypervisorOsType != "" {
			if err := r.SetQueryParam("hypervisor_os_type", qHypervisorOsType); err != nil {
				return err
			}
		}

	}

	if o.IncludedFields != nil {

		// query param included_fields
		var qrIncludedFields string
		if o.IncludedFields != nil {
			qrIncludedFields = *o.IncludedFields
		}
		qIncludedFields := qrIncludedFields
		if qIncludedFields != "" {
			if err := r.SetQueryParam("included_fields", qIncludedFields); err != nil {
				return err
			}
		}

	}

	if o.IPAddress != nil {

		// query param ip_address
		var qrIPAddress string
		if o.IPAddress != nil {
			qrIPAddress = *o.IPAddress
		}
		qIPAddress := qrIPAddress
		if qIPAddress != "" {
			if err := r.SetQueryParam("ip_address", qIPAddress); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.ResourceType != nil {

		// query param resource_type
		var qrResourceType string
		if o.ResourceType != nil {
			qrResourceType = *o.ResourceType
		}
		qResourceType := qrResourceType
		if qResourceType != "" {
			if err := r.SetQueryParam("resource_type", qResourceType); err != nil {
				return err
			}
		}

	}

	if o.SortAscending != nil {

		// query param sort_ascending
		var qrSortAscending bool
		if o.SortAscending != nil {
			qrSortAscending = *o.SortAscending
		}
		qSortAscending := swag.FormatBool(qrSortAscending)
		if qSortAscending != "" {
			if err := r.SetQueryParam("sort_ascending", qSortAscending); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sort_by
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sort_by", qSortBy); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
