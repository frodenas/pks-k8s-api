// Code generated by go-swagger; DO NOT EDIT.

package fabric

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new fabric API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fabric API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetFabricNodeState gets the realized state of a fabric node

Get the Realized State of a Fabric Node
*/
func (a *Client) GetFabricNodeState(params *GetFabricNodeStateParams, authInfo runtime.ClientAuthInfoWriter) (*GetFabricNodeStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFabricNodeStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFabricNodeState",
		Method:             "GET",
		PathPattern:        "/fabric/nodes/{node-id}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFabricNodeStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFabricNodeStateOK), nil

}

/*
ListNodes returns the list of nodes

Returns information about all fabric nodes (hosts and edges).
*/
func (a *Client) ListNodes(params *ListNodesParams, authInfo runtime.ClientAuthInfoWriter) (*ListNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListNodes",
		Method:             "GET",
		PathPattern:        "/fabric/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListNodesOK), nil

}

/*
ReadNode returns node information

Returns information about a specific fabric node (host or edge).
*/
func (a *Client) ReadNode(params *ReadNodeParams, authInfo runtime.ClientAuthInfoWriter) (*ReadNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReadNode",
		Method:             "GET",
		PathPattern:        "/fabric/nodes/{node-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReadNodeOK), nil

}

/*
ReadNodeStatus returns runtime status information for a node

Returns connectivity, heartbeat, and version information about a fabric node
(host or edge). Note that the LCP connectivity status remains down until
after the fabric node has been added as a transpot node and the NSX host
switch has been successfully installed. See POST /api/v1/transport-nodes.

*/
func (a *Client) ReadNodeStatus(params *ReadNodeStatusParams, authInfo runtime.ClientAuthInfoWriter) (*ReadNodeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadNodeStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReadNodeStatus",
		Method:             "GET",
		PathPattern:        "/fabric/nodes/{node-id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadNodeStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReadNodeStatusOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
