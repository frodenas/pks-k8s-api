// Code generated by go-swagger; DO NOT EDIT.

package logical_switching

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetLogicalSwitchParams creates a new GetLogicalSwitchParams object
// with the default values initialized.
func NewGetLogicalSwitchParams() *GetLogicalSwitchParams {
	var ()
	return &GetLogicalSwitchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLogicalSwitchParamsWithTimeout creates a new GetLogicalSwitchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLogicalSwitchParamsWithTimeout(timeout time.Duration) *GetLogicalSwitchParams {
	var ()
	return &GetLogicalSwitchParams{

		timeout: timeout,
	}
}

// NewGetLogicalSwitchParamsWithContext creates a new GetLogicalSwitchParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLogicalSwitchParamsWithContext(ctx context.Context) *GetLogicalSwitchParams {
	var ()
	return &GetLogicalSwitchParams{

		Context: ctx,
	}
}

// NewGetLogicalSwitchParamsWithHTTPClient creates a new GetLogicalSwitchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLogicalSwitchParamsWithHTTPClient(client *http.Client) *GetLogicalSwitchParams {
	var ()
	return &GetLogicalSwitchParams{
		HTTPClient: client,
	}
}

/*GetLogicalSwitchParams contains all the parameters to send to the API endpoint
for the get logical switch operation typically these are written to a http.Request
*/
type GetLogicalSwitchParams struct {

	/*LswitchID*/
	LswitchID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get logical switch params
func (o *GetLogicalSwitchParams) WithTimeout(timeout time.Duration) *GetLogicalSwitchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get logical switch params
func (o *GetLogicalSwitchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get logical switch params
func (o *GetLogicalSwitchParams) WithContext(ctx context.Context) *GetLogicalSwitchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get logical switch params
func (o *GetLogicalSwitchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get logical switch params
func (o *GetLogicalSwitchParams) WithHTTPClient(client *http.Client) *GetLogicalSwitchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get logical switch params
func (o *GetLogicalSwitchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLswitchID adds the lswitchID to the get logical switch params
func (o *GetLogicalSwitchParams) WithLswitchID(lswitchID string) *GetLogicalSwitchParams {
	o.SetLswitchID(lswitchID)
	return o
}

// SetLswitchID adds the lswitchId to the get logical switch params
func (o *GetLogicalSwitchParams) SetLswitchID(lswitchID string) {
	o.LswitchID = lswitchID
}

// WriteToRequest writes these params to a swagger request
func (o *GetLogicalSwitchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param lswitch-id
	if err := r.SetPathParam("lswitch-id", o.LswitchID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
