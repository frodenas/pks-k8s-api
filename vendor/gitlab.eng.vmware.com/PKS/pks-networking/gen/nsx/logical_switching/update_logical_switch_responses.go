// Code generated by go-swagger; DO NOT EDIT.

package logical_switching

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// UpdateLogicalSwitchReader is a Reader for the UpdateLogicalSwitch structure.
type UpdateLogicalSwitchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateLogicalSwitchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateLogicalSwitchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateLogicalSwitchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateLogicalSwitchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateLogicalSwitchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdateLogicalSwitchPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateLogicalSwitchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewUpdateLogicalSwitchServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateLogicalSwitchOK creates a UpdateLogicalSwitchOK with default headers values
func NewUpdateLogicalSwitchOK() *UpdateLogicalSwitchOK {
	return &UpdateLogicalSwitchOK{}
}

/*UpdateLogicalSwitchOK handles this case with default header values.

OK
*/
type UpdateLogicalSwitchOK struct {
	Payload *models.LogicalSwitch
}

func (o *UpdateLogicalSwitchOK) Error() string {
	return fmt.Sprintf("[PUT /logical-switches/{lswitch-id}][%d] updateLogicalSwitchOK  %+v", 200, o.Payload)
}

func (o *UpdateLogicalSwitchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogicalSwitch)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogicalSwitchBadRequest creates a UpdateLogicalSwitchBadRequest with default headers values
func NewUpdateLogicalSwitchBadRequest() *UpdateLogicalSwitchBadRequest {
	return &UpdateLogicalSwitchBadRequest{}
}

/*UpdateLogicalSwitchBadRequest handles this case with default header values.

Bad request
*/
type UpdateLogicalSwitchBadRequest struct {
	Payload *models.APIError
}

func (o *UpdateLogicalSwitchBadRequest) Error() string {
	return fmt.Sprintf("[PUT /logical-switches/{lswitch-id}][%d] updateLogicalSwitchBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateLogicalSwitchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogicalSwitchForbidden creates a UpdateLogicalSwitchForbidden with default headers values
func NewUpdateLogicalSwitchForbidden() *UpdateLogicalSwitchForbidden {
	return &UpdateLogicalSwitchForbidden{}
}

/*UpdateLogicalSwitchForbidden handles this case with default header values.

Operation forbidden
*/
type UpdateLogicalSwitchForbidden struct {
	Payload *models.APIError
}

func (o *UpdateLogicalSwitchForbidden) Error() string {
	return fmt.Sprintf("[PUT /logical-switches/{lswitch-id}][%d] updateLogicalSwitchForbidden  %+v", 403, o.Payload)
}

func (o *UpdateLogicalSwitchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogicalSwitchNotFound creates a UpdateLogicalSwitchNotFound with default headers values
func NewUpdateLogicalSwitchNotFound() *UpdateLogicalSwitchNotFound {
	return &UpdateLogicalSwitchNotFound{}
}

/*UpdateLogicalSwitchNotFound handles this case with default header values.

Not Found
*/
type UpdateLogicalSwitchNotFound struct {
}

func (o *UpdateLogicalSwitchNotFound) Error() string {
	return fmt.Sprintf("[PUT /logical-switches/{lswitch-id}][%d] updateLogicalSwitchNotFound ", 404)
}

func (o *UpdateLogicalSwitchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateLogicalSwitchPreconditionFailed creates a UpdateLogicalSwitchPreconditionFailed with default headers values
func NewUpdateLogicalSwitchPreconditionFailed() *UpdateLogicalSwitchPreconditionFailed {
	return &UpdateLogicalSwitchPreconditionFailed{}
}

/*UpdateLogicalSwitchPreconditionFailed handles this case with default header values.

Precondition failed
*/
type UpdateLogicalSwitchPreconditionFailed struct {
	Payload *models.APIError
}

func (o *UpdateLogicalSwitchPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /logical-switches/{lswitch-id}][%d] updateLogicalSwitchPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateLogicalSwitchPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogicalSwitchInternalServerError creates a UpdateLogicalSwitchInternalServerError with default headers values
func NewUpdateLogicalSwitchInternalServerError() *UpdateLogicalSwitchInternalServerError {
	return &UpdateLogicalSwitchInternalServerError{}
}

/*UpdateLogicalSwitchInternalServerError handles this case with default header values.

Internal server error
*/
type UpdateLogicalSwitchInternalServerError struct {
	Payload *models.APIError
}

func (o *UpdateLogicalSwitchInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /logical-switches/{lswitch-id}][%d] updateLogicalSwitchInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateLogicalSwitchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogicalSwitchServiceUnavailable creates a UpdateLogicalSwitchServiceUnavailable with default headers values
func NewUpdateLogicalSwitchServiceUnavailable() *UpdateLogicalSwitchServiceUnavailable {
	return &UpdateLogicalSwitchServiceUnavailable{}
}

/*UpdateLogicalSwitchServiceUnavailable handles this case with default header values.

Service unavailable
*/
type UpdateLogicalSwitchServiceUnavailable struct {
	Payload *models.APIError
}

func (o *UpdateLogicalSwitchServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /logical-switches/{lswitch-id}][%d] updateLogicalSwitchServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateLogicalSwitchServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
