// Code generated by go-swagger; DO NOT EDIT.

package logical_switching

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// DeleteLogicalSwitchReader is a Reader for the DeleteLogicalSwitch structure.
type DeleteLogicalSwitchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteLogicalSwitchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteLogicalSwitchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteLogicalSwitchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteLogicalSwitchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteLogicalSwitchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteLogicalSwitchPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteLogicalSwitchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewDeleteLogicalSwitchServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteLogicalSwitchOK creates a DeleteLogicalSwitchOK with default headers values
func NewDeleteLogicalSwitchOK() *DeleteLogicalSwitchOK {
	return &DeleteLogicalSwitchOK{}
}

/*DeleteLogicalSwitchOK handles this case with default header values.

Logical Switch was successfully deleted
*/
type DeleteLogicalSwitchOK struct {
}

func (o *DeleteLogicalSwitchOK) Error() string {
	return fmt.Sprintf("[DELETE /logical-switches/{lswitch-id}][%d] deleteLogicalSwitchOK ", 200)
}

func (o *DeleteLogicalSwitchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteLogicalSwitchBadRequest creates a DeleteLogicalSwitchBadRequest with default headers values
func NewDeleteLogicalSwitchBadRequest() *DeleteLogicalSwitchBadRequest {
	return &DeleteLogicalSwitchBadRequest{}
}

/*DeleteLogicalSwitchBadRequest handles this case with default header values.

Bad request
*/
type DeleteLogicalSwitchBadRequest struct {
	Payload *models.APIError
}

func (o *DeleteLogicalSwitchBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /logical-switches/{lswitch-id}][%d] deleteLogicalSwitchBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteLogicalSwitchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogicalSwitchForbidden creates a DeleteLogicalSwitchForbidden with default headers values
func NewDeleteLogicalSwitchForbidden() *DeleteLogicalSwitchForbidden {
	return &DeleteLogicalSwitchForbidden{}
}

/*DeleteLogicalSwitchForbidden handles this case with default header values.

Operation forbidden
*/
type DeleteLogicalSwitchForbidden struct {
	Payload *models.APIError
}

func (o *DeleteLogicalSwitchForbidden) Error() string {
	return fmt.Sprintf("[DELETE /logical-switches/{lswitch-id}][%d] deleteLogicalSwitchForbidden  %+v", 403, o.Payload)
}

func (o *DeleteLogicalSwitchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogicalSwitchNotFound creates a DeleteLogicalSwitchNotFound with default headers values
func NewDeleteLogicalSwitchNotFound() *DeleteLogicalSwitchNotFound {
	return &DeleteLogicalSwitchNotFound{}
}

/*DeleteLogicalSwitchNotFound handles this case with default header values.

Resource not found
*/
type DeleteLogicalSwitchNotFound struct {
	Payload *models.APIError
}

func (o *DeleteLogicalSwitchNotFound) Error() string {
	return fmt.Sprintf("[DELETE /logical-switches/{lswitch-id}][%d] deleteLogicalSwitchNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLogicalSwitchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogicalSwitchPreconditionFailed creates a DeleteLogicalSwitchPreconditionFailed with default headers values
func NewDeleteLogicalSwitchPreconditionFailed() *DeleteLogicalSwitchPreconditionFailed {
	return &DeleteLogicalSwitchPreconditionFailed{}
}

/*DeleteLogicalSwitchPreconditionFailed handles this case with default header values.

Precondition failed
*/
type DeleteLogicalSwitchPreconditionFailed struct {
	Payload *models.APIError
}

func (o *DeleteLogicalSwitchPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /logical-switches/{lswitch-id}][%d] deleteLogicalSwitchPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteLogicalSwitchPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogicalSwitchInternalServerError creates a DeleteLogicalSwitchInternalServerError with default headers values
func NewDeleteLogicalSwitchInternalServerError() *DeleteLogicalSwitchInternalServerError {
	return &DeleteLogicalSwitchInternalServerError{}
}

/*DeleteLogicalSwitchInternalServerError handles this case with default header values.

Internal server error
*/
type DeleteLogicalSwitchInternalServerError struct {
	Payload *models.APIError
}

func (o *DeleteLogicalSwitchInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /logical-switches/{lswitch-id}][%d] deleteLogicalSwitchInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteLogicalSwitchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogicalSwitchServiceUnavailable creates a DeleteLogicalSwitchServiceUnavailable with default headers values
func NewDeleteLogicalSwitchServiceUnavailable() *DeleteLogicalSwitchServiceUnavailable {
	return &DeleteLogicalSwitchServiceUnavailable{}
}

/*DeleteLogicalSwitchServiceUnavailable handles this case with default header values.

Service unavailable
*/
type DeleteLogicalSwitchServiceUnavailable struct {
	Payload *models.APIError
}

func (o *DeleteLogicalSwitchServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /logical-switches/{lswitch-id}][%d] deleteLogicalSwitchServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteLogicalSwitchServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
