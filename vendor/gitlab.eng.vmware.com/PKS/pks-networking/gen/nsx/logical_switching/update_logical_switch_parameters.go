// Code generated by go-swagger; DO NOT EDIT.

package logical_switching

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// NewUpdateLogicalSwitchParams creates a new UpdateLogicalSwitchParams object
// with the default values initialized.
func NewUpdateLogicalSwitchParams() *UpdateLogicalSwitchParams {
	var ()
	return &UpdateLogicalSwitchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateLogicalSwitchParamsWithTimeout creates a new UpdateLogicalSwitchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateLogicalSwitchParamsWithTimeout(timeout time.Duration) *UpdateLogicalSwitchParams {
	var ()
	return &UpdateLogicalSwitchParams{

		timeout: timeout,
	}
}

// NewUpdateLogicalSwitchParamsWithContext creates a new UpdateLogicalSwitchParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateLogicalSwitchParamsWithContext(ctx context.Context) *UpdateLogicalSwitchParams {
	var ()
	return &UpdateLogicalSwitchParams{

		Context: ctx,
	}
}

// NewUpdateLogicalSwitchParamsWithHTTPClient creates a new UpdateLogicalSwitchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateLogicalSwitchParamsWithHTTPClient(client *http.Client) *UpdateLogicalSwitchParams {
	var ()
	return &UpdateLogicalSwitchParams{
		HTTPClient: client,
	}
}

/*UpdateLogicalSwitchParams contains all the parameters to send to the API endpoint
for the update logical switch operation typically these are written to a http.Request
*/
type UpdateLogicalSwitchParams struct {

	/*LogicalSwitch*/
	LogicalSwitch *models.LogicalSwitch
	/*LswitchID*/
	LswitchID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update logical switch params
func (o *UpdateLogicalSwitchParams) WithTimeout(timeout time.Duration) *UpdateLogicalSwitchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update logical switch params
func (o *UpdateLogicalSwitchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update logical switch params
func (o *UpdateLogicalSwitchParams) WithContext(ctx context.Context) *UpdateLogicalSwitchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update logical switch params
func (o *UpdateLogicalSwitchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update logical switch params
func (o *UpdateLogicalSwitchParams) WithHTTPClient(client *http.Client) *UpdateLogicalSwitchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update logical switch params
func (o *UpdateLogicalSwitchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLogicalSwitch adds the logicalSwitch to the update logical switch params
func (o *UpdateLogicalSwitchParams) WithLogicalSwitch(logicalSwitch *models.LogicalSwitch) *UpdateLogicalSwitchParams {
	o.SetLogicalSwitch(logicalSwitch)
	return o
}

// SetLogicalSwitch adds the logicalSwitch to the update logical switch params
func (o *UpdateLogicalSwitchParams) SetLogicalSwitch(logicalSwitch *models.LogicalSwitch) {
	o.LogicalSwitch = logicalSwitch
}

// WithLswitchID adds the lswitchID to the update logical switch params
func (o *UpdateLogicalSwitchParams) WithLswitchID(lswitchID string) *UpdateLogicalSwitchParams {
	o.SetLswitchID(lswitchID)
	return o
}

// SetLswitchID adds the lswitchId to the update logical switch params
func (o *UpdateLogicalSwitchParams) SetLswitchID(lswitchID string) {
	o.LswitchID = lswitchID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateLogicalSwitchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LogicalSwitch == nil {
		o.LogicalSwitch = new(models.LogicalSwitch)
	}

	if err := r.SetBodyParam(o.LogicalSwitch); err != nil {
		return err
	}

	// path param lswitch-id
	if err := r.SetPathParam("lswitch-id", o.LswitchID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
