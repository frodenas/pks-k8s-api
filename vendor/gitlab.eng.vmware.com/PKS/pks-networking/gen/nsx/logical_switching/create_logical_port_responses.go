// Code generated by go-swagger; DO NOT EDIT.

package logical_switching

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// CreateLogicalPortReader is a Reader for the CreateLogicalPort structure.
type CreateLogicalPortReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateLogicalPortReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateLogicalPortCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateLogicalPortBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateLogicalPortForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateLogicalPortNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewCreateLogicalPortPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateLogicalPortInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewCreateLogicalPortServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateLogicalPortCreated creates a CreateLogicalPortCreated with default headers values
func NewCreateLogicalPortCreated() *CreateLogicalPortCreated {
	return &CreateLogicalPortCreated{}
}

/*CreateLogicalPortCreated handles this case with default header values.

Resource created successfully
*/
type CreateLogicalPortCreated struct {
	Payload *models.LogicalPort
}

func (o *CreateLogicalPortCreated) Error() string {
	return fmt.Sprintf("[POST /logical-ports][%d] createLogicalPortCreated  %+v", 201, o.Payload)
}

func (o *CreateLogicalPortCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogicalPort)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogicalPortBadRequest creates a CreateLogicalPortBadRequest with default headers values
func NewCreateLogicalPortBadRequest() *CreateLogicalPortBadRequest {
	return &CreateLogicalPortBadRequest{}
}

/*CreateLogicalPortBadRequest handles this case with default header values.

Bad request
*/
type CreateLogicalPortBadRequest struct {
	Payload *models.APIError
}

func (o *CreateLogicalPortBadRequest) Error() string {
	return fmt.Sprintf("[POST /logical-ports][%d] createLogicalPortBadRequest  %+v", 400, o.Payload)
}

func (o *CreateLogicalPortBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogicalPortForbidden creates a CreateLogicalPortForbidden with default headers values
func NewCreateLogicalPortForbidden() *CreateLogicalPortForbidden {
	return &CreateLogicalPortForbidden{}
}

/*CreateLogicalPortForbidden handles this case with default header values.

Operation forbidden
*/
type CreateLogicalPortForbidden struct {
	Payload *models.APIError
}

func (o *CreateLogicalPortForbidden) Error() string {
	return fmt.Sprintf("[POST /logical-ports][%d] createLogicalPortForbidden  %+v", 403, o.Payload)
}

func (o *CreateLogicalPortForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogicalPortNotFound creates a CreateLogicalPortNotFound with default headers values
func NewCreateLogicalPortNotFound() *CreateLogicalPortNotFound {
	return &CreateLogicalPortNotFound{}
}

/*CreateLogicalPortNotFound handles this case with default header values.

Resource not found
*/
type CreateLogicalPortNotFound struct {
	Payload *models.APIError
}

func (o *CreateLogicalPortNotFound) Error() string {
	return fmt.Sprintf("[POST /logical-ports][%d] createLogicalPortNotFound  %+v", 404, o.Payload)
}

func (o *CreateLogicalPortNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogicalPortPreconditionFailed creates a CreateLogicalPortPreconditionFailed with default headers values
func NewCreateLogicalPortPreconditionFailed() *CreateLogicalPortPreconditionFailed {
	return &CreateLogicalPortPreconditionFailed{}
}

/*CreateLogicalPortPreconditionFailed handles this case with default header values.

Precondition failed
*/
type CreateLogicalPortPreconditionFailed struct {
	Payload *models.APIError
}

func (o *CreateLogicalPortPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /logical-ports][%d] createLogicalPortPreconditionFailed  %+v", 412, o.Payload)
}

func (o *CreateLogicalPortPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogicalPortInternalServerError creates a CreateLogicalPortInternalServerError with default headers values
func NewCreateLogicalPortInternalServerError() *CreateLogicalPortInternalServerError {
	return &CreateLogicalPortInternalServerError{}
}

/*CreateLogicalPortInternalServerError handles this case with default header values.

Internal server error
*/
type CreateLogicalPortInternalServerError struct {
	Payload *models.APIError
}

func (o *CreateLogicalPortInternalServerError) Error() string {
	return fmt.Sprintf("[POST /logical-ports][%d] createLogicalPortInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateLogicalPortInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogicalPortServiceUnavailable creates a CreateLogicalPortServiceUnavailable with default headers values
func NewCreateLogicalPortServiceUnavailable() *CreateLogicalPortServiceUnavailable {
	return &CreateLogicalPortServiceUnavailable{}
}

/*CreateLogicalPortServiceUnavailable handles this case with default header values.

Service unavailable
*/
type CreateLogicalPortServiceUnavailable struct {
	Payload *models.APIError
}

func (o *CreateLogicalPortServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /logical-ports][%d] createLogicalPortServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateLogicalPortServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
