// Code generated by go-swagger; DO NOT EDIT.

package logical_switching

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// GetLogicalPortReader is a Reader for the GetLogicalPort structure.
type GetLogicalPortReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLogicalPortReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetLogicalPortOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetLogicalPortBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetLogicalPortForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetLogicalPortNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewGetLogicalPortPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetLogicalPortInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetLogicalPortServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetLogicalPortOK creates a GetLogicalPortOK with default headers values
func NewGetLogicalPortOK() *GetLogicalPortOK {
	return &GetLogicalPortOK{}
}

/*GetLogicalPortOK handles this case with default header values.

OK
*/
type GetLogicalPortOK struct {
	Payload *models.LogicalPort
}

func (o *GetLogicalPortOK) Error() string {
	return fmt.Sprintf("[GET /logical-ports/{lport-id}][%d] getLogicalPortOK  %+v", 200, o.Payload)
}

func (o *GetLogicalPortOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogicalPort)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogicalPortBadRequest creates a GetLogicalPortBadRequest with default headers values
func NewGetLogicalPortBadRequest() *GetLogicalPortBadRequest {
	return &GetLogicalPortBadRequest{}
}

/*GetLogicalPortBadRequest handles this case with default header values.

Bad request
*/
type GetLogicalPortBadRequest struct {
	Payload *models.APIError
}

func (o *GetLogicalPortBadRequest) Error() string {
	return fmt.Sprintf("[GET /logical-ports/{lport-id}][%d] getLogicalPortBadRequest  %+v", 400, o.Payload)
}

func (o *GetLogicalPortBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogicalPortForbidden creates a GetLogicalPortForbidden with default headers values
func NewGetLogicalPortForbidden() *GetLogicalPortForbidden {
	return &GetLogicalPortForbidden{}
}

/*GetLogicalPortForbidden handles this case with default header values.

Operation forbidden
*/
type GetLogicalPortForbidden struct {
	Payload *models.APIError
}

func (o *GetLogicalPortForbidden) Error() string {
	return fmt.Sprintf("[GET /logical-ports/{lport-id}][%d] getLogicalPortForbidden  %+v", 403, o.Payload)
}

func (o *GetLogicalPortForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogicalPortNotFound creates a GetLogicalPortNotFound with default headers values
func NewGetLogicalPortNotFound() *GetLogicalPortNotFound {
	return &GetLogicalPortNotFound{}
}

/*GetLogicalPortNotFound handles this case with default header values.

Not Found
*/
type GetLogicalPortNotFound struct {
}

func (o *GetLogicalPortNotFound) Error() string {
	return fmt.Sprintf("[GET /logical-ports/{lport-id}][%d] getLogicalPortNotFound ", 404)
}

func (o *GetLogicalPortNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLogicalPortPreconditionFailed creates a GetLogicalPortPreconditionFailed with default headers values
func NewGetLogicalPortPreconditionFailed() *GetLogicalPortPreconditionFailed {
	return &GetLogicalPortPreconditionFailed{}
}

/*GetLogicalPortPreconditionFailed handles this case with default header values.

Precondition failed
*/
type GetLogicalPortPreconditionFailed struct {
	Payload *models.APIError
}

func (o *GetLogicalPortPreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /logical-ports/{lport-id}][%d] getLogicalPortPreconditionFailed  %+v", 412, o.Payload)
}

func (o *GetLogicalPortPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogicalPortInternalServerError creates a GetLogicalPortInternalServerError with default headers values
func NewGetLogicalPortInternalServerError() *GetLogicalPortInternalServerError {
	return &GetLogicalPortInternalServerError{}
}

/*GetLogicalPortInternalServerError handles this case with default header values.

Internal server error
*/
type GetLogicalPortInternalServerError struct {
	Payload *models.APIError
}

func (o *GetLogicalPortInternalServerError) Error() string {
	return fmt.Sprintf("[GET /logical-ports/{lport-id}][%d] getLogicalPortInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLogicalPortInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogicalPortServiceUnavailable creates a GetLogicalPortServiceUnavailable with default headers values
func NewGetLogicalPortServiceUnavailable() *GetLogicalPortServiceUnavailable {
	return &GetLogicalPortServiceUnavailable{}
}

/*GetLogicalPortServiceUnavailable handles this case with default header values.

Service unavailable
*/
type GetLogicalPortServiceUnavailable struct {
	Payload *models.APIError
}

func (o *GetLogicalPortServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /logical-ports/{lport-id}][%d] getLogicalPortServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetLogicalPortServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
