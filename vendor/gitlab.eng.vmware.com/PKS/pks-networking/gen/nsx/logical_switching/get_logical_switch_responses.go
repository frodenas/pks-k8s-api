// Code generated by go-swagger; DO NOT EDIT.

package logical_switching

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// GetLogicalSwitchReader is a Reader for the GetLogicalSwitch structure.
type GetLogicalSwitchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLogicalSwitchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetLogicalSwitchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetLogicalSwitchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetLogicalSwitchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetLogicalSwitchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewGetLogicalSwitchPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetLogicalSwitchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetLogicalSwitchServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetLogicalSwitchOK creates a GetLogicalSwitchOK with default headers values
func NewGetLogicalSwitchOK() *GetLogicalSwitchOK {
	return &GetLogicalSwitchOK{}
}

/*GetLogicalSwitchOK handles this case with default header values.

Success
*/
type GetLogicalSwitchOK struct {
	Payload *models.LogicalSwitch
}

func (o *GetLogicalSwitchOK) Error() string {
	return fmt.Sprintf("[GET /logical-switches/{lswitch-id}][%d] getLogicalSwitchOK  %+v", 200, o.Payload)
}

func (o *GetLogicalSwitchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogicalSwitch)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogicalSwitchBadRequest creates a GetLogicalSwitchBadRequest with default headers values
func NewGetLogicalSwitchBadRequest() *GetLogicalSwitchBadRequest {
	return &GetLogicalSwitchBadRequest{}
}

/*GetLogicalSwitchBadRequest handles this case with default header values.

Bad request
*/
type GetLogicalSwitchBadRequest struct {
	Payload *models.APIError
}

func (o *GetLogicalSwitchBadRequest) Error() string {
	return fmt.Sprintf("[GET /logical-switches/{lswitch-id}][%d] getLogicalSwitchBadRequest  %+v", 400, o.Payload)
}

func (o *GetLogicalSwitchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogicalSwitchForbidden creates a GetLogicalSwitchForbidden with default headers values
func NewGetLogicalSwitchForbidden() *GetLogicalSwitchForbidden {
	return &GetLogicalSwitchForbidden{}
}

/*GetLogicalSwitchForbidden handles this case with default header values.

Operation forbidden
*/
type GetLogicalSwitchForbidden struct {
	Payload *models.APIError
}

func (o *GetLogicalSwitchForbidden) Error() string {
	return fmt.Sprintf("[GET /logical-switches/{lswitch-id}][%d] getLogicalSwitchForbidden  %+v", 403, o.Payload)
}

func (o *GetLogicalSwitchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogicalSwitchNotFound creates a GetLogicalSwitchNotFound with default headers values
func NewGetLogicalSwitchNotFound() *GetLogicalSwitchNotFound {
	return &GetLogicalSwitchNotFound{}
}

/*GetLogicalSwitchNotFound handles this case with default header values.

Resource not found
*/
type GetLogicalSwitchNotFound struct {
	Payload *models.APIError
}

func (o *GetLogicalSwitchNotFound) Error() string {
	return fmt.Sprintf("[GET /logical-switches/{lswitch-id}][%d] getLogicalSwitchNotFound  %+v", 404, o.Payload)
}

func (o *GetLogicalSwitchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogicalSwitchPreconditionFailed creates a GetLogicalSwitchPreconditionFailed with default headers values
func NewGetLogicalSwitchPreconditionFailed() *GetLogicalSwitchPreconditionFailed {
	return &GetLogicalSwitchPreconditionFailed{}
}

/*GetLogicalSwitchPreconditionFailed handles this case with default header values.

Precondition failed
*/
type GetLogicalSwitchPreconditionFailed struct {
	Payload *models.APIError
}

func (o *GetLogicalSwitchPreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /logical-switches/{lswitch-id}][%d] getLogicalSwitchPreconditionFailed  %+v", 412, o.Payload)
}

func (o *GetLogicalSwitchPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogicalSwitchInternalServerError creates a GetLogicalSwitchInternalServerError with default headers values
func NewGetLogicalSwitchInternalServerError() *GetLogicalSwitchInternalServerError {
	return &GetLogicalSwitchInternalServerError{}
}

/*GetLogicalSwitchInternalServerError handles this case with default header values.

Internal server error
*/
type GetLogicalSwitchInternalServerError struct {
	Payload *models.APIError
}

func (o *GetLogicalSwitchInternalServerError) Error() string {
	return fmt.Sprintf("[GET /logical-switches/{lswitch-id}][%d] getLogicalSwitchInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLogicalSwitchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogicalSwitchServiceUnavailable creates a GetLogicalSwitchServiceUnavailable with default headers values
func NewGetLogicalSwitchServiceUnavailable() *GetLogicalSwitchServiceUnavailable {
	return &GetLogicalSwitchServiceUnavailable{}
}

/*GetLogicalSwitchServiceUnavailable handles this case with default header values.

Service unavailable
*/
type GetLogicalSwitchServiceUnavailable struct {
	Payload *models.APIError
}

func (o *GetLogicalSwitchServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /logical-switches/{lswitch-id}][%d] getLogicalSwitchServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetLogicalSwitchServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
