// Code generated by go-swagger; DO NOT EDIT.

package logical_switching

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// NewCreateLogicalSwitchParams creates a new CreateLogicalSwitchParams object
// with the default values initialized.
func NewCreateLogicalSwitchParams() *CreateLogicalSwitchParams {
	var ()
	return &CreateLogicalSwitchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateLogicalSwitchParamsWithTimeout creates a new CreateLogicalSwitchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateLogicalSwitchParamsWithTimeout(timeout time.Duration) *CreateLogicalSwitchParams {
	var ()
	return &CreateLogicalSwitchParams{

		timeout: timeout,
	}
}

// NewCreateLogicalSwitchParamsWithContext creates a new CreateLogicalSwitchParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateLogicalSwitchParamsWithContext(ctx context.Context) *CreateLogicalSwitchParams {
	var ()
	return &CreateLogicalSwitchParams{

		Context: ctx,
	}
}

// NewCreateLogicalSwitchParamsWithHTTPClient creates a new CreateLogicalSwitchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateLogicalSwitchParamsWithHTTPClient(client *http.Client) *CreateLogicalSwitchParams {
	var ()
	return &CreateLogicalSwitchParams{
		HTTPClient: client,
	}
}

/*CreateLogicalSwitchParams contains all the parameters to send to the API endpoint
for the create logical switch operation typically these are written to a http.Request
*/
type CreateLogicalSwitchParams struct {

	/*LogicalSwitch*/
	LogicalSwitch *models.LogicalSwitch

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create logical switch params
func (o *CreateLogicalSwitchParams) WithTimeout(timeout time.Duration) *CreateLogicalSwitchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create logical switch params
func (o *CreateLogicalSwitchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create logical switch params
func (o *CreateLogicalSwitchParams) WithContext(ctx context.Context) *CreateLogicalSwitchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create logical switch params
func (o *CreateLogicalSwitchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create logical switch params
func (o *CreateLogicalSwitchParams) WithHTTPClient(client *http.Client) *CreateLogicalSwitchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create logical switch params
func (o *CreateLogicalSwitchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLogicalSwitch adds the logicalSwitch to the create logical switch params
func (o *CreateLogicalSwitchParams) WithLogicalSwitch(logicalSwitch *models.LogicalSwitch) *CreateLogicalSwitchParams {
	o.SetLogicalSwitch(logicalSwitch)
	return o
}

// SetLogicalSwitch adds the logicalSwitch to the create logical switch params
func (o *CreateLogicalSwitchParams) SetLogicalSwitch(logicalSwitch *models.LogicalSwitch) {
	o.LogicalSwitch = logicalSwitch
}

// WriteToRequest writes these params to a swagger request
func (o *CreateLogicalSwitchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LogicalSwitch == nil {
		o.LogicalSwitch = new(models.LogicalSwitch)
	}

	if err := r.SetBodyParam(o.LogicalSwitch); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
