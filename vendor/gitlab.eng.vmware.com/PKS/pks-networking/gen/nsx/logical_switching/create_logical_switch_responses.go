// Code generated by go-swagger; DO NOT EDIT.

package logical_switching

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// CreateLogicalSwitchReader is a Reader for the CreateLogicalSwitch structure.
type CreateLogicalSwitchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateLogicalSwitchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateLogicalSwitchCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateLogicalSwitchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateLogicalSwitchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateLogicalSwitchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewCreateLogicalSwitchPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateLogicalSwitchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewCreateLogicalSwitchServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateLogicalSwitchCreated creates a CreateLogicalSwitchCreated with default headers values
func NewCreateLogicalSwitchCreated() *CreateLogicalSwitchCreated {
	return &CreateLogicalSwitchCreated{}
}

/*CreateLogicalSwitchCreated handles this case with default header values.

Resource created successfully
*/
type CreateLogicalSwitchCreated struct {
	Payload *models.LogicalSwitch
}

func (o *CreateLogicalSwitchCreated) Error() string {
	return fmt.Sprintf("[POST /logical-switches][%d] createLogicalSwitchCreated  %+v", 201, o.Payload)
}

func (o *CreateLogicalSwitchCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogicalSwitch)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogicalSwitchBadRequest creates a CreateLogicalSwitchBadRequest with default headers values
func NewCreateLogicalSwitchBadRequest() *CreateLogicalSwitchBadRequest {
	return &CreateLogicalSwitchBadRequest{}
}

/*CreateLogicalSwitchBadRequest handles this case with default header values.

Bad request
*/
type CreateLogicalSwitchBadRequest struct {
	Payload *models.APIError
}

func (o *CreateLogicalSwitchBadRequest) Error() string {
	return fmt.Sprintf("[POST /logical-switches][%d] createLogicalSwitchBadRequest  %+v", 400, o.Payload)
}

func (o *CreateLogicalSwitchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogicalSwitchForbidden creates a CreateLogicalSwitchForbidden with default headers values
func NewCreateLogicalSwitchForbidden() *CreateLogicalSwitchForbidden {
	return &CreateLogicalSwitchForbidden{}
}

/*CreateLogicalSwitchForbidden handles this case with default header values.

Operation forbidden
*/
type CreateLogicalSwitchForbidden struct {
	Payload *models.APIError
}

func (o *CreateLogicalSwitchForbidden) Error() string {
	return fmt.Sprintf("[POST /logical-switches][%d] createLogicalSwitchForbidden  %+v", 403, o.Payload)
}

func (o *CreateLogicalSwitchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogicalSwitchNotFound creates a CreateLogicalSwitchNotFound with default headers values
func NewCreateLogicalSwitchNotFound() *CreateLogicalSwitchNotFound {
	return &CreateLogicalSwitchNotFound{}
}

/*CreateLogicalSwitchNotFound handles this case with default header values.

Resource not found
*/
type CreateLogicalSwitchNotFound struct {
	Payload *models.APIError
}

func (o *CreateLogicalSwitchNotFound) Error() string {
	return fmt.Sprintf("[POST /logical-switches][%d] createLogicalSwitchNotFound  %+v", 404, o.Payload)
}

func (o *CreateLogicalSwitchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogicalSwitchPreconditionFailed creates a CreateLogicalSwitchPreconditionFailed with default headers values
func NewCreateLogicalSwitchPreconditionFailed() *CreateLogicalSwitchPreconditionFailed {
	return &CreateLogicalSwitchPreconditionFailed{}
}

/*CreateLogicalSwitchPreconditionFailed handles this case with default header values.

Precondition failed
*/
type CreateLogicalSwitchPreconditionFailed struct {
	Payload *models.APIError
}

func (o *CreateLogicalSwitchPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /logical-switches][%d] createLogicalSwitchPreconditionFailed  %+v", 412, o.Payload)
}

func (o *CreateLogicalSwitchPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogicalSwitchInternalServerError creates a CreateLogicalSwitchInternalServerError with default headers values
func NewCreateLogicalSwitchInternalServerError() *CreateLogicalSwitchInternalServerError {
	return &CreateLogicalSwitchInternalServerError{}
}

/*CreateLogicalSwitchInternalServerError handles this case with default header values.

Internal server error
*/
type CreateLogicalSwitchInternalServerError struct {
	Payload *models.APIError
}

func (o *CreateLogicalSwitchInternalServerError) Error() string {
	return fmt.Sprintf("[POST /logical-switches][%d] createLogicalSwitchInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateLogicalSwitchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogicalSwitchServiceUnavailable creates a CreateLogicalSwitchServiceUnavailable with default headers values
func NewCreateLogicalSwitchServiceUnavailable() *CreateLogicalSwitchServiceUnavailable {
	return &CreateLogicalSwitchServiceUnavailable{}
}

/*CreateLogicalSwitchServiceUnavailable handles this case with default header values.

Service unavailable
*/
type CreateLogicalSwitchServiceUnavailable struct {
	Payload *models.APIError
}

func (o *CreateLogicalSwitchServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /logical-switches][%d] createLogicalSwitchServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateLogicalSwitchServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
