// Code generated by go-swagger; DO NOT EDIT.

package network_transport

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// UpdateTransportZoneReader is a Reader for the UpdateTransportZone structure.
type UpdateTransportZoneReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTransportZoneReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateTransportZoneOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateTransportZoneBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateTransportZoneForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateTransportZoneNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdateTransportZonePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateTransportZoneInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewUpdateTransportZoneServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateTransportZoneOK creates a UpdateTransportZoneOK with default headers values
func NewUpdateTransportZoneOK() *UpdateTransportZoneOK {
	return &UpdateTransportZoneOK{}
}

/*UpdateTransportZoneOK handles this case with default header values.

Success
*/
type UpdateTransportZoneOK struct {
	Payload *models.TransportZone
}

func (o *UpdateTransportZoneOK) Error() string {
	return fmt.Sprintf("[PUT /transport-zones/{zone-id}][%d] updateTransportZoneOK  %+v", 200, o.Payload)
}

func (o *UpdateTransportZoneOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TransportZone)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTransportZoneBadRequest creates a UpdateTransportZoneBadRequest with default headers values
func NewUpdateTransportZoneBadRequest() *UpdateTransportZoneBadRequest {
	return &UpdateTransportZoneBadRequest{}
}

/*UpdateTransportZoneBadRequest handles this case with default header values.

Bad request
*/
type UpdateTransportZoneBadRequest struct {
	Payload *models.APIError
}

func (o *UpdateTransportZoneBadRequest) Error() string {
	return fmt.Sprintf("[PUT /transport-zones/{zone-id}][%d] updateTransportZoneBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateTransportZoneBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTransportZoneForbidden creates a UpdateTransportZoneForbidden with default headers values
func NewUpdateTransportZoneForbidden() *UpdateTransportZoneForbidden {
	return &UpdateTransportZoneForbidden{}
}

/*UpdateTransportZoneForbidden handles this case with default header values.

Operation forbidden
*/
type UpdateTransportZoneForbidden struct {
	Payload *models.APIError
}

func (o *UpdateTransportZoneForbidden) Error() string {
	return fmt.Sprintf("[PUT /transport-zones/{zone-id}][%d] updateTransportZoneForbidden  %+v", 403, o.Payload)
}

func (o *UpdateTransportZoneForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTransportZoneNotFound creates a UpdateTransportZoneNotFound with default headers values
func NewUpdateTransportZoneNotFound() *UpdateTransportZoneNotFound {
	return &UpdateTransportZoneNotFound{}
}

/*UpdateTransportZoneNotFound handles this case with default header values.

Resource not found
*/
type UpdateTransportZoneNotFound struct {
	Payload *models.APIError
}

func (o *UpdateTransportZoneNotFound) Error() string {
	return fmt.Sprintf("[PUT /transport-zones/{zone-id}][%d] updateTransportZoneNotFound  %+v", 404, o.Payload)
}

func (o *UpdateTransportZoneNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTransportZonePreconditionFailed creates a UpdateTransportZonePreconditionFailed with default headers values
func NewUpdateTransportZonePreconditionFailed() *UpdateTransportZonePreconditionFailed {
	return &UpdateTransportZonePreconditionFailed{}
}

/*UpdateTransportZonePreconditionFailed handles this case with default header values.

Precondition failed
*/
type UpdateTransportZonePreconditionFailed struct {
	Payload *models.APIError
}

func (o *UpdateTransportZonePreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /transport-zones/{zone-id}][%d] updateTransportZonePreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateTransportZonePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTransportZoneInternalServerError creates a UpdateTransportZoneInternalServerError with default headers values
func NewUpdateTransportZoneInternalServerError() *UpdateTransportZoneInternalServerError {
	return &UpdateTransportZoneInternalServerError{}
}

/*UpdateTransportZoneInternalServerError handles this case with default header values.

Internal server error
*/
type UpdateTransportZoneInternalServerError struct {
	Payload *models.APIError
}

func (o *UpdateTransportZoneInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /transport-zones/{zone-id}][%d] updateTransportZoneInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateTransportZoneInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTransportZoneServiceUnavailable creates a UpdateTransportZoneServiceUnavailable with default headers values
func NewUpdateTransportZoneServiceUnavailable() *UpdateTransportZoneServiceUnavailable {
	return &UpdateTransportZoneServiceUnavailable{}
}

/*UpdateTransportZoneServiceUnavailable handles this case with default header values.

Service unavailable
*/
type UpdateTransportZoneServiceUnavailable struct {
	Payload *models.APIError
}

func (o *UpdateTransportZoneServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /transport-zones/{zone-id}][%d] updateTransportZoneServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateTransportZoneServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
