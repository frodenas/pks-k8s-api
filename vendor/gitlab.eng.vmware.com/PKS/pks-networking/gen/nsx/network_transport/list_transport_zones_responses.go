// Code generated by go-swagger; DO NOT EDIT.

package network_transport

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// ListTransportZonesReader is a Reader for the ListTransportZones structure.
type ListTransportZonesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTransportZonesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListTransportZonesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListTransportZonesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListTransportZonesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListTransportZonesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewListTransportZonesPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListTransportZonesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewListTransportZonesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListTransportZonesOK creates a ListTransportZonesOK with default headers values
func NewListTransportZonesOK() *ListTransportZonesOK {
	return &ListTransportZonesOK{}
}

/*ListTransportZonesOK handles this case with default header values.

Success
*/
type ListTransportZonesOK struct {
	Payload *models.TransportZoneListResult
}

func (o *ListTransportZonesOK) Error() string {
	return fmt.Sprintf("[GET /transport-zones][%d] listTransportZonesOK  %+v", 200, o.Payload)
}

func (o *ListTransportZonesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TransportZoneListResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransportZonesBadRequest creates a ListTransportZonesBadRequest with default headers values
func NewListTransportZonesBadRequest() *ListTransportZonesBadRequest {
	return &ListTransportZonesBadRequest{}
}

/*ListTransportZonesBadRequest handles this case with default header values.

Bad request
*/
type ListTransportZonesBadRequest struct {
	Payload *models.APIError
}

func (o *ListTransportZonesBadRequest) Error() string {
	return fmt.Sprintf("[GET /transport-zones][%d] listTransportZonesBadRequest  %+v", 400, o.Payload)
}

func (o *ListTransportZonesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransportZonesForbidden creates a ListTransportZonesForbidden with default headers values
func NewListTransportZonesForbidden() *ListTransportZonesForbidden {
	return &ListTransportZonesForbidden{}
}

/*ListTransportZonesForbidden handles this case with default header values.

Operation forbidden
*/
type ListTransportZonesForbidden struct {
	Payload *models.APIError
}

func (o *ListTransportZonesForbidden) Error() string {
	return fmt.Sprintf("[GET /transport-zones][%d] listTransportZonesForbidden  %+v", 403, o.Payload)
}

func (o *ListTransportZonesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransportZonesNotFound creates a ListTransportZonesNotFound with default headers values
func NewListTransportZonesNotFound() *ListTransportZonesNotFound {
	return &ListTransportZonesNotFound{}
}

/*ListTransportZonesNotFound handles this case with default header values.

Resource not found
*/
type ListTransportZonesNotFound struct {
	Payload *models.APIError
}

func (o *ListTransportZonesNotFound) Error() string {
	return fmt.Sprintf("[GET /transport-zones][%d] listTransportZonesNotFound  %+v", 404, o.Payload)
}

func (o *ListTransportZonesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransportZonesPreconditionFailed creates a ListTransportZonesPreconditionFailed with default headers values
func NewListTransportZonesPreconditionFailed() *ListTransportZonesPreconditionFailed {
	return &ListTransportZonesPreconditionFailed{}
}

/*ListTransportZonesPreconditionFailed handles this case with default header values.

Precondition failed
*/
type ListTransportZonesPreconditionFailed struct {
	Payload *models.APIError
}

func (o *ListTransportZonesPreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /transport-zones][%d] listTransportZonesPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ListTransportZonesPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransportZonesInternalServerError creates a ListTransportZonesInternalServerError with default headers values
func NewListTransportZonesInternalServerError() *ListTransportZonesInternalServerError {
	return &ListTransportZonesInternalServerError{}
}

/*ListTransportZonesInternalServerError handles this case with default header values.

Internal server error
*/
type ListTransportZonesInternalServerError struct {
	Payload *models.APIError
}

func (o *ListTransportZonesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /transport-zones][%d] listTransportZonesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListTransportZonesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransportZonesServiceUnavailable creates a ListTransportZonesServiceUnavailable with default headers values
func NewListTransportZonesServiceUnavailable() *ListTransportZonesServiceUnavailable {
	return &ListTransportZonesServiceUnavailable{}
}

/*ListTransportZonesServiceUnavailable handles this case with default header values.

Service unavailable
*/
type ListTransportZonesServiceUnavailable struct {
	Payload *models.APIError
}

func (o *ListTransportZonesServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /transport-zones][%d] listTransportZonesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListTransportZonesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
