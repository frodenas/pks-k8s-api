// Code generated by go-swagger; DO NOT EDIT.

package network_transport

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
)

// GetTransportNodeReader is a Reader for the GetTransportNode structure.
type GetTransportNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTransportNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTransportNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetTransportNodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetTransportNodeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetTransportNodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewGetTransportNodePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetTransportNodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetTransportNodeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTransportNodeOK creates a GetTransportNodeOK with default headers values
func NewGetTransportNodeOK() *GetTransportNodeOK {
	return &GetTransportNodeOK{}
}

/*GetTransportNodeOK handles this case with default header values.

Success
*/
type GetTransportNodeOK struct {
	Payload *models.TransportNode
}

func (o *GetTransportNodeOK) Error() string {
	return fmt.Sprintf("[GET /transport-nodes/{transportnode-id}][%d] getTransportNodeOK  %+v", 200, o.Payload)
}

func (o *GetTransportNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TransportNode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransportNodeBadRequest creates a GetTransportNodeBadRequest with default headers values
func NewGetTransportNodeBadRequest() *GetTransportNodeBadRequest {
	return &GetTransportNodeBadRequest{}
}

/*GetTransportNodeBadRequest handles this case with default header values.

Bad request
*/
type GetTransportNodeBadRequest struct {
	Payload *models.APIError
}

func (o *GetTransportNodeBadRequest) Error() string {
	return fmt.Sprintf("[GET /transport-nodes/{transportnode-id}][%d] getTransportNodeBadRequest  %+v", 400, o.Payload)
}

func (o *GetTransportNodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransportNodeForbidden creates a GetTransportNodeForbidden with default headers values
func NewGetTransportNodeForbidden() *GetTransportNodeForbidden {
	return &GetTransportNodeForbidden{}
}

/*GetTransportNodeForbidden handles this case with default header values.

Operation forbidden
*/
type GetTransportNodeForbidden struct {
	Payload *models.APIError
}

func (o *GetTransportNodeForbidden) Error() string {
	return fmt.Sprintf("[GET /transport-nodes/{transportnode-id}][%d] getTransportNodeForbidden  %+v", 403, o.Payload)
}

func (o *GetTransportNodeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransportNodeNotFound creates a GetTransportNodeNotFound with default headers values
func NewGetTransportNodeNotFound() *GetTransportNodeNotFound {
	return &GetTransportNodeNotFound{}
}

/*GetTransportNodeNotFound handles this case with default header values.

Resource not found
*/
type GetTransportNodeNotFound struct {
	Payload *models.APIError
}

func (o *GetTransportNodeNotFound) Error() string {
	return fmt.Sprintf("[GET /transport-nodes/{transportnode-id}][%d] getTransportNodeNotFound  %+v", 404, o.Payload)
}

func (o *GetTransportNodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransportNodePreconditionFailed creates a GetTransportNodePreconditionFailed with default headers values
func NewGetTransportNodePreconditionFailed() *GetTransportNodePreconditionFailed {
	return &GetTransportNodePreconditionFailed{}
}

/*GetTransportNodePreconditionFailed handles this case with default header values.

Precondition failed
*/
type GetTransportNodePreconditionFailed struct {
	Payload *models.APIError
}

func (o *GetTransportNodePreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /transport-nodes/{transportnode-id}][%d] getTransportNodePreconditionFailed  %+v", 412, o.Payload)
}

func (o *GetTransportNodePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransportNodeInternalServerError creates a GetTransportNodeInternalServerError with default headers values
func NewGetTransportNodeInternalServerError() *GetTransportNodeInternalServerError {
	return &GetTransportNodeInternalServerError{}
}

/*GetTransportNodeInternalServerError handles this case with default header values.

Internal server error
*/
type GetTransportNodeInternalServerError struct {
	Payload *models.APIError
}

func (o *GetTransportNodeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /transport-nodes/{transportnode-id}][%d] getTransportNodeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTransportNodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransportNodeServiceUnavailable creates a GetTransportNodeServiceUnavailable with default headers values
func NewGetTransportNodeServiceUnavailable() *GetTransportNodeServiceUnavailable {
	return &GetTransportNodeServiceUnavailable{}
}

/*GetTransportNodeServiceUnavailable handles this case with default header values.

Service unavailable
*/
type GetTransportNodeServiceUnavailable struct {
	Payload *models.APIError
}

func (o *GetTransportNodeServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /transport-nodes/{transportnode-id}][%d] getTransportNodeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetTransportNodeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
