// Code generated by go-swagger; DO NOT EDIT.

package nsx

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"gitlab.eng.vmware.com/PKS/pks-networking/gen/nsx/fabric"
	"gitlab.eng.vmware.com/PKS/pks-networking/gen/nsx/grouping_objects"
	"gitlab.eng.vmware.com/PKS/pks-networking/gen/nsx/logical_routing_and_services"
	"gitlab.eng.vmware.com/PKS/pks-networking/gen/nsx/logical_switching"
	"gitlab.eng.vmware.com/PKS/pks-networking/gen/nsx/network_transport"
	"gitlab.eng.vmware.com/PKS/pks-networking/gen/nsx/nsx_component_administration"
	"gitlab.eng.vmware.com/PKS/pks-networking/gen/nsx/pool_management"
	"gitlab.eng.vmware.com/PKS/pks-networking/gen/nsx/search"
	"gitlab.eng.vmware.com/PKS/pks-networking/gen/nsx/services"
)

// Default nsx HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "nsxmanager.your.domain"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/api/v1"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new nsx HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Nsx {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new nsx HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Nsx {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new nsx client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Nsx {
	cli := new(Nsx)
	cli.Transport = transport

	cli.Fabric = fabric.New(transport, formats)

	cli.GroupingObjects = grouping_objects.New(transport, formats)

	cli.LogicalRoutingAndServices = logical_routing_and_services.New(transport, formats)

	cli.LogicalSwitching = logical_switching.New(transport, formats)

	cli.NetworkTransport = network_transport.New(transport, formats)

	cli.NsxComponentAdministration = nsx_component_administration.New(transport, formats)

	cli.PoolManagement = pool_management.New(transport, formats)

	cli.Search = search.New(transport, formats)

	cli.Services = services.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Nsx is a client for nsx
type Nsx struct {
	Fabric *fabric.Client

	GroupingObjects *grouping_objects.Client

	LogicalRoutingAndServices *logical_routing_and_services.Client

	LogicalSwitching *logical_switching.Client

	NetworkTransport *network_transport.Client

	NsxComponentAdministration *nsx_component_administration.Client

	PoolManagement *pool_management.Client

	Search *search.Client

	Services *services.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Nsx) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.Fabric.SetTransport(transport)

	c.GroupingObjects.SetTransport(transport)

	c.LogicalRoutingAndServices.SetTransport(transport)

	c.LogicalSwitching.SetTransport(transport)

	c.NetworkTransport.SetTransport(transport)

	c.NsxComponentAdministration.SetTransport(transport)

	c.PoolManagement.SetTransport(transport)

	c.Search.SetTransport(transport)

	c.Services.SetTransport(transport)

}
