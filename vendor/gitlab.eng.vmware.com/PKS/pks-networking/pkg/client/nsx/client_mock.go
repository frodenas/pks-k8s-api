// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.eng.vmware.com/PKS/pks-networking/pkg/client/nsx (interfaces: Client)

// Package nsx is a generated GoMock package.
package nsx

import (
	gomock "github.com/golang/mock/gomock"
	models "gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
	fabric "gitlab.eng.vmware.com/PKS/pks-networking/gen/nsx/fabric"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddCertificateImport mocks base method
func (m *MockClient) AddCertificateImport(arg0 *models.TrustObjectData) (*models.CertificateList, error) {
	ret := m.ctrl.Call(m, "AddCertificateImport", arg0)
	ret0, _ := ret[0].(*models.CertificateList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCertificateImport indicates an expected call of AddCertificateImport
func (mr *MockClientMockRecorder) AddCertificateImport(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCertificateImport", reflect.TypeOf((*MockClient)(nil).AddCertificateImport), arg0)
}

// AddNatRule mocks base method
func (m *MockClient) AddNatRule(arg0 string, arg1 *models.NatRule) (*models.NatRule, error) {
	ret := m.ctrl.Call(m, "AddNatRule", arg0, arg1)
	ret0, _ := ret[0].(*models.NatRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNatRule indicates an expected call of AddNatRule
func (mr *MockClientMockRecorder) AddNatRule(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNatRule", reflect.TypeOf((*MockClient)(nil).AddNatRule), arg0, arg1)
}

// AllocateIPFromIPPool mocks base method
func (m *MockClient) AllocateIPFromIPPool(arg0 string) (*models.AllocationIPAddress, error) {
	ret := m.ctrl.Call(m, "AllocateIPFromIPPool", arg0)
	ret0, _ := ret[0].(*models.AllocationIPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateIPFromIPPool indicates an expected call of AllocateIPFromIPPool
func (mr *MockClientMockRecorder) AllocateIPFromIPPool(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateIPFromIPPool", reflect.TypeOf((*MockClient)(nil).AllocateIPFromIPPool), arg0)
}

// AllocateIPFromSubnetBlock mocks base method
func (m *MockClient) AllocateIPFromSubnetBlock(arg0 string) (*models.AllocationIPAddress, error) {
	ret := m.ctrl.Call(m, "AllocateIPFromSubnetBlock", arg0)
	ret0, _ := ret[0].(*models.AllocationIPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateIPFromSubnetBlock indicates an expected call of AllocateIPFromSubnetBlock
func (mr *MockClientMockRecorder) AllocateIPFromSubnetBlock(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateIPFromSubnetBlock", reflect.TypeOf((*MockClient)(nil).AllocateIPFromSubnetBlock), arg0)
}

// AllocateSubnetFromIPBlock mocks base method
func (m *MockClient) AllocateSubnetFromIPBlock(arg0 *models.IPBlockSubnet) (*models.IPBlockSubnet, error) {
	ret := m.ctrl.Call(m, "AllocateSubnetFromIPBlock", arg0)
	ret0, _ := ret[0].(*models.IPBlockSubnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateSubnetFromIPBlock indicates an expected call of AllocateSubnetFromIPBlock
func (mr *MockClientMockRecorder) AllocateSubnetFromIPBlock(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateSubnetFromIPBlock", reflect.TypeOf((*MockClient)(nil).AllocateSubnetFromIPBlock), arg0)
}

// CleanupIPPool mocks base method
func (m *MockClient) CleanupIPPool(arg0 string, arg1 bool) error {
	ret := m.ctrl.Call(m, "CleanupIPPool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupIPPool indicates an expected call of CleanupIPPool
func (mr *MockClientMockRecorder) CleanupIPPool(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupIPPool", reflect.TypeOf((*MockClient)(nil).CleanupIPPool), arg0, arg1)
}

// CreateLoadBalancerPool mocks base method
func (m *MockClient) CreateLoadBalancerPool(arg0 *models.LbPool) (*models.LbPool, error) {
	ret := m.ctrl.Call(m, "CreateLoadBalancerPool", arg0)
	ret0, _ := ret[0].(*models.LbPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancerPool indicates an expected call of CreateLoadBalancerPool
func (mr *MockClientMockRecorder) CreateLoadBalancerPool(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancerPool", reflect.TypeOf((*MockClient)(nil).CreateLoadBalancerPool), arg0)
}

// CreateLoadBalancerService mocks base method
func (m *MockClient) CreateLoadBalancerService(arg0 *models.LbService) (*models.LbService, error) {
	ret := m.ctrl.Call(m, "CreateLoadBalancerService", arg0)
	ret0, _ := ret[0].(*models.LbService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancerService indicates an expected call of CreateLoadBalancerService
func (mr *MockClientMockRecorder) CreateLoadBalancerService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancerService", reflect.TypeOf((*MockClient)(nil).CreateLoadBalancerService), arg0)
}

// CreateLoadBalancerTcpMonitor mocks base method
func (m *MockClient) CreateLoadBalancerTcpMonitor(arg0 *models.LbTCPMonitor) (*models.LbTCPMonitor, error) {
	ret := m.ctrl.Call(m, "CreateLoadBalancerTcpMonitor", arg0)
	ret0, _ := ret[0].(*models.LbTCPMonitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancerTcpMonitor indicates an expected call of CreateLoadBalancerTcpMonitor
func (mr *MockClientMockRecorder) CreateLoadBalancerTcpMonitor(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancerTcpMonitor", reflect.TypeOf((*MockClient)(nil).CreateLoadBalancerTcpMonitor), arg0)
}

// CreateLoadBalancerVirtualServer mocks base method
func (m *MockClient) CreateLoadBalancerVirtualServer(arg0 *models.LbVirtualServer) (*models.LbVirtualServer, error) {
	ret := m.ctrl.Call(m, "CreateLoadBalancerVirtualServer", arg0)
	ret0, _ := ret[0].(*models.LbVirtualServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancerVirtualServer indicates an expected call of CreateLoadBalancerVirtualServer
func (mr *MockClientMockRecorder) CreateLoadBalancerVirtualServer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancerVirtualServer", reflect.TypeOf((*MockClient)(nil).CreateLoadBalancerVirtualServer), arg0)
}

// CreateLogicalPort mocks base method
func (m *MockClient) CreateLogicalPort(arg0 *models.LogicalPort) (*models.LogicalPort, error) {
	ret := m.ctrl.Call(m, "CreateLogicalPort", arg0)
	ret0, _ := ret[0].(*models.LogicalPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogicalPort indicates an expected call of CreateLogicalPort
func (mr *MockClientMockRecorder) CreateLogicalPort(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogicalPort", reflect.TypeOf((*MockClient)(nil).CreateLogicalPort), arg0)
}

// CreateLogicalRouter mocks base method
func (m *MockClient) CreateLogicalRouter(arg0 *models.LogicalRouter) (*models.LogicalRouter, error) {
	ret := m.ctrl.Call(m, "CreateLogicalRouter", arg0)
	ret0, _ := ret[0].(*models.LogicalRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogicalRouter indicates an expected call of CreateLogicalRouter
func (mr *MockClientMockRecorder) CreateLogicalRouter(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogicalRouter", reflect.TypeOf((*MockClient)(nil).CreateLogicalRouter), arg0)
}

// CreateLogicalRouterPort mocks base method
func (m *MockClient) CreateLogicalRouterPort(arg0 *models.LogicalRouterPort) (*models.LogicalRouterPort, error) {
	ret := m.ctrl.Call(m, "CreateLogicalRouterPort", arg0)
	ret0, _ := ret[0].(*models.LogicalRouterPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogicalRouterPort indicates an expected call of CreateLogicalRouterPort
func (mr *MockClientMockRecorder) CreateLogicalRouterPort(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogicalRouterPort", reflect.TypeOf((*MockClient)(nil).CreateLogicalRouterPort), arg0)
}

// CreateLogicalSwitch mocks base method
func (m *MockClient) CreateLogicalSwitch(arg0 *models.LogicalSwitch) (*models.LogicalSwitch, error) {
	ret := m.ctrl.Call(m, "CreateLogicalSwitch", arg0)
	ret0, _ := ret[0].(*models.LogicalSwitch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogicalSwitch indicates an expected call of CreateLogicalSwitch
func (mr *MockClientMockRecorder) CreateLogicalSwitch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogicalSwitch", reflect.TypeOf((*MockClient)(nil).CreateLogicalSwitch), arg0)
}

// CreateNSGroup mocks base method
func (m *MockClient) CreateNSGroup(arg0 *models.NSGroup) (*models.NSGroup, error) {
	ret := m.ctrl.Call(m, "CreateNSGroup", arg0)
	ret0, _ := ret[0].(*models.NSGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNSGroup indicates an expected call of CreateNSGroup
func (mr *MockClientMockRecorder) CreateNSGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNSGroup", reflect.TypeOf((*MockClient)(nil).CreateNSGroup), arg0)
}

// CreateProxyServiceApplyCertificate mocks base method
func (m *MockClient) CreateProxyServiceApplyCertificate(arg0 string) error {
	ret := m.ctrl.Call(m, "CreateProxyServiceApplyCertificate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProxyServiceApplyCertificate indicates an expected call of CreateProxyServiceApplyCertificate
func (mr *MockClientMockRecorder) CreateProxyServiceApplyCertificate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProxyServiceApplyCertificate", reflect.TypeOf((*MockClient)(nil).CreateProxyServiceApplyCertificate), arg0)
}

// CreateSpoofGuardSwitchingProfile mocks base method
func (m *MockClient) CreateSpoofGuardSwitchingProfile(arg0 *models.SpoofGuardSwitchingProfile) (*models.SpoofGuardSwitchingProfile, error) {
	ret := m.ctrl.Call(m, "CreateSpoofGuardSwitchingProfile", arg0)
	ret0, _ := ret[0].(*models.SpoofGuardSwitchingProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSpoofGuardSwitchingProfile indicates an expected call of CreateSpoofGuardSwitchingProfile
func (mr *MockClientMockRecorder) CreateSpoofGuardSwitchingProfile(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpoofGuardSwitchingProfile", reflect.TypeOf((*MockClient)(nil).CreateSpoofGuardSwitchingProfile), arg0)
}

// DeleteCertificate mocks base method
func (m *MockClient) DeleteCertificate(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteCertificate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificate indicates an expected call of DeleteCertificate
func (mr *MockClientMockRecorder) DeleteCertificate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificate", reflect.TypeOf((*MockClient)(nil).DeleteCertificate), arg0)
}

// DeleteFirewallSection mocks base method
func (m *MockClient) DeleteFirewallSection(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteFirewallSection", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFirewallSection indicates an expected call of DeleteFirewallSection
func (mr *MockClientMockRecorder) DeleteFirewallSection(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewallSection", reflect.TypeOf((*MockClient)(nil).DeleteFirewallSection), arg0)
}

// DeleteIPBlockSubnet mocks base method
func (m *MockClient) DeleteIPBlockSubnet(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteIPBlockSubnet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIPBlockSubnet indicates an expected call of DeleteIPBlockSubnet
func (mr *MockClientMockRecorder) DeleteIPBlockSubnet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIPBlockSubnet", reflect.TypeOf((*MockClient)(nil).DeleteIPBlockSubnet), arg0)
}

// DeleteIPPool mocks base method
func (m *MockClient) DeleteIPPool(arg0 string, arg1 bool) error {
	ret := m.ctrl.Call(m, "DeleteIPPool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIPPool indicates an expected call of DeleteIPPool
func (mr *MockClientMockRecorder) DeleteIPPool(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIPPool", reflect.TypeOf((*MockClient)(nil).DeleteIPPool), arg0, arg1)
}

// DeleteIPSet mocks base method
func (m *MockClient) DeleteIPSet(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteIPSet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIPSet indicates an expected call of DeleteIPSet
func (mr *MockClientMockRecorder) DeleteIPSet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIPSet", reflect.TypeOf((*MockClient)(nil).DeleteIPSet), arg0)
}

// DeleteLoadBalancerMonitor mocks base method
func (m *MockClient) DeleteLoadBalancerMonitor(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteLoadBalancerMonitor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancerMonitor indicates an expected call of DeleteLoadBalancerMonitor
func (mr *MockClientMockRecorder) DeleteLoadBalancerMonitor(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerMonitor", reflect.TypeOf((*MockClient)(nil).DeleteLoadBalancerMonitor), arg0)
}

// DeleteLoadBalancerPersistenceProfile mocks base method
func (m *MockClient) DeleteLoadBalancerPersistenceProfile(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteLoadBalancerPersistenceProfile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancerPersistenceProfile indicates an expected call of DeleteLoadBalancerPersistenceProfile
func (mr *MockClientMockRecorder) DeleteLoadBalancerPersistenceProfile(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerPersistenceProfile", reflect.TypeOf((*MockClient)(nil).DeleteLoadBalancerPersistenceProfile), arg0)
}

// DeleteLoadBalancerPool mocks base method
func (m *MockClient) DeleteLoadBalancerPool(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteLoadBalancerPool", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancerPool indicates an expected call of DeleteLoadBalancerPool
func (mr *MockClientMockRecorder) DeleteLoadBalancerPool(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerPool", reflect.TypeOf((*MockClient)(nil).DeleteLoadBalancerPool), arg0)
}

// DeleteLoadBalancerRule mocks base method
func (m *MockClient) DeleteLoadBalancerRule(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteLoadBalancerRule", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancerRule indicates an expected call of DeleteLoadBalancerRule
func (mr *MockClientMockRecorder) DeleteLoadBalancerRule(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerRule", reflect.TypeOf((*MockClient)(nil).DeleteLoadBalancerRule), arg0)
}

// DeleteLoadBalancerService mocks base method
func (m *MockClient) DeleteLoadBalancerService(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteLoadBalancerService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancerService indicates an expected call of DeleteLoadBalancerService
func (mr *MockClientMockRecorder) DeleteLoadBalancerService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerService", reflect.TypeOf((*MockClient)(nil).DeleteLoadBalancerService), arg0)
}

// DeleteLoadBalancerVirtualServer mocks base method
func (m *MockClient) DeleteLoadBalancerVirtualServer(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteLoadBalancerVirtualServer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancerVirtualServer indicates an expected call of DeleteLoadBalancerVirtualServer
func (mr *MockClientMockRecorder) DeleteLoadBalancerVirtualServer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerVirtualServer", reflect.TypeOf((*MockClient)(nil).DeleteLoadBalancerVirtualServer), arg0)
}

// DeleteLogicalPort mocks base method
func (m *MockClient) DeleteLogicalPort(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteLogicalPort", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalPort indicates an expected call of DeleteLogicalPort
func (mr *MockClientMockRecorder) DeleteLogicalPort(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalPort", reflect.TypeOf((*MockClient)(nil).DeleteLogicalPort), arg0)
}

// DeleteLogicalRouter mocks base method
func (m *MockClient) DeleteLogicalRouter(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteLogicalRouter", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalRouter indicates an expected call of DeleteLogicalRouter
func (mr *MockClientMockRecorder) DeleteLogicalRouter(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalRouter", reflect.TypeOf((*MockClient)(nil).DeleteLogicalRouter), arg0)
}

// DeleteLogicalRouterPort mocks base method
func (m *MockClient) DeleteLogicalRouterPort(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteLogicalRouterPort", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalRouterPort indicates an expected call of DeleteLogicalRouterPort
func (mr *MockClientMockRecorder) DeleteLogicalRouterPort(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalRouterPort", reflect.TypeOf((*MockClient)(nil).DeleteLogicalRouterPort), arg0)
}

// DeleteLogicalSwitch mocks base method
func (m *MockClient) DeleteLogicalSwitch(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteLogicalSwitch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalSwitch indicates an expected call of DeleteLogicalSwitch
func (mr *MockClientMockRecorder) DeleteLogicalSwitch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalSwitch", reflect.TypeOf((*MockClient)(nil).DeleteLogicalSwitch), arg0)
}

// DeleteNSGroup mocks base method
func (m *MockClient) DeleteNSGroup(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteNSGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNSGroup indicates an expected call of DeleteNSGroup
func (mr *MockClientMockRecorder) DeleteNSGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNSGroup", reflect.TypeOf((*MockClient)(nil).DeleteNSGroup), arg0)
}

// DeleteNatRule mocks base method
func (m *MockClient) DeleteNatRule(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "DeleteNatRule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNatRule indicates an expected call of DeleteNatRule
func (mr *MockClientMockRecorder) DeleteNatRule(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNatRule", reflect.TypeOf((*MockClient)(nil).DeleteNatRule), arg0, arg1)
}

// DeletePrincipalIdentity mocks base method
func (m *MockClient) DeletePrincipalIdentity(arg0 string) error {
	ret := m.ctrl.Call(m, "DeletePrincipalIdentity", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrincipalIdentity indicates an expected call of DeletePrincipalIdentity
func (mr *MockClientMockRecorder) DeletePrincipalIdentity(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrincipalIdentity", reflect.TypeOf((*MockClient)(nil).DeletePrincipalIdentity), arg0)
}

// DeleteSwitchingProfile mocks base method
func (m *MockClient) DeleteSwitchingProfile(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteSwitchingProfile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSwitchingProfile indicates an expected call of DeleteSwitchingProfile
func (mr *MockClientMockRecorder) DeleteSwitchingProfile(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSwitchingProfile", reflect.TypeOf((*MockClient)(nil).DeleteSwitchingProfile), arg0)
}

// GetAdvertisementConfig mocks base method
func (m *MockClient) GetAdvertisementConfig(arg0 string) (*models.AdvertisementConfig, error) {
	ret := m.ctrl.Call(m, "GetAdvertisementConfig", arg0)
	ret0, _ := ret[0].(*models.AdvertisementConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertisementConfig indicates an expected call of GetAdvertisementConfig
func (mr *MockClientMockRecorder) GetAdvertisementConfig(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertisementConfig", reflect.TypeOf((*MockClient)(nil).GetAdvertisementConfig), arg0)
}

// GetCertificate mocks base method
func (m *MockClient) GetCertificate(arg0 string) (*models.Certificate, error) {
	ret := m.ctrl.Call(m, "GetCertificate", arg0)
	ret0, _ := ret[0].(*models.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificate indicates an expected call of GetCertificate
func (mr *MockClientMockRecorder) GetCertificate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockClient)(nil).GetCertificate), arg0)
}

// GetCertificates mocks base method
func (m *MockClient) GetCertificates() (*models.CertificateList, error) {
	ret := m.ctrl.Call(m, "GetCertificates")
	ret0, _ := ret[0].(*models.CertificateList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificates indicates an expected call of GetCertificates
func (mr *MockClientMockRecorder) GetCertificates() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificates", reflect.TypeOf((*MockClient)(nil).GetCertificates))
}

// GetFabricNodeGivenParams mocks base method
func (m *MockClient) GetFabricNodeGivenParams(arg0 *fabric.ListNodesParams) (*models.Node, error) {
	ret := m.ctrl.Call(m, "GetFabricNodeGivenParams", arg0)
	ret0, _ := ret[0].(*models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFabricNodeGivenParams indicates an expected call of GetFabricNodeGivenParams
func (mr *MockClientMockRecorder) GetFabricNodeGivenParams(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFabricNodeGivenParams", reflect.TypeOf((*MockClient)(nil).GetFabricNodeGivenParams), arg0)
}

// GetFabricNodeMatchingIP mocks base method
func (m *MockClient) GetFabricNodeMatchingIP(arg0 []string) (*models.Node, error) {
	ret := m.ctrl.Call(m, "GetFabricNodeMatchingIP", arg0)
	ret0, _ := ret[0].(*models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFabricNodeMatchingIP indicates an expected call of GetFabricNodeMatchingIP
func (mr *MockClientMockRecorder) GetFabricNodeMatchingIP(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFabricNodeMatchingIP", reflect.TypeOf((*MockClient)(nil).GetFabricNodeMatchingIP), arg0)
}

// GetFabricNodeState mocks base method
func (m *MockClient) GetFabricNodeState(arg0 string) (*models.ConfigurationState, error) {
	ret := m.ctrl.Call(m, "GetFabricNodeState", arg0)
	ret0, _ := ret[0].(*models.ConfigurationState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFabricNodeState indicates an expected call of GetFabricNodeState
func (mr *MockClientMockRecorder) GetFabricNodeState(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFabricNodeState", reflect.TypeOf((*MockClient)(nil).GetFabricNodeState), arg0)
}

// GetLogicalPort mocks base method
func (m *MockClient) GetLogicalPort(arg0 string) (*models.LogicalPort, error) {
	ret := m.ctrl.Call(m, "GetLogicalPort", arg0)
	ret0, _ := ret[0].(*models.LogicalPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalPort indicates an expected call of GetLogicalPort
func (mr *MockClientMockRecorder) GetLogicalPort(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalPort", reflect.TypeOf((*MockClient)(nil).GetLogicalPort), arg0)
}

// GetLogicalPortsForLogicalSwitch mocks base method
func (m *MockClient) GetLogicalPortsForLogicalSwitch(arg0 string) ([]*models.LogicalPort, error) {
	ret := m.ctrl.Call(m, "GetLogicalPortsForLogicalSwitch", arg0)
	ret0, _ := ret[0].([]*models.LogicalPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalPortsForLogicalSwitch indicates an expected call of GetLogicalPortsForLogicalSwitch
func (mr *MockClientMockRecorder) GetLogicalPortsForLogicalSwitch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalPortsForLogicalSwitch", reflect.TypeOf((*MockClient)(nil).GetLogicalPortsForLogicalSwitch), arg0)
}

// GetLogicalSwitch mocks base method
func (m *MockClient) GetLogicalSwitch(arg0 string) (*models.LogicalSwitch, error) {
	ret := m.ctrl.Call(m, "GetLogicalSwitch", arg0)
	ret0, _ := ret[0].(*models.LogicalSwitch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalSwitch indicates an expected call of GetLogicalSwitch
func (mr *MockClientMockRecorder) GetLogicalSwitch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalSwitch", reflect.TypeOf((*MockClient)(nil).GetLogicalSwitch), arg0)
}

// GetLogicalSwitchGivenName mocks base method
func (m *MockClient) GetLogicalSwitchGivenName(arg0 string) (*models.LogicalSwitch, error) {
	ret := m.ctrl.Call(m, "GetLogicalSwitchGivenName", arg0)
	ret0, _ := ret[0].(*models.LogicalSwitch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalSwitchGivenName indicates an expected call of GetLogicalSwitchGivenName
func (mr *MockClientMockRecorder) GetLogicalSwitchGivenName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalSwitchGivenName", reflect.TypeOf((*MockClient)(nil).GetLogicalSwitchGivenName), arg0)
}

// GetNatRule mocks base method
func (m *MockClient) GetNatRule(arg0, arg1 string) (*models.NatRule, error) {
	ret := m.ctrl.Call(m, "GetNatRule", arg0, arg1)
	ret0, _ := ret[0].(*models.NatRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNatRule indicates an expected call of GetNatRule
func (mr *MockClientMockRecorder) GetNatRule(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNatRule", reflect.TypeOf((*MockClient)(nil).GetNatRule), arg0, arg1)
}

// GetPrincipalIdentities mocks base method
func (m *MockClient) GetPrincipalIdentities() (*models.PrincipalIdentityList, error) {
	ret := m.ctrl.Call(m, "GetPrincipalIdentities")
	ret0, _ := ret[0].(*models.PrincipalIdentityList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrincipalIdentities indicates an expected call of GetPrincipalIdentities
func (mr *MockClientMockRecorder) GetPrincipalIdentities() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrincipalIdentities", reflect.TypeOf((*MockClient)(nil).GetPrincipalIdentities))
}

// GetTier1LinkPort mocks base method
func (m *MockClient) GetTier1LinkPort(arg0 string) (*models.LogicalRouterPort, error) {
	ret := m.ctrl.Call(m, "GetTier1LinkPort", arg0)
	ret0, _ := ret[0].(*models.LogicalRouterPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTier1LinkPort indicates an expected call of GetTier1LinkPort
func (mr *MockClientMockRecorder) GetTier1LinkPort(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTier1LinkPort", reflect.TypeOf((*MockClient)(nil).GetTier1LinkPort), arg0)
}

// GetTransportNode mocks base method
func (m *MockClient) GetTransportNode(arg0 string) (*models.TransportNode, error) {
	ret := m.ctrl.Call(m, "GetTransportNode", arg0)
	ret0, _ := ret[0].(*models.TransportNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransportNode indicates an expected call of GetTransportNode
func (mr *MockClientMockRecorder) GetTransportNode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransportNode", reflect.TypeOf((*MockClient)(nil).GetTransportNode), arg0)
}

// GetTransportZone mocks base method
func (m *MockClient) GetTransportZone(arg0 string) (*models.TransportZone, error) {
	ret := m.ctrl.Call(m, "GetTransportZone", arg0)
	ret0, _ := ret[0].(*models.TransportZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransportZone indicates an expected call of GetTransportZone
func (mr *MockClientMockRecorder) GetTransportZone(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransportZone", reflect.TypeOf((*MockClient)(nil).GetTransportZone), arg0)
}

// ListFabricNodes mocks base method
func (m *MockClient) ListFabricNodes() (*models.NodeListResult, error) {
	ret := m.ctrl.Call(m, "ListFabricNodes")
	ret0, _ := ret[0].(*models.NodeListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFabricNodes indicates an expected call of ListFabricNodes
func (mr *MockClientMockRecorder) ListFabricNodes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFabricNodes", reflect.TypeOf((*MockClient)(nil).ListFabricNodes))
}

// ListFirewallSections mocks base method
func (m *MockClient) ListFirewallSections() (*models.FirewallSectionListResult, error) {
	ret := m.ctrl.Call(m, "ListFirewallSections")
	ret0, _ := ret[0].(*models.FirewallSectionListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFirewallSections indicates an expected call of ListFirewallSections
func (mr *MockClientMockRecorder) ListFirewallSections() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFirewallSections", reflect.TypeOf((*MockClient)(nil).ListFirewallSections))
}

// ListIPBlockSubnets mocks base method
func (m *MockClient) ListIPBlockSubnets(arg0 string) (*models.IPBlockSubnetListResult, error) {
	ret := m.ctrl.Call(m, "ListIPBlockSubnets", arg0)
	ret0, _ := ret[0].(*models.IPBlockSubnetListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPBlockSubnets indicates an expected call of ListIPBlockSubnets
func (mr *MockClientMockRecorder) ListIPBlockSubnets(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPBlockSubnets", reflect.TypeOf((*MockClient)(nil).ListIPBlockSubnets), arg0)
}

// ListIPPoolAllocations mocks base method
func (m *MockClient) ListIPPoolAllocations(arg0 string) (*models.AllocationIPAddressListResult, error) {
	ret := m.ctrl.Call(m, "ListIPPoolAllocations", arg0)
	ret0, _ := ret[0].(*models.AllocationIPAddressListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPPoolAllocations indicates an expected call of ListIPPoolAllocations
func (mr *MockClientMockRecorder) ListIPPoolAllocations(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPPoolAllocations", reflect.TypeOf((*MockClient)(nil).ListIPPoolAllocations), arg0)
}

// ListIPPools mocks base method
func (m *MockClient) ListIPPools() (*models.IPPoolListResult, error) {
	ret := m.ctrl.Call(m, "ListIPPools")
	ret0, _ := ret[0].(*models.IPPoolListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPPools indicates an expected call of ListIPPools
func (mr *MockClientMockRecorder) ListIPPools() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPPools", reflect.TypeOf((*MockClient)(nil).ListIPPools))
}

// ListIPSets mocks base method
func (m *MockClient) ListIPSets() (*models.IPSetListResult, error) {
	ret := m.ctrl.Call(m, "ListIPSets")
	ret0, _ := ret[0].(*models.IPSetListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPSets indicates an expected call of ListIPSets
func (mr *MockClientMockRecorder) ListIPSets() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPSets", reflect.TypeOf((*MockClient)(nil).ListIPSets))
}

// ListLoadBalancerApplicationProfiles mocks base method
func (m *MockClient) ListLoadBalancerApplicationProfiles() (*models.LbAppProfileListResult, error) {
	ret := m.ctrl.Call(m, "ListLoadBalancerApplicationProfiles")
	ret0, _ := ret[0].(*models.LbAppProfileListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancerApplicationProfiles indicates an expected call of ListLoadBalancerApplicationProfiles
func (mr *MockClientMockRecorder) ListLoadBalancerApplicationProfiles() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancerApplicationProfiles", reflect.TypeOf((*MockClient)(nil).ListLoadBalancerApplicationProfiles))
}

// ListLoadBalancerPersistenceProfiles mocks base method
func (m *MockClient) ListLoadBalancerPersistenceProfiles() (*models.LbPersistenceProfileListResult, error) {
	ret := m.ctrl.Call(m, "ListLoadBalancerPersistenceProfiles")
	ret0, _ := ret[0].(*models.LbPersistenceProfileListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancerPersistenceProfiles indicates an expected call of ListLoadBalancerPersistenceProfiles
func (mr *MockClientMockRecorder) ListLoadBalancerPersistenceProfiles() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancerPersistenceProfiles", reflect.TypeOf((*MockClient)(nil).ListLoadBalancerPersistenceProfiles))
}

// ListLoadBalancerPools mocks base method
func (m *MockClient) ListLoadBalancerPools() (*models.LbPoolListResult, error) {
	ret := m.ctrl.Call(m, "ListLoadBalancerPools")
	ret0, _ := ret[0].(*models.LbPoolListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancerPools indicates an expected call of ListLoadBalancerPools
func (mr *MockClientMockRecorder) ListLoadBalancerPools() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancerPools", reflect.TypeOf((*MockClient)(nil).ListLoadBalancerPools))
}

// ListLoadBalancerRules mocks base method
func (m *MockClient) ListLoadBalancerRules() (*models.LbRuleListResult, error) {
	ret := m.ctrl.Call(m, "ListLoadBalancerRules")
	ret0, _ := ret[0].(*models.LbRuleListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancerRules indicates an expected call of ListLoadBalancerRules
func (mr *MockClientMockRecorder) ListLoadBalancerRules() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancerRules", reflect.TypeOf((*MockClient)(nil).ListLoadBalancerRules))
}

// ListLoadBalancerServices mocks base method
func (m *MockClient) ListLoadBalancerServices() (*models.LbServiceListResult, error) {
	ret := m.ctrl.Call(m, "ListLoadBalancerServices")
	ret0, _ := ret[0].(*models.LbServiceListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancerServices indicates an expected call of ListLoadBalancerServices
func (mr *MockClientMockRecorder) ListLoadBalancerServices() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancerServices", reflect.TypeOf((*MockClient)(nil).ListLoadBalancerServices))
}

// ListLoadBalancerVirtualServers mocks base method
func (m *MockClient) ListLoadBalancerVirtualServers() (*models.LbVirtualServerListResult, error) {
	ret := m.ctrl.Call(m, "ListLoadBalancerVirtualServers")
	ret0, _ := ret[0].(*models.LbVirtualServerListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancerVirtualServers indicates an expected call of ListLoadBalancerVirtualServers
func (mr *MockClientMockRecorder) ListLoadBalancerVirtualServers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancerVirtualServers", reflect.TypeOf((*MockClient)(nil).ListLoadBalancerVirtualServers))
}

// ListLogicalPorts mocks base method
func (m *MockClient) ListLogicalPorts() (*models.LogicalPortListResult, error) {
	ret := m.ctrl.Call(m, "ListLogicalPorts")
	ret0, _ := ret[0].(*models.LogicalPortListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalPorts indicates an expected call of ListLogicalPorts
func (mr *MockClientMockRecorder) ListLogicalPorts() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalPorts", reflect.TypeOf((*MockClient)(nil).ListLogicalPorts))
}

// ListLogicalRouterPorts mocks base method
func (m *MockClient) ListLogicalRouterPorts(arg0 *string) (*models.LogicalRouterPortListResult, error) {
	ret := m.ctrl.Call(m, "ListLogicalRouterPorts", arg0)
	ret0, _ := ret[0].(*models.LogicalRouterPortListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalRouterPorts indicates an expected call of ListLogicalRouterPorts
func (mr *MockClientMockRecorder) ListLogicalRouterPorts(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalRouterPorts", reflect.TypeOf((*MockClient)(nil).ListLogicalRouterPorts), arg0)
}

// ListLogicalRouterPortsForSwitch mocks base method
func (m *MockClient) ListLogicalRouterPortsForSwitch(arg0 *string) (*models.LogicalRouterPortListResult, error) {
	ret := m.ctrl.Call(m, "ListLogicalRouterPortsForSwitch", arg0)
	ret0, _ := ret[0].(*models.LogicalRouterPortListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalRouterPortsForSwitch indicates an expected call of ListLogicalRouterPortsForSwitch
func (mr *MockClientMockRecorder) ListLogicalRouterPortsForSwitch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalRouterPortsForSwitch", reflect.TypeOf((*MockClient)(nil).ListLogicalRouterPortsForSwitch), arg0)
}

// ListLogicalRouters mocks base method
func (m *MockClient) ListLogicalRouters() (*models.LogicalRouterListResult, error) {
	ret := m.ctrl.Call(m, "ListLogicalRouters")
	ret0, _ := ret[0].(*models.LogicalRouterListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalRouters indicates an expected call of ListLogicalRouters
func (mr *MockClientMockRecorder) ListLogicalRouters() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalRouters", reflect.TypeOf((*MockClient)(nil).ListLogicalRouters))
}

// ListLogicalRoutersByType mocks base method
func (m *MockClient) ListLogicalRoutersByType(arg0 string) (*models.LogicalRouterListResult, error) {
	ret := m.ctrl.Call(m, "ListLogicalRoutersByType", arg0)
	ret0, _ := ret[0].(*models.LogicalRouterListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalRoutersByType indicates an expected call of ListLogicalRoutersByType
func (mr *MockClientMockRecorder) ListLogicalRoutersByType(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalRoutersByType", reflect.TypeOf((*MockClient)(nil).ListLogicalRoutersByType), arg0)
}

// ListLogicalSwitches mocks base method
func (m *MockClient) ListLogicalSwitches() (*models.LogicalSwitchListResult, error) {
	ret := m.ctrl.Call(m, "ListLogicalSwitches")
	ret0, _ := ret[0].(*models.LogicalSwitchListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalSwitches indicates an expected call of ListLogicalSwitches
func (mr *MockClientMockRecorder) ListLogicalSwitches() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalSwitches", reflect.TypeOf((*MockClient)(nil).ListLogicalSwitches))
}

// ListNSGroups mocks base method
func (m *MockClient) ListNSGroups() (*models.NSGroupListResult, error) {
	ret := m.ctrl.Call(m, "ListNSGroups")
	ret0, _ := ret[0].(*models.NSGroupListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNSGroups indicates an expected call of ListNSGroups
func (mr *MockClientMockRecorder) ListNSGroups() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNSGroups", reflect.TypeOf((*MockClient)(nil).ListNSGroups))
}

// ListNatRules mocks base method
func (m *MockClient) ListNatRules(arg0 string) (*models.NatRuleListResult, error) {
	ret := m.ctrl.Call(m, "ListNatRules", arg0)
	ret0, _ := ret[0].(*models.NatRuleListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNatRules indicates an expected call of ListNatRules
func (mr *MockClientMockRecorder) ListNatRules(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNatRules", reflect.TypeOf((*MockClient)(nil).ListNatRules), arg0)
}

// ListSwitchingProfilesByType mocks base method
func (m *MockClient) ListSwitchingProfilesByType(arg0 string) (*models.SwitchingProfilesListResult, error) {
	ret := m.ctrl.Call(m, "ListSwitchingProfilesByType", arg0)
	ret0, _ := ret[0].(*models.SwitchingProfilesListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSwitchingProfilesByType indicates an expected call of ListSwitchingProfilesByType
func (mr *MockClientMockRecorder) ListSwitchingProfilesByType(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSwitchingProfilesByType", reflect.TypeOf((*MockClient)(nil).ListSwitchingProfilesByType), arg0)
}

// ListT0LogicalRouters mocks base method
func (m *MockClient) ListT0LogicalRouters() (*models.LogicalRouterListResult, error) {
	ret := m.ctrl.Call(m, "ListT0LogicalRouters")
	ret0, _ := ret[0].(*models.LogicalRouterListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListT0LogicalRouters indicates an expected call of ListT0LogicalRouters
func (mr *MockClientMockRecorder) ListT0LogicalRouters() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListT0LogicalRouters", reflect.TypeOf((*MockClient)(nil).ListT0LogicalRouters))
}

// ListT1LogicalRouters mocks base method
func (m *MockClient) ListT1LogicalRouters() (*models.LogicalRouterListResult, error) {
	ret := m.ctrl.Call(m, "ListT1LogicalRouters")
	ret0, _ := ret[0].(*models.LogicalRouterListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListT1LogicalRouters indicates an expected call of ListT1LogicalRouters
func (mr *MockClientMockRecorder) ListT1LogicalRouters() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListT1LogicalRouters", reflect.TypeOf((*MockClient)(nil).ListT1LogicalRouters))
}

// ListTranportZones mocks base method
func (m *MockClient) ListTranportZones() (*models.TransportZoneListResult, error) {
	ret := m.ctrl.Call(m, "ListTranportZones")
	ret0, _ := ret[0].(*models.TransportZoneListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTranportZones indicates an expected call of ListTranportZones
func (mr *MockClientMockRecorder) ListTranportZones() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTranportZones", reflect.TypeOf((*MockClient)(nil).ListTranportZones))
}

// PerformPoolMemberAction mocks base method
func (m *MockClient) PerformPoolMemberAction(arg0, arg1 string, arg2 *models.PoolMemberSettingList) (*models.LbPool, error) {
	ret := m.ctrl.Call(m, "PerformPoolMemberAction", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.LbPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformPoolMemberAction indicates an expected call of PerformPoolMemberAction
func (mr *MockClientMockRecorder) PerformPoolMemberAction(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformPoolMemberAction", reflect.TypeOf((*MockClient)(nil).PerformPoolMemberAction), arg0, arg1, arg2)
}

// ReadClusterStatus mocks base method
func (m *MockClient) ReadClusterStatus() (*models.ClusterStatus, error) {
	ret := m.ctrl.Call(m, "ReadClusterStatus")
	ret0, _ := ret[0].(*models.ClusterStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadClusterStatus indicates an expected call of ReadClusterStatus
func (mr *MockClientMockRecorder) ReadClusterStatus() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadClusterStatus", reflect.TypeOf((*MockClient)(nil).ReadClusterStatus))
}

// ReadEdgeCluster mocks base method
func (m *MockClient) ReadEdgeCluster(arg0 string) (*models.EdgeCluster, error) {
	ret := m.ctrl.Call(m, "ReadEdgeCluster", arg0)
	ret0, _ := ret[0].(*models.EdgeCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEdgeCluster indicates an expected call of ReadEdgeCluster
func (mr *MockClientMockRecorder) ReadEdgeCluster(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEdgeCluster", reflect.TypeOf((*MockClient)(nil).ReadEdgeCluster), arg0)
}

// ReadFabricNode mocks base method
func (m *MockClient) ReadFabricNode(arg0 string) (*models.Node, error) {
	ret := m.ctrl.Call(m, "ReadFabricNode", arg0)
	ret0, _ := ret[0].(*models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFabricNode indicates an expected call of ReadFabricNode
func (mr *MockClientMockRecorder) ReadFabricNode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFabricNode", reflect.TypeOf((*MockClient)(nil).ReadFabricNode), arg0)
}

// ReadFabricNodeStatus mocks base method
func (m *MockClient) ReadFabricNodeStatus(arg0 string) (*models.NodeStatus, error) {
	ret := m.ctrl.Call(m, "ReadFabricNodeStatus", arg0)
	ret0, _ := ret[0].(*models.NodeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFabricNodeStatus indicates an expected call of ReadFabricNodeStatus
func (mr *MockClientMockRecorder) ReadFabricNodeStatus(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFabricNodeStatus", reflect.TypeOf((*MockClient)(nil).ReadFabricNodeStatus), arg0)
}

// ReadIPBlock mocks base method
func (m *MockClient) ReadIPBlock(arg0 string) (*models.IPBlock, error) {
	ret := m.ctrl.Call(m, "ReadIPBlock", arg0)
	ret0, _ := ret[0].(*models.IPBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadIPBlock indicates an expected call of ReadIPBlock
func (mr *MockClientMockRecorder) ReadIPBlock(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadIPBlock", reflect.TypeOf((*MockClient)(nil).ReadIPBlock), arg0)
}

// ReadIPBlockSubnet mocks base method
func (m *MockClient) ReadIPBlockSubnet(arg0 string) (*models.IPBlockSubnet, error) {
	ret := m.ctrl.Call(m, "ReadIPBlockSubnet", arg0)
	ret0, _ := ret[0].(*models.IPBlockSubnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadIPBlockSubnet indicates an expected call of ReadIPBlockSubnet
func (mr *MockClientMockRecorder) ReadIPBlockSubnet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadIPBlockSubnet", reflect.TypeOf((*MockClient)(nil).ReadIPBlockSubnet), arg0)
}

// ReadIPPool mocks base method
func (m *MockClient) ReadIPPool(arg0 string) (*models.IPPool, error) {
	ret := m.ctrl.Call(m, "ReadIPPool", arg0)
	ret0, _ := ret[0].(*models.IPPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadIPPool indicates an expected call of ReadIPPool
func (mr *MockClientMockRecorder) ReadIPPool(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadIPPool", reflect.TypeOf((*MockClient)(nil).ReadIPPool), arg0)
}

// ReadLoadBalancerService mocks base method
func (m *MockClient) ReadLoadBalancerService(arg0 string) (*models.LbService, error) {
	ret := m.ctrl.Call(m, "ReadLoadBalancerService", arg0)
	ret0, _ := ret[0].(*models.LbService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLoadBalancerService indicates an expected call of ReadLoadBalancerService
func (mr *MockClientMockRecorder) ReadLoadBalancerService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLoadBalancerService", reflect.TypeOf((*MockClient)(nil).ReadLoadBalancerService), arg0)
}

// ReadLogicalRouter mocks base method
func (m *MockClient) ReadLogicalRouter(arg0 string) (*models.LogicalRouter, error) {
	ret := m.ctrl.Call(m, "ReadLogicalRouter", arg0)
	ret0, _ := ret[0].(*models.LogicalRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLogicalRouter indicates an expected call of ReadLogicalRouter
func (mr *MockClientMockRecorder) ReadLogicalRouter(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLogicalRouter", reflect.TypeOf((*MockClient)(nil).ReadLogicalRouter), arg0)
}

// ReadNSGroup mocks base method
func (m *MockClient) ReadNSGroup(arg0 string) (*models.NSGroup, error) {
	ret := m.ctrl.Call(m, "ReadNSGroup", arg0)
	ret0, _ := ret[0].(*models.NSGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadNSGroup indicates an expected call of ReadNSGroup
func (mr *MockClientMockRecorder) ReadNSGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNSGroup", reflect.TypeOf((*MockClient)(nil).ReadNSGroup), arg0)
}

// ReadNodeProperties mocks base method
func (m *MockClient) ReadNodeProperties() (*models.NodeProperties, error) {
	ret := m.ctrl.Call(m, "ReadNodeProperties")
	ret0, _ := ret[0].(*models.NodeProperties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadNodeProperties indicates an expected call of ReadNodeProperties
func (mr *MockClientMockRecorder) ReadNodeProperties() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNodeProperties", reflect.TypeOf((*MockClient)(nil).ReadNodeProperties))
}

// RegisterPrincipalIdentity mocks base method
func (m *MockClient) RegisterPrincipalIdentity(arg0 *models.PrincipalIdentity) (*models.PrincipalIdentity, error) {
	ret := m.ctrl.Call(m, "RegisterPrincipalIdentity", arg0)
	ret0, _ := ret[0].(*models.PrincipalIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterPrincipalIdentity indicates an expected call of RegisterPrincipalIdentity
func (mr *MockClientMockRecorder) RegisterPrincipalIdentity(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPrincipalIdentity", reflect.TypeOf((*MockClient)(nil).RegisterPrincipalIdentity), arg0)
}

// ReleaseIPToIPPool mocks base method
func (m *MockClient) ReleaseIPToIPPool(arg0 string, arg1 *models.AllocationIPAddress) error {
	ret := m.ctrl.Call(m, "ReleaseIPToIPPool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseIPToIPPool indicates an expected call of ReleaseIPToIPPool
func (mr *MockClientMockRecorder) ReleaseIPToIPPool(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseIPToIPPool", reflect.TypeOf((*MockClient)(nil).ReleaseIPToIPPool), arg0, arg1)
}

// ReleaseLoadBalancerVirtualServerIP mocks base method
func (m *MockClient) ReleaseLoadBalancerVirtualServerIP(arg0 *models.LbVirtualServer, arg1 bool) error {
	ret := m.ctrl.Call(m, "ReleaseLoadBalancerVirtualServerIP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseLoadBalancerVirtualServerIP indicates an expected call of ReleaseLoadBalancerVirtualServerIP
func (mr *MockClientMockRecorder) ReleaseLoadBalancerVirtualServerIP(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLoadBalancerVirtualServerIP", reflect.TypeOf((*MockClient)(nil).ReleaseLoadBalancerVirtualServerIP), arg0, arg1)
}

// ReleaseLogicalRouterExternalIP mocks base method
func (m *MockClient) ReleaseLogicalRouterExternalIP(arg0 *models.LogicalRouter, arg1 bool) error {
	ret := m.ctrl.Call(m, "ReleaseLogicalRouterExternalIP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseLogicalRouterExternalIP indicates an expected call of ReleaseLogicalRouterExternalIP
func (mr *MockClientMockRecorder) ReleaseLogicalRouterExternalIP(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLogicalRouterExternalIP", reflect.TypeOf((*MockClient)(nil).ReleaseLogicalRouterExternalIP), arg0, arg1)
}

// ReleaseNatRuleExternalIP mocks base method
func (m *MockClient) ReleaseNatRuleExternalIP(arg0 *models.NatRule, arg1 bool) error {
	ret := m.ctrl.Call(m, "ReleaseNatRuleExternalIP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseNatRuleExternalIP indicates an expected call of ReleaseNatRuleExternalIP
func (mr *MockClientMockRecorder) ReleaseNatRuleExternalIP(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseNatRuleExternalIP", reflect.TypeOf((*MockClient)(nil).ReleaseNatRuleExternalIP), arg0, arg1)
}

// RemoveRouterLinkPort mocks base method
func (m *MockClient) RemoveRouterLinkPort(arg0, arg1 string, arg2 bool) error {
	ret := m.ctrl.Call(m, "RemoveRouterLinkPort", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRouterLinkPort indicates an expected call of RemoveRouterLinkPort
func (mr *MockClientMockRecorder) RemoveRouterLinkPort(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRouterLinkPort", reflect.TypeOf((*MockClient)(nil).RemoveRouterLinkPort), arg0, arg1, arg2)
}

// ResourceCollectFunc mocks base method
func (m *MockClient) ResourceCollectFunc(arg0 string) ResourceCollectFunc {
	ret := m.ctrl.Call(m, "ResourceCollectFunc", arg0)
	ret0, _ := ret[0].(ResourceCollectFunc)
	return ret0
}

// ResourceCollectFunc indicates an expected call of ResourceCollectFunc
func (mr *MockClientMockRecorder) ResourceCollectFunc(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceCollectFunc", reflect.TypeOf((*MockClient)(nil).ResourceCollectFunc), arg0)
}

// ResourceDeleteFunc mocks base method
func (m *MockClient) ResourceDeleteFunc(arg0 string) ResourceDeleteFunc {
	ret := m.ctrl.Call(m, "ResourceDeleteFunc", arg0)
	ret0, _ := ret[0].(ResourceDeleteFunc)
	return ret0
}

// ResourceDeleteFunc indicates an expected call of ResourceDeleteFunc
func (mr *MockClientMockRecorder) ResourceDeleteFunc(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceDeleteFunc", reflect.TypeOf((*MockClient)(nil).ResourceDeleteFunc), arg0)
}

// SearchByTag mocks base method
func (m *MockClient) SearchByTag(arg0 *string, arg1 models.Tag) (*models.SearchResults, error) {
	ret := m.ctrl.Call(m, "SearchByTag", arg0, arg1)
	ret0, _ := ret[0].(*models.SearchResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByTag indicates an expected call of SearchByTag
func (mr *MockClientMockRecorder) SearchByTag(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByTag", reflect.TypeOf((*MockClient)(nil).SearchByTag), arg0, arg1)
}

// TagIPBlock mocks base method
func (m *MockClient) TagIPBlock(arg0 string, arg1 []*models.Tag) (*models.IPBlock, error) {
	ret := m.ctrl.Call(m, "TagIPBlock", arg0, arg1)
	ret0, _ := ret[0].(*models.IPBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagIPBlock indicates an expected call of TagIPBlock
func (mr *MockClientMockRecorder) TagIPBlock(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagIPBlock", reflect.TypeOf((*MockClient)(nil).TagIPBlock), arg0, arg1)
}

// TagIPPool mocks base method
func (m *MockClient) TagIPPool(arg0 string, arg1 []*models.Tag) (*models.IPPool, error) {
	ret := m.ctrl.Call(m, "TagIPPool", arg0, arg1)
	ret0, _ := ret[0].(*models.IPPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagIPPool indicates an expected call of TagIPPool
func (mr *MockClientMockRecorder) TagIPPool(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagIPPool", reflect.TypeOf((*MockClient)(nil).TagIPPool), arg0, arg1)
}

// TagRouter mocks base method
func (m *MockClient) TagRouter(arg0 string, arg1 []*models.Tag) (*models.LogicalRouter, error) {
	ret := m.ctrl.Call(m, "TagRouter", arg0, arg1)
	ret0, _ := ret[0].(*models.LogicalRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagRouter indicates an expected call of TagRouter
func (mr *MockClientMockRecorder) TagRouter(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagRouter", reflect.TypeOf((*MockClient)(nil).TagRouter), arg0, arg1)
}

// TagTransportZone mocks base method
func (m *MockClient) TagTransportZone(arg0 string, arg1 []*models.Tag) (*models.TransportZone, error) {
	ret := m.ctrl.Call(m, "TagTransportZone", arg0, arg1)
	ret0, _ := ret[0].(*models.TransportZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagTransportZone indicates an expected call of TagTransportZone
func (mr *MockClientMockRecorder) TagTransportZone(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagTransportZone", reflect.TypeOf((*MockClient)(nil).TagTransportZone), arg0, arg1)
}

// UpdateAdvertisementConfig mocks base method
func (m *MockClient) UpdateAdvertisementConfig(arg0 string, arg1 *models.AdvertisementConfig) (*models.AdvertisementConfig, error) {
	ret := m.ctrl.Call(m, "UpdateAdvertisementConfig", arg0, arg1)
	ret0, _ := ret[0].(*models.AdvertisementConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdvertisementConfig indicates an expected call of UpdateAdvertisementConfig
func (mr *MockClientMockRecorder) UpdateAdvertisementConfig(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdvertisementConfig", reflect.TypeOf((*MockClient)(nil).UpdateAdvertisementConfig), arg0, arg1)
}

// UpdateIPBlock mocks base method
func (m *MockClient) UpdateIPBlock(arg0 *models.IPBlock) (*models.IPBlock, error) {
	ret := m.ctrl.Call(m, "UpdateIPBlock", arg0)
	ret0, _ := ret[0].(*models.IPBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIPBlock indicates an expected call of UpdateIPBlock
func (mr *MockClientMockRecorder) UpdateIPBlock(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPBlock", reflect.TypeOf((*MockClient)(nil).UpdateIPBlock), arg0)
}

// UpdateIPPool mocks base method
func (m *MockClient) UpdateIPPool(arg0 *models.IPPool) (*models.IPPool, error) {
	ret := m.ctrl.Call(m, "UpdateIPPool", arg0)
	ret0, _ := ret[0].(*models.IPPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIPPool indicates an expected call of UpdateIPPool
func (mr *MockClientMockRecorder) UpdateIPPool(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPPool", reflect.TypeOf((*MockClient)(nil).UpdateIPPool), arg0)
}

// UpdateLogicalRouter mocks base method
func (m *MockClient) UpdateLogicalRouter(arg0 *models.LogicalRouter) (*models.LogicalRouter, error) {
	ret := m.ctrl.Call(m, "UpdateLogicalRouter", arg0)
	ret0, _ := ret[0].(*models.LogicalRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLogicalRouter indicates an expected call of UpdateLogicalRouter
func (mr *MockClientMockRecorder) UpdateLogicalRouter(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogicalRouter", reflect.TypeOf((*MockClient)(nil).UpdateLogicalRouter), arg0)
}

// UpdateLogicalSwitch mocks base method
func (m *MockClient) UpdateLogicalSwitch(arg0 *models.LogicalSwitch) (*models.LogicalSwitch, error) {
	ret := m.ctrl.Call(m, "UpdateLogicalSwitch", arg0)
	ret0, _ := ret[0].(*models.LogicalSwitch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLogicalSwitch indicates an expected call of UpdateLogicalSwitch
func (mr *MockClientMockRecorder) UpdateLogicalSwitch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogicalSwitch", reflect.TypeOf((*MockClient)(nil).UpdateLogicalSwitch), arg0)
}

// UpdateTransportZone mocks base method
func (m *MockClient) UpdateTransportZone(arg0 *models.TransportZone) (*models.TransportZone, error) {
	ret := m.ctrl.Call(m, "UpdateTransportZone", arg0)
	ret0, _ := ret[0].(*models.TransportZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransportZone indicates an expected call of UpdateTransportZone
func (mr *MockClientMockRecorder) UpdateTransportZone(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransportZone", reflect.TypeOf((*MockClient)(nil).UpdateTransportZone), arg0)
}

// Validate mocks base method
func (m *MockClient) Validate() error {
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockClientMockRecorder) Validate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockClient)(nil).Validate))
}

// WithBasicAuth mocks base method
func (m *MockClient) WithBasicAuth(arg0, arg1 string) Client {
	ret := m.ctrl.Call(m, "WithBasicAuth", arg0, arg1)
	ret0, _ := ret[0].(Client)
	return ret0
}

// WithBasicAuth indicates an expected call of WithBasicAuth
func (mr *MockClientMockRecorder) WithBasicAuth(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithBasicAuth", reflect.TypeOf((*MockClient)(nil).WithBasicAuth), arg0, arg1)
}

// WithClientCert mocks base method
func (m *MockClient) WithClientCert(arg0, arg1 string) Client {
	ret := m.ctrl.Call(m, "WithClientCert", arg0, arg1)
	ret0, _ := ret[0].(Client)
	return ret0
}

// WithClientCert indicates an expected call of WithClientCert
func (mr *MockClientMockRecorder) WithClientCert(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithClientCert", reflect.TypeOf((*MockClient)(nil).WithClientCert), arg0, arg1)
}

// WithClientCertFromFile mocks base method
func (m *MockClient) WithClientCertFromFile(arg0, arg1 string) Client {
	ret := m.ctrl.Call(m, "WithClientCertFromFile", arg0, arg1)
	ret0, _ := ret[0].(Client)
	return ret0
}

// WithClientCertFromFile indicates an expected call of WithClientCertFromFile
func (mr *MockClientMockRecorder) WithClientCertFromFile(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithClientCertFromFile", reflect.TypeOf((*MockClient)(nil).WithClientCertFromFile), arg0, arg1)
}

// WithDebug mocks base method
func (m *MockClient) WithDebug() Client {
	ret := m.ctrl.Call(m, "WithDebug")
	ret0, _ := ret[0].(Client)
	return ret0
}

// WithDebug indicates an expected call of WithDebug
func (mr *MockClientMockRecorder) WithDebug() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDebug", reflect.TypeOf((*MockClient)(nil).WithDebug))
}

// WithInsecure mocks base method
func (m *MockClient) WithInsecure(arg0 bool) Client {
	ret := m.ctrl.Call(m, "WithInsecure", arg0)
	ret0, _ := ret[0].(Client)
	return ret0
}

// WithInsecure indicates an expected call of WithInsecure
func (mr *MockClientMockRecorder) WithInsecure(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInsecure", reflect.TypeOf((*MockClient)(nil).WithInsecure), arg0)
}

// WithOverWriteHeader mocks base method
func (m *MockClient) WithOverWriteHeader() Client {
	ret := m.ctrl.Call(m, "WithOverWriteHeader")
	ret0, _ := ret[0].(Client)
	return ret0
}

// WithOverWriteHeader indicates an expected call of WithOverWriteHeader
func (mr *MockClientMockRecorder) WithOverWriteHeader() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOverWriteHeader", reflect.TypeOf((*MockClient)(nil).WithOverWriteHeader))
}

// WithRootCA mocks base method
func (m *MockClient) WithRootCA(arg0 string) Client {
	ret := m.ctrl.Call(m, "WithRootCA", arg0)
	ret0, _ := ret[0].(Client)
	return ret0
}

// WithRootCA indicates an expected call of WithRootCA
func (mr *MockClientMockRecorder) WithRootCA(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRootCA", reflect.TypeOf((*MockClient)(nil).WithRootCA), arg0)
}
