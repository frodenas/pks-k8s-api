// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	"github.com/frodenas/pks-k8s-api/pkg/apis/pks/v1alpha1"
	"github.com/frodenas/pks-k8s-api/pkg/provisioner"
	"github.com/frodenas/pks-k8s-api/pkg/provisioner/types"
	"sync"
)

var (
	lockProvisionerMockCreateCluster sync.RWMutex
	lockProvisionerMockDeleteCluster sync.RWMutex
	lockProvisionerMockLastOperation sync.RWMutex
)

// Ensure, that ProvisionerMock does implement Provisioner.
// If this is not the case, regenerate this file with moq.
var _ provisioner.Provisioner = &ProvisionerMock{}

// ProvisionerMock is a mock implementation of Provisioner.
//
//     func TestSomethingThatUsesProvisioner(t *testing.T) {
//
//         // make and configure a mocked Provisioner
//         mockedProvisioner := &ProvisionerMock{
//             CreateClusterFunc: func(instance *v1alpha1.Cluster) (*provisionertypes.ProvisionerLastOperation, error) {
// 	               panic("mock out the CreateCluster method")
//             },
//             DeleteClusterFunc: func(instance *v1alpha1.Cluster) (*provisionertypes.ProvisionerLastOperation, error) {
// 	               panic("mock out the DeleteCluster method")
//             },
//             LastOperationFunc: func(instance *v1alpha1.Cluster, provisionerLastOperation provisionertypes.ProvisionerLastOperation) (*provisionertypes.ProvisionerLastOperation, error) {
// 	               panic("mock out the LastOperation method")
//             },
//         }
//
//         // use mockedProvisioner in code that requires Provisioner
//         // and then make assertions.
//
//     }
type ProvisionerMock struct {
	// CreateClusterFunc mocks the CreateCluster method.
	CreateClusterFunc func(instance *v1alpha1.Cluster) (*provisionertypes.ProvisionerLastOperation, error)

	// DeleteClusterFunc mocks the DeleteCluster method.
	DeleteClusterFunc func(instance *v1alpha1.Cluster) (*provisionertypes.ProvisionerLastOperation, error)

	// LastOperationFunc mocks the LastOperation method.
	LastOperationFunc func(instance *v1alpha1.Cluster, provisionerLastOperation provisionertypes.ProvisionerLastOperation) (*provisionertypes.ProvisionerLastOperation, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateCluster holds details about calls to the CreateCluster method.
		CreateCluster []struct {
			// Instance is the instance argument value.
			Instance *v1alpha1.Cluster
		}
		// DeleteCluster holds details about calls to the DeleteCluster method.
		DeleteCluster []struct {
			// Instance is the instance argument value.
			Instance *v1alpha1.Cluster
		}
		// LastOperation holds details about calls to the LastOperation method.
		LastOperation []struct {
			// Instance is the instance argument value.
			Instance *v1alpha1.Cluster
			// ProvisionerLastOperation is the provisionerLastOperation argument value.
			ProvisionerLastOperation provisionertypes.ProvisionerLastOperation
		}
	}
}

// CreateCluster calls CreateClusterFunc.
func (mock *ProvisionerMock) CreateCluster(instance *v1alpha1.Cluster) (*provisionertypes.ProvisionerLastOperation, error) {
	if mock.CreateClusterFunc == nil {
		panic("ProvisionerMock.CreateClusterFunc: method is nil but Provisioner.CreateCluster was just called")
	}
	callInfo := struct {
		Instance *v1alpha1.Cluster
	}{
		Instance: instance,
	}
	lockProvisionerMockCreateCluster.Lock()
	mock.calls.CreateCluster = append(mock.calls.CreateCluster, callInfo)
	lockProvisionerMockCreateCluster.Unlock()
	return mock.CreateClusterFunc(instance)
}

// CreateClusterCalls gets all the calls that were made to CreateCluster.
// Check the length with:
//     len(mockedProvisioner.CreateClusterCalls())
func (mock *ProvisionerMock) CreateClusterCalls() []struct {
	Instance *v1alpha1.Cluster
} {
	var calls []struct {
		Instance *v1alpha1.Cluster
	}
	lockProvisionerMockCreateCluster.RLock()
	calls = mock.calls.CreateCluster
	lockProvisionerMockCreateCluster.RUnlock()
	return calls
}

// DeleteCluster calls DeleteClusterFunc.
func (mock *ProvisionerMock) DeleteCluster(instance *v1alpha1.Cluster) (*provisionertypes.ProvisionerLastOperation, error) {
	if mock.DeleteClusterFunc == nil {
		panic("ProvisionerMock.DeleteClusterFunc: method is nil but Provisioner.DeleteCluster was just called")
	}
	callInfo := struct {
		Instance *v1alpha1.Cluster
	}{
		Instance: instance,
	}
	lockProvisionerMockDeleteCluster.Lock()
	mock.calls.DeleteCluster = append(mock.calls.DeleteCluster, callInfo)
	lockProvisionerMockDeleteCluster.Unlock()
	return mock.DeleteClusterFunc(instance)
}

// DeleteClusterCalls gets all the calls that were made to DeleteCluster.
// Check the length with:
//     len(mockedProvisioner.DeleteClusterCalls())
func (mock *ProvisionerMock) DeleteClusterCalls() []struct {
	Instance *v1alpha1.Cluster
} {
	var calls []struct {
		Instance *v1alpha1.Cluster
	}
	lockProvisionerMockDeleteCluster.RLock()
	calls = mock.calls.DeleteCluster
	lockProvisionerMockDeleteCluster.RUnlock()
	return calls
}

// LastOperation calls LastOperationFunc.
func (mock *ProvisionerMock) LastOperation(instance *v1alpha1.Cluster, provisionerLastOperation provisionertypes.ProvisionerLastOperation) (*provisionertypes.ProvisionerLastOperation, error) {
	if mock.LastOperationFunc == nil {
		panic("ProvisionerMock.LastOperationFunc: method is nil but Provisioner.LastOperation was just called")
	}
	callInfo := struct {
		Instance                 *v1alpha1.Cluster
		ProvisionerLastOperation provisionertypes.ProvisionerLastOperation
	}{
		Instance:                 instance,
		ProvisionerLastOperation: provisionerLastOperation,
	}
	lockProvisionerMockLastOperation.Lock()
	mock.calls.LastOperation = append(mock.calls.LastOperation, callInfo)
	lockProvisionerMockLastOperation.Unlock()
	return mock.LastOperationFunc(instance, provisionerLastOperation)
}

// LastOperationCalls gets all the calls that were made to LastOperation.
// Check the length with:
//     len(mockedProvisioner.LastOperationCalls())
func (mock *ProvisionerMock) LastOperationCalls() []struct {
	Instance                 *v1alpha1.Cluster
	ProvisionerLastOperation provisionertypes.ProvisionerLastOperation
} {
	var calls []struct {
		Instance                 *v1alpha1.Cluster
		ProvisionerLastOperation provisionertypes.ProvisionerLastOperation
	}
	lockProvisionerMockLastOperation.RLock()
	calls = mock.calls.LastOperation
	lockProvisionerMockLastOperation.RUnlock()
	return calls
}
