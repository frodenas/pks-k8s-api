// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/frodenas/pks-k8s-api/pkg/client/aws"
	"sync"
)

var (
	lockClientMockGetAvailabilityZone sync.RWMutex
	lockClientMockGetVPC              sync.RWMutex
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ aws.Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//     func TestSomethingThatUsesClient(t *testing.T) {
//
//         // make and configure a mocked Client
//         mockedClient := &ClientMock{
//             GetAvailabilityZoneFunc: func(zone string) (*ec2.DescribeAvailabilityZonesOutput, error) {
// 	               panic("mock out the GetAvailabilityZone method")
//             },
//             GetVPCFunc: func(vpcID string) (*ec2.DescribeVpcsOutput, error) {
// 	               panic("mock out the GetVPC method")
//             },
//         }
//
//         // use mockedClient in code that requires Client
//         // and then make assertions.
//
//     }
type ClientMock struct {
	// GetAvailabilityZoneFunc mocks the GetAvailabilityZone method.
	GetAvailabilityZoneFunc func(zone string) (*ec2.DescribeAvailabilityZonesOutput, error)

	// GetVPCFunc mocks the GetVPC method.
	GetVPCFunc func(vpcID string) (*ec2.DescribeVpcsOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAvailabilityZone holds details about calls to the GetAvailabilityZone method.
		GetAvailabilityZone []struct {
			// Zone is the zone argument value.
			Zone string
		}
		// GetVPC holds details about calls to the GetVPC method.
		GetVPC []struct {
			// VpcID is the vpcID argument value.
			VpcID string
		}
	}
}

// GetAvailabilityZone calls GetAvailabilityZoneFunc.
func (mock *ClientMock) GetAvailabilityZone(zone string) (*ec2.DescribeAvailabilityZonesOutput, error) {
	if mock.GetAvailabilityZoneFunc == nil {
		panic("ClientMock.GetAvailabilityZoneFunc: method is nil but Client.GetAvailabilityZone was just called")
	}
	callInfo := struct {
		Zone string
	}{
		Zone: zone,
	}
	lockClientMockGetAvailabilityZone.Lock()
	mock.calls.GetAvailabilityZone = append(mock.calls.GetAvailabilityZone, callInfo)
	lockClientMockGetAvailabilityZone.Unlock()
	return mock.GetAvailabilityZoneFunc(zone)
}

// GetAvailabilityZoneCalls gets all the calls that were made to GetAvailabilityZone.
// Check the length with:
//     len(mockedClient.GetAvailabilityZoneCalls())
func (mock *ClientMock) GetAvailabilityZoneCalls() []struct {
	Zone string
} {
	var calls []struct {
		Zone string
	}
	lockClientMockGetAvailabilityZone.RLock()
	calls = mock.calls.GetAvailabilityZone
	lockClientMockGetAvailabilityZone.RUnlock()
	return calls
}

// GetVPC calls GetVPCFunc.
func (mock *ClientMock) GetVPC(vpcID string) (*ec2.DescribeVpcsOutput, error) {
	if mock.GetVPCFunc == nil {
		panic("ClientMock.GetVPCFunc: method is nil but Client.GetVPC was just called")
	}
	callInfo := struct {
		VpcID string
	}{
		VpcID: vpcID,
	}
	lockClientMockGetVPC.Lock()
	mock.calls.GetVPC = append(mock.calls.GetVPC, callInfo)
	lockClientMockGetVPC.Unlock()
	return mock.GetVPCFunc(vpcID)
}

// GetVPCCalls gets all the calls that were made to GetVPC.
// Check the length with:
//     len(mockedClient.GetVPCCalls())
func (mock *ClientMock) GetVPCCalls() []struct {
	VpcID string
} {
	var calls []struct {
		VpcID string
	}
	lockClientMockGetVPC.RLock()
	calls = mock.calls.GetVPC
	lockClientMockGetVPC.RUnlock()
	return calls
}
