// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	"github.com/frodenas/pks-k8s-api/pkg/client/gcp"
	"google.golang.org/api/compute/v1"
	"sync"
)

var (
	lockClientMockGetDiskType sync.RWMutex
	lockClientMockGetNetwork  sync.RWMutex
	lockClientMockGetZone     sync.RWMutex
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ gcp.Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//     func TestSomethingThatUsesClient(t *testing.T) {
//
//         // make and configure a mocked Client
//         mockedClient := &ClientMock{
//             GetDiskTypeFunc: func(zone string, diskType string) (*compute.DiskType, error) {
// 	               panic("mock out the GetDiskType method")
//             },
//             GetNetworkFunc: func(network string) (*compute.Network, error) {
// 	               panic("mock out the GetNetwork method")
//             },
//             GetZoneFunc: func(region string, zone string) (*compute.Zone, error) {
// 	               panic("mock out the GetZone method")
//             },
//         }
//
//         // use mockedClient in code that requires Client
//         // and then make assertions.
//
//     }
type ClientMock struct {
	// GetDiskTypeFunc mocks the GetDiskType method.
	GetDiskTypeFunc func(zone string, diskType string) (*compute.DiskType, error)

	// GetNetworkFunc mocks the GetNetwork method.
	GetNetworkFunc func(network string) (*compute.Network, error)

	// GetZoneFunc mocks the GetZone method.
	GetZoneFunc func(region string, zone string) (*compute.Zone, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetDiskType holds details about calls to the GetDiskType method.
		GetDiskType []struct {
			// Zone is the zone argument value.
			Zone string
			// DiskType is the diskType argument value.
			DiskType string
		}
		// GetNetwork holds details about calls to the GetNetwork method.
		GetNetwork []struct {
			// Network is the network argument value.
			Network string
		}
		// GetZone holds details about calls to the GetZone method.
		GetZone []struct {
			// Region is the region argument value.
			Region string
			// Zone is the zone argument value.
			Zone string
		}
	}
}

// GetDiskType calls GetDiskTypeFunc.
func (mock *ClientMock) GetDiskType(zone string, diskType string) (*compute.DiskType, error) {
	if mock.GetDiskTypeFunc == nil {
		panic("ClientMock.GetDiskTypeFunc: method is nil but Client.GetDiskType was just called")
	}
	callInfo := struct {
		Zone     string
		DiskType string
	}{
		Zone:     zone,
		DiskType: diskType,
	}
	lockClientMockGetDiskType.Lock()
	mock.calls.GetDiskType = append(mock.calls.GetDiskType, callInfo)
	lockClientMockGetDiskType.Unlock()
	return mock.GetDiskTypeFunc(zone, diskType)
}

// GetDiskTypeCalls gets all the calls that were made to GetDiskType.
// Check the length with:
//     len(mockedClient.GetDiskTypeCalls())
func (mock *ClientMock) GetDiskTypeCalls() []struct {
	Zone     string
	DiskType string
} {
	var calls []struct {
		Zone     string
		DiskType string
	}
	lockClientMockGetDiskType.RLock()
	calls = mock.calls.GetDiskType
	lockClientMockGetDiskType.RUnlock()
	return calls
}

// GetNetwork calls GetNetworkFunc.
func (mock *ClientMock) GetNetwork(network string) (*compute.Network, error) {
	if mock.GetNetworkFunc == nil {
		panic("ClientMock.GetNetworkFunc: method is nil but Client.GetNetwork was just called")
	}
	callInfo := struct {
		Network string
	}{
		Network: network,
	}
	lockClientMockGetNetwork.Lock()
	mock.calls.GetNetwork = append(mock.calls.GetNetwork, callInfo)
	lockClientMockGetNetwork.Unlock()
	return mock.GetNetworkFunc(network)
}

// GetNetworkCalls gets all the calls that were made to GetNetwork.
// Check the length with:
//     len(mockedClient.GetNetworkCalls())
func (mock *ClientMock) GetNetworkCalls() []struct {
	Network string
} {
	var calls []struct {
		Network string
	}
	lockClientMockGetNetwork.RLock()
	calls = mock.calls.GetNetwork
	lockClientMockGetNetwork.RUnlock()
	return calls
}

// GetZone calls GetZoneFunc.
func (mock *ClientMock) GetZone(region string, zone string) (*compute.Zone, error) {
	if mock.GetZoneFunc == nil {
		panic("ClientMock.GetZoneFunc: method is nil but Client.GetZone was just called")
	}
	callInfo := struct {
		Region string
		Zone   string
	}{
		Region: region,
		Zone:   zone,
	}
	lockClientMockGetZone.Lock()
	mock.calls.GetZone = append(mock.calls.GetZone, callInfo)
	lockClientMockGetZone.Unlock()
	return mock.GetZoneFunc(region, zone)
}

// GetZoneCalls gets all the calls that were made to GetZone.
// Check the length with:
//     len(mockedClient.GetZoneCalls())
func (mock *ClientMock) GetZoneCalls() []struct {
	Region string
	Zone   string
} {
	var calls []struct {
		Region string
		Zone   string
	}
	lockClientMockGetZone.RLock()
	calls = mock.calls.GetZone
	lockClientMockGetZone.RUnlock()
	return calls
}
