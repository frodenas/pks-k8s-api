// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	"github.com/frodenas/pks-k8s-api/pkg/client/nsxt"
	"gitlab.eng.vmware.com/PKS/pks-networking/gen/models"
	"gitlab.eng.vmware.com/PKS/pks-nsx-t-release/src/pkg/networkmanager"
	"sync"
)

var (
	lockClientMockCreateClusterNetwork sync.RWMutex
	lockClientMockDeleteClusterNetwork sync.RWMutex
	lockClientMockGetIPBlock           sync.RWMutex
	lockClientMockGetIPPool            sync.RWMutex
	lockClientMockGetLogicalRouter     sync.RWMutex
	lockClientMockNewNetworkManager    sync.RWMutex
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ nsxt.Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//     func TestSomethingThatUsesClient(t *testing.T) {
//
//         // make and configure a mocked Client
//         mockedClient := &ClientMock{
//             CreateClusterNetworkFunc: func(nm networkmanager.NetworkManager, name string, spec *networkmanager.NSXTClusterSpec) (networkmanager.NetworkInfo, error) {
// 	               panic("mock out the CreateClusterNetwork method")
//             },
//             DeleteClusterNetworkFunc: func(nm networkmanager.NetworkManager, name string) error {
// 	               panic("mock out the DeleteClusterNetwork method")
//             },
//             GetIPBlockFunc: func(ipBlockID string) (*models.IPBlock, error) {
// 	               panic("mock out the GetIPBlock method")
//             },
//             GetIPPoolFunc: func(ipPoolID string) (*models.IPPool, error) {
// 	               panic("mock out the GetIPPool method")
//             },
//             GetLogicalRouterFunc: func(logicalRouterID string) (*models.LogicalRouter, error) {
// 	               panic("mock out the GetLogicalRouter method")
//             },
//             NewNetworkManagerFunc: func(nsxtSpec *networkmanager.NSXTSpec) (networkmanager.NetworkManager, error) {
// 	               panic("mock out the NewNetworkManager method")
//             },
//         }
//
//         // use mockedClient in code that requires Client
//         // and then make assertions.
//
//     }
type ClientMock struct {
	// CreateClusterNetworkFunc mocks the CreateClusterNetwork method.
	CreateClusterNetworkFunc func(nm networkmanager.NetworkManager, name string, spec *networkmanager.NSXTClusterSpec) (networkmanager.NetworkInfo, error)

	// DeleteClusterNetworkFunc mocks the DeleteClusterNetwork method.
	DeleteClusterNetworkFunc func(nm networkmanager.NetworkManager, name string) error

	// GetIPBlockFunc mocks the GetIPBlock method.
	GetIPBlockFunc func(ipBlockID string) (*models.IPBlock, error)

	// GetIPPoolFunc mocks the GetIPPool method.
	GetIPPoolFunc func(ipPoolID string) (*models.IPPool, error)

	// GetLogicalRouterFunc mocks the GetLogicalRouter method.
	GetLogicalRouterFunc func(logicalRouterID string) (*models.LogicalRouter, error)

	// NewNetworkManagerFunc mocks the NewNetworkManager method.
	NewNetworkManagerFunc func(nsxtSpec *networkmanager.NSXTSpec) (networkmanager.NetworkManager, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateClusterNetwork holds details about calls to the CreateClusterNetwork method.
		CreateClusterNetwork []struct {
			// Nm is the nm argument value.
			Nm networkmanager.NetworkManager
			// Name is the name argument value.
			Name string
			// Spec is the spec argument value.
			Spec *networkmanager.NSXTClusterSpec
		}
		// DeleteClusterNetwork holds details about calls to the DeleteClusterNetwork method.
		DeleteClusterNetwork []struct {
			// Nm is the nm argument value.
			Nm networkmanager.NetworkManager
			// Name is the name argument value.
			Name string
		}
		// GetIPBlock holds details about calls to the GetIPBlock method.
		GetIPBlock []struct {
			// IpBlockID is the ipBlockID argument value.
			IpBlockID string
		}
		// GetIPPool holds details about calls to the GetIPPool method.
		GetIPPool []struct {
			// IpPoolID is the ipPoolID argument value.
			IpPoolID string
		}
		// GetLogicalRouter holds details about calls to the GetLogicalRouter method.
		GetLogicalRouter []struct {
			// LogicalRouterID is the logicalRouterID argument value.
			LogicalRouterID string
		}
		// NewNetworkManager holds details about calls to the NewNetworkManager method.
		NewNetworkManager []struct {
			// NsxtSpec is the nsxtSpec argument value.
			NsxtSpec *networkmanager.NSXTSpec
		}
	}
}

// CreateClusterNetwork calls CreateClusterNetworkFunc.
func (mock *ClientMock) CreateClusterNetwork(nm networkmanager.NetworkManager, name string, spec *networkmanager.NSXTClusterSpec) (networkmanager.NetworkInfo, error) {
	if mock.CreateClusterNetworkFunc == nil {
		panic("ClientMock.CreateClusterNetworkFunc: method is nil but Client.CreateClusterNetwork was just called")
	}
	callInfo := struct {
		Nm   networkmanager.NetworkManager
		Name string
		Spec *networkmanager.NSXTClusterSpec
	}{
		Nm:   nm,
		Name: name,
		Spec: spec,
	}
	lockClientMockCreateClusterNetwork.Lock()
	mock.calls.CreateClusterNetwork = append(mock.calls.CreateClusterNetwork, callInfo)
	lockClientMockCreateClusterNetwork.Unlock()
	return mock.CreateClusterNetworkFunc(nm, name, spec)
}

// CreateClusterNetworkCalls gets all the calls that were made to CreateClusterNetwork.
// Check the length with:
//     len(mockedClient.CreateClusterNetworkCalls())
func (mock *ClientMock) CreateClusterNetworkCalls() []struct {
	Nm   networkmanager.NetworkManager
	Name string
	Spec *networkmanager.NSXTClusterSpec
} {
	var calls []struct {
		Nm   networkmanager.NetworkManager
		Name string
		Spec *networkmanager.NSXTClusterSpec
	}
	lockClientMockCreateClusterNetwork.RLock()
	calls = mock.calls.CreateClusterNetwork
	lockClientMockCreateClusterNetwork.RUnlock()
	return calls
}

// DeleteClusterNetwork calls DeleteClusterNetworkFunc.
func (mock *ClientMock) DeleteClusterNetwork(nm networkmanager.NetworkManager, name string) error {
	if mock.DeleteClusterNetworkFunc == nil {
		panic("ClientMock.DeleteClusterNetworkFunc: method is nil but Client.DeleteClusterNetwork was just called")
	}
	callInfo := struct {
		Nm   networkmanager.NetworkManager
		Name string
	}{
		Nm:   nm,
		Name: name,
	}
	lockClientMockDeleteClusterNetwork.Lock()
	mock.calls.DeleteClusterNetwork = append(mock.calls.DeleteClusterNetwork, callInfo)
	lockClientMockDeleteClusterNetwork.Unlock()
	return mock.DeleteClusterNetworkFunc(nm, name)
}

// DeleteClusterNetworkCalls gets all the calls that were made to DeleteClusterNetwork.
// Check the length with:
//     len(mockedClient.DeleteClusterNetworkCalls())
func (mock *ClientMock) DeleteClusterNetworkCalls() []struct {
	Nm   networkmanager.NetworkManager
	Name string
} {
	var calls []struct {
		Nm   networkmanager.NetworkManager
		Name string
	}
	lockClientMockDeleteClusterNetwork.RLock()
	calls = mock.calls.DeleteClusterNetwork
	lockClientMockDeleteClusterNetwork.RUnlock()
	return calls
}

// GetIPBlock calls GetIPBlockFunc.
func (mock *ClientMock) GetIPBlock(ipBlockID string) (*models.IPBlock, error) {
	if mock.GetIPBlockFunc == nil {
		panic("ClientMock.GetIPBlockFunc: method is nil but Client.GetIPBlock was just called")
	}
	callInfo := struct {
		IpBlockID string
	}{
		IpBlockID: ipBlockID,
	}
	lockClientMockGetIPBlock.Lock()
	mock.calls.GetIPBlock = append(mock.calls.GetIPBlock, callInfo)
	lockClientMockGetIPBlock.Unlock()
	return mock.GetIPBlockFunc(ipBlockID)
}

// GetIPBlockCalls gets all the calls that were made to GetIPBlock.
// Check the length with:
//     len(mockedClient.GetIPBlockCalls())
func (mock *ClientMock) GetIPBlockCalls() []struct {
	IpBlockID string
} {
	var calls []struct {
		IpBlockID string
	}
	lockClientMockGetIPBlock.RLock()
	calls = mock.calls.GetIPBlock
	lockClientMockGetIPBlock.RUnlock()
	return calls
}

// GetIPPool calls GetIPPoolFunc.
func (mock *ClientMock) GetIPPool(ipPoolID string) (*models.IPPool, error) {
	if mock.GetIPPoolFunc == nil {
		panic("ClientMock.GetIPPoolFunc: method is nil but Client.GetIPPool was just called")
	}
	callInfo := struct {
		IpPoolID string
	}{
		IpPoolID: ipPoolID,
	}
	lockClientMockGetIPPool.Lock()
	mock.calls.GetIPPool = append(mock.calls.GetIPPool, callInfo)
	lockClientMockGetIPPool.Unlock()
	return mock.GetIPPoolFunc(ipPoolID)
}

// GetIPPoolCalls gets all the calls that were made to GetIPPool.
// Check the length with:
//     len(mockedClient.GetIPPoolCalls())
func (mock *ClientMock) GetIPPoolCalls() []struct {
	IpPoolID string
} {
	var calls []struct {
		IpPoolID string
	}
	lockClientMockGetIPPool.RLock()
	calls = mock.calls.GetIPPool
	lockClientMockGetIPPool.RUnlock()
	return calls
}

// GetLogicalRouter calls GetLogicalRouterFunc.
func (mock *ClientMock) GetLogicalRouter(logicalRouterID string) (*models.LogicalRouter, error) {
	if mock.GetLogicalRouterFunc == nil {
		panic("ClientMock.GetLogicalRouterFunc: method is nil but Client.GetLogicalRouter was just called")
	}
	callInfo := struct {
		LogicalRouterID string
	}{
		LogicalRouterID: logicalRouterID,
	}
	lockClientMockGetLogicalRouter.Lock()
	mock.calls.GetLogicalRouter = append(mock.calls.GetLogicalRouter, callInfo)
	lockClientMockGetLogicalRouter.Unlock()
	return mock.GetLogicalRouterFunc(logicalRouterID)
}

// GetLogicalRouterCalls gets all the calls that were made to GetLogicalRouter.
// Check the length with:
//     len(mockedClient.GetLogicalRouterCalls())
func (mock *ClientMock) GetLogicalRouterCalls() []struct {
	LogicalRouterID string
} {
	var calls []struct {
		LogicalRouterID string
	}
	lockClientMockGetLogicalRouter.RLock()
	calls = mock.calls.GetLogicalRouter
	lockClientMockGetLogicalRouter.RUnlock()
	return calls
}

// NewNetworkManager calls NewNetworkManagerFunc.
func (mock *ClientMock) NewNetworkManager(nsxtSpec *networkmanager.NSXTSpec) (networkmanager.NetworkManager, error) {
	if mock.NewNetworkManagerFunc == nil {
		panic("ClientMock.NewNetworkManagerFunc: method is nil but Client.NewNetworkManager was just called")
	}
	callInfo := struct {
		NsxtSpec *networkmanager.NSXTSpec
	}{
		NsxtSpec: nsxtSpec,
	}
	lockClientMockNewNetworkManager.Lock()
	mock.calls.NewNetworkManager = append(mock.calls.NewNetworkManager, callInfo)
	lockClientMockNewNetworkManager.Unlock()
	return mock.NewNetworkManagerFunc(nsxtSpec)
}

// NewNetworkManagerCalls gets all the calls that were made to NewNetworkManager.
// Check the length with:
//     len(mockedClient.NewNetworkManagerCalls())
func (mock *ClientMock) NewNetworkManagerCalls() []struct {
	NsxtSpec *networkmanager.NSXTSpec
} {
	var calls []struct {
		NsxtSpec *networkmanager.NSXTSpec
	}
	lockClientMockNewNetworkManager.RLock()
	calls = mock.calls.NewNetworkManager
	lockClientMockNewNetworkManager.RUnlock()
	return calls
}
