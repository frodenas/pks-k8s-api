// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	"github.com/Azure/azure-sdk-for-go/services/network/mgmt/2018-12-01/network"
	"github.com/frodenas/pks-k8s-api/pkg/client/azure"
	"sync"
)

var (
	lockClientMockGetSubnet sync.RWMutex
	lockClientMockGetVnet   sync.RWMutex
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ azure.Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//     func TestSomethingThatUsesClient(t *testing.T) {
//
//         // make and configure a mocked Client
//         mockedClient := &ClientMock{
//             GetSubnetFunc: func(vnetName string, subnetName string) (*network.Subnet, error) {
// 	               panic("mock out the GetSubnet method")
//             },
//             GetVnetFunc: func(vnetName string) (*network.VirtualNetwork, error) {
// 	               panic("mock out the GetVnet method")
//             },
//         }
//
//         // use mockedClient in code that requires Client
//         // and then make assertions.
//
//     }
type ClientMock struct {
	// GetSubnetFunc mocks the GetSubnet method.
	GetSubnetFunc func(vnetName string, subnetName string) (*network.Subnet, error)

	// GetVnetFunc mocks the GetVnet method.
	GetVnetFunc func(vnetName string) (*network.VirtualNetwork, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetSubnet holds details about calls to the GetSubnet method.
		GetSubnet []struct {
			// VnetName is the vnetName argument value.
			VnetName string
			// SubnetName is the subnetName argument value.
			SubnetName string
		}
		// GetVnet holds details about calls to the GetVnet method.
		GetVnet []struct {
			// VnetName is the vnetName argument value.
			VnetName string
		}
	}
}

// GetSubnet calls GetSubnetFunc.
func (mock *ClientMock) GetSubnet(vnetName string, subnetName string) (*network.Subnet, error) {
	if mock.GetSubnetFunc == nil {
		panic("ClientMock.GetSubnetFunc: method is nil but Client.GetSubnet was just called")
	}
	callInfo := struct {
		VnetName   string
		SubnetName string
	}{
		VnetName:   vnetName,
		SubnetName: subnetName,
	}
	lockClientMockGetSubnet.Lock()
	mock.calls.GetSubnet = append(mock.calls.GetSubnet, callInfo)
	lockClientMockGetSubnet.Unlock()
	return mock.GetSubnetFunc(vnetName, subnetName)
}

// GetSubnetCalls gets all the calls that were made to GetSubnet.
// Check the length with:
//     len(mockedClient.GetSubnetCalls())
func (mock *ClientMock) GetSubnetCalls() []struct {
	VnetName   string
	SubnetName string
} {
	var calls []struct {
		VnetName   string
		SubnetName string
	}
	lockClientMockGetSubnet.RLock()
	calls = mock.calls.GetSubnet
	lockClientMockGetSubnet.RUnlock()
	return calls
}

// GetVnet calls GetVnetFunc.
func (mock *ClientMock) GetVnet(vnetName string) (*network.VirtualNetwork, error) {
	if mock.GetVnetFunc == nil {
		panic("ClientMock.GetVnetFunc: method is nil but Client.GetVnet was just called")
	}
	callInfo := struct {
		VnetName string
	}{
		VnetName: vnetName,
	}
	lockClientMockGetVnet.Lock()
	mock.calls.GetVnet = append(mock.calls.GetVnet, callInfo)
	lockClientMockGetVnet.Unlock()
	return mock.GetVnetFunc(vnetName)
}

// GetVnetCalls gets all the calls that were made to GetVnet.
// Check the length with:
//     len(mockedClient.GetVnetCalls())
func (mock *ClientMock) GetVnetCalls() []struct {
	VnetName string
} {
	var calls []struct {
		VnetName string
	}
	lockClientMockGetVnet.RLock()
	calls = mock.calls.GetVnet
	lockClientMockGetVnet.RUnlock()
	return calls
}
