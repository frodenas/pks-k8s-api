// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	"github.com/cloudfoundry/bosh-cli/director"
	"github.com/frodenas/pks-k8s-api/pkg/client/bosh"
	"sync"
)

var (
	lockClientMockDeleteDeployment sync.RWMutex
	lockClientMockDeploy           sync.RWMutex
	lockClientMockGetDeployment    sync.RWMutex
	lockClientMockGetTask          sync.RWMutex
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ bosh.Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//     func TestSomethingThatUsesClient(t *testing.T) {
//
//         // make and configure a mocked Client
//         mockedClient := &ClientMock{
//             DeleteDeploymentFunc: func(name string, force bool) (int, error) {
// 	               panic("mock out the DeleteDeployment method")
//             },
//             DeployFunc: func(name string, manifest []byte) (int, error) {
// 	               panic("mock out the Deploy method")
//             },
//             GetDeploymentFunc: func(name string) (bool, director.Deployment, error) {
// 	               panic("mock out the GetDeployment method")
//             },
//             GetTaskFunc: func(taskID int) (bosh.BoshTask, error) {
// 	               panic("mock out the GetTask method")
//             },
//         }
//
//         // use mockedClient in code that requires Client
//         // and then make assertions.
//
//     }
type ClientMock struct {
	// DeleteDeploymentFunc mocks the DeleteDeployment method.
	DeleteDeploymentFunc func(name string, force bool) (int, error)

	// DeployFunc mocks the Deploy method.
	DeployFunc func(name string, manifest []byte) (int, error)

	// GetDeploymentFunc mocks the GetDeployment method.
	GetDeploymentFunc func(name string) (bool, director.Deployment, error)

	// GetTaskFunc mocks the GetTask method.
	GetTaskFunc func(taskID int) (bosh.BoshTask, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteDeployment holds details about calls to the DeleteDeployment method.
		DeleteDeployment []struct {
			// Name is the name argument value.
			Name string
			// Force is the force argument value.
			Force bool
		}
		// Deploy holds details about calls to the Deploy method.
		Deploy []struct {
			// Name is the name argument value.
			Name string
			// Manifest is the manifest argument value.
			Manifest []byte
		}
		// GetDeployment holds details about calls to the GetDeployment method.
		GetDeployment []struct {
			// Name is the name argument value.
			Name string
		}
		// GetTask holds details about calls to the GetTask method.
		GetTask []struct {
			// TaskID is the taskID argument value.
			TaskID int
		}
	}
}

// DeleteDeployment calls DeleteDeploymentFunc.
func (mock *ClientMock) DeleteDeployment(name string, force bool) (int, error) {
	if mock.DeleteDeploymentFunc == nil {
		panic("ClientMock.DeleteDeploymentFunc: method is nil but Client.DeleteDeployment was just called")
	}
	callInfo := struct {
		Name  string
		Force bool
	}{
		Name:  name,
		Force: force,
	}
	lockClientMockDeleteDeployment.Lock()
	mock.calls.DeleteDeployment = append(mock.calls.DeleteDeployment, callInfo)
	lockClientMockDeleteDeployment.Unlock()
	return mock.DeleteDeploymentFunc(name, force)
}

// DeleteDeploymentCalls gets all the calls that were made to DeleteDeployment.
// Check the length with:
//     len(mockedClient.DeleteDeploymentCalls())
func (mock *ClientMock) DeleteDeploymentCalls() []struct {
	Name  string
	Force bool
} {
	var calls []struct {
		Name  string
		Force bool
	}
	lockClientMockDeleteDeployment.RLock()
	calls = mock.calls.DeleteDeployment
	lockClientMockDeleteDeployment.RUnlock()
	return calls
}

// Deploy calls DeployFunc.
func (mock *ClientMock) Deploy(name string, manifest []byte) (int, error) {
	if mock.DeployFunc == nil {
		panic("ClientMock.DeployFunc: method is nil but Client.Deploy was just called")
	}
	callInfo := struct {
		Name     string
		Manifest []byte
	}{
		Name:     name,
		Manifest: manifest,
	}
	lockClientMockDeploy.Lock()
	mock.calls.Deploy = append(mock.calls.Deploy, callInfo)
	lockClientMockDeploy.Unlock()
	return mock.DeployFunc(name, manifest)
}

// DeployCalls gets all the calls that were made to Deploy.
// Check the length with:
//     len(mockedClient.DeployCalls())
func (mock *ClientMock) DeployCalls() []struct {
	Name     string
	Manifest []byte
} {
	var calls []struct {
		Name     string
		Manifest []byte
	}
	lockClientMockDeploy.RLock()
	calls = mock.calls.Deploy
	lockClientMockDeploy.RUnlock()
	return calls
}

// GetDeployment calls GetDeploymentFunc.
func (mock *ClientMock) GetDeployment(name string) (bool, director.Deployment, error) {
	if mock.GetDeploymentFunc == nil {
		panic("ClientMock.GetDeploymentFunc: method is nil but Client.GetDeployment was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockClientMockGetDeployment.Lock()
	mock.calls.GetDeployment = append(mock.calls.GetDeployment, callInfo)
	lockClientMockGetDeployment.Unlock()
	return mock.GetDeploymentFunc(name)
}

// GetDeploymentCalls gets all the calls that were made to GetDeployment.
// Check the length with:
//     len(mockedClient.GetDeploymentCalls())
func (mock *ClientMock) GetDeploymentCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockClientMockGetDeployment.RLock()
	calls = mock.calls.GetDeployment
	lockClientMockGetDeployment.RUnlock()
	return calls
}

// GetTask calls GetTaskFunc.
func (mock *ClientMock) GetTask(taskID int) (bosh.BoshTask, error) {
	if mock.GetTaskFunc == nil {
		panic("ClientMock.GetTaskFunc: method is nil but Client.GetTask was just called")
	}
	callInfo := struct {
		TaskID int
	}{
		TaskID: taskID,
	}
	lockClientMockGetTask.Lock()
	mock.calls.GetTask = append(mock.calls.GetTask, callInfo)
	lockClientMockGetTask.Unlock()
	return mock.GetTaskFunc(taskID)
}

// GetTaskCalls gets all the calls that were made to GetTask.
// Check the length with:
//     len(mockedClient.GetTaskCalls())
func (mock *ClientMock) GetTaskCalls() []struct {
	TaskID int
} {
	var calls []struct {
		TaskID int
	}
	lockClientMockGetTask.RLock()
	calls = mock.calls.GetTask
	lockClientMockGetTask.RUnlock()
	return calls
}
