// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	"github.com/frodenas/pks-k8s-api/pkg/client/vcenter"
	"github.com/vmware/govmomi/object"
	"sync"
)

var (
	lockClientMockGetComputeResource sync.RWMutex
	lockClientMockGetDataCenter      sync.RWMutex
	lockClientMockGetDatastore       sync.RWMutex
	lockClientMockGetFolder          sync.RWMutex
	lockClientMockGetNetwork         sync.RWMutex
	lockClientMockGetResourcePool    sync.RWMutex
	lockClientMockIsVC               sync.RWMutex
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ vcenter.Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//     func TestSomethingThatUsesClient(t *testing.T) {
//
//         // make and configure a mocked Client
//         mockedClient := &ClientMock{
//             GetComputeResourceFunc: func(datacenterPath string, clusterPath string) (*object.ComputeResource, error) {
// 	               panic("mock out the GetComputeResource method")
//             },
//             GetDataCenterFunc: func(datacenterPath string) (*object.Datacenter, error) {
// 	               panic("mock out the GetDataCenter method")
//             },
//             GetDatastoreFunc: func(datastorePath string) (*object.Datastore, error) {
// 	               panic("mock out the GetDatastore method")
//             },
//             GetFolderFunc: func(folderPath string) (*object.Folder, error) {
// 	               panic("mock out the GetFolder method")
//             },
//             GetNetworkFunc: func(networkPath string) (object.NetworkReference, error) {
// 	               panic("mock out the GetNetwork method")
//             },
//             GetResourcePoolFunc: func(datacenterPath string, resourcePoolPath string) (*object.ResourcePool, error) {
// 	               panic("mock out the GetResourcePool method")
//             },
//             IsVCFunc: func() bool {
// 	               panic("mock out the IsVC method")
//             },
//         }
//
//         // use mockedClient in code that requires Client
//         // and then make assertions.
//
//     }
type ClientMock struct {
	// GetComputeResourceFunc mocks the GetComputeResource method.
	GetComputeResourceFunc func(datacenterPath string, clusterPath string) (*object.ComputeResource, error)

	// GetDataCenterFunc mocks the GetDataCenter method.
	GetDataCenterFunc func(datacenterPath string) (*object.Datacenter, error)

	// GetDatastoreFunc mocks the GetDatastore method.
	GetDatastoreFunc func(datastorePath string) (*object.Datastore, error)

	// GetFolderFunc mocks the GetFolder method.
	GetFolderFunc func(folderPath string) (*object.Folder, error)

	// GetNetworkFunc mocks the GetNetwork method.
	GetNetworkFunc func(networkPath string) (object.NetworkReference, error)

	// GetResourcePoolFunc mocks the GetResourcePool method.
	GetResourcePoolFunc func(datacenterPath string, resourcePoolPath string) (*object.ResourcePool, error)

	// IsVCFunc mocks the IsVC method.
	IsVCFunc func() bool

	// calls tracks calls to the methods.
	calls struct {
		// GetComputeResource holds details about calls to the GetComputeResource method.
		GetComputeResource []struct {
			// DatacenterPath is the datacenterPath argument value.
			DatacenterPath string
			// ClusterPath is the clusterPath argument value.
			ClusterPath string
		}
		// GetDataCenter holds details about calls to the GetDataCenter method.
		GetDataCenter []struct {
			// DatacenterPath is the datacenterPath argument value.
			DatacenterPath string
		}
		// GetDatastore holds details about calls to the GetDatastore method.
		GetDatastore []struct {
			// DatastorePath is the datastorePath argument value.
			DatastorePath string
		}
		// GetFolder holds details about calls to the GetFolder method.
		GetFolder []struct {
			// FolderPath is the folderPath argument value.
			FolderPath string
		}
		// GetNetwork holds details about calls to the GetNetwork method.
		GetNetwork []struct {
			// NetworkPath is the networkPath argument value.
			NetworkPath string
		}
		// GetResourcePool holds details about calls to the GetResourcePool method.
		GetResourcePool []struct {
			// DatacenterPath is the datacenterPath argument value.
			DatacenterPath string
			// ResourcePoolPath is the resourcePoolPath argument value.
			ResourcePoolPath string
		}
		// IsVC holds details about calls to the IsVC method.
		IsVC []struct {
		}
	}
}

// GetComputeResource calls GetComputeResourceFunc.
func (mock *ClientMock) GetComputeResource(datacenterPath string, clusterPath string) (*object.ComputeResource, error) {
	if mock.GetComputeResourceFunc == nil {
		panic("ClientMock.GetComputeResourceFunc: method is nil but Client.GetComputeResource was just called")
	}
	callInfo := struct {
		DatacenterPath string
		ClusterPath    string
	}{
		DatacenterPath: datacenterPath,
		ClusterPath:    clusterPath,
	}
	lockClientMockGetComputeResource.Lock()
	mock.calls.GetComputeResource = append(mock.calls.GetComputeResource, callInfo)
	lockClientMockGetComputeResource.Unlock()
	return mock.GetComputeResourceFunc(datacenterPath, clusterPath)
}

// GetComputeResourceCalls gets all the calls that were made to GetComputeResource.
// Check the length with:
//     len(mockedClient.GetComputeResourceCalls())
func (mock *ClientMock) GetComputeResourceCalls() []struct {
	DatacenterPath string
	ClusterPath    string
} {
	var calls []struct {
		DatacenterPath string
		ClusterPath    string
	}
	lockClientMockGetComputeResource.RLock()
	calls = mock.calls.GetComputeResource
	lockClientMockGetComputeResource.RUnlock()
	return calls
}

// GetDataCenter calls GetDataCenterFunc.
func (mock *ClientMock) GetDataCenter(datacenterPath string) (*object.Datacenter, error) {
	if mock.GetDataCenterFunc == nil {
		panic("ClientMock.GetDataCenterFunc: method is nil but Client.GetDataCenter was just called")
	}
	callInfo := struct {
		DatacenterPath string
	}{
		DatacenterPath: datacenterPath,
	}
	lockClientMockGetDataCenter.Lock()
	mock.calls.GetDataCenter = append(mock.calls.GetDataCenter, callInfo)
	lockClientMockGetDataCenter.Unlock()
	return mock.GetDataCenterFunc(datacenterPath)
}

// GetDataCenterCalls gets all the calls that were made to GetDataCenter.
// Check the length with:
//     len(mockedClient.GetDataCenterCalls())
func (mock *ClientMock) GetDataCenterCalls() []struct {
	DatacenterPath string
} {
	var calls []struct {
		DatacenterPath string
	}
	lockClientMockGetDataCenter.RLock()
	calls = mock.calls.GetDataCenter
	lockClientMockGetDataCenter.RUnlock()
	return calls
}

// GetDatastore calls GetDatastoreFunc.
func (mock *ClientMock) GetDatastore(datastorePath string) (*object.Datastore, error) {
	if mock.GetDatastoreFunc == nil {
		panic("ClientMock.GetDatastoreFunc: method is nil but Client.GetDatastore was just called")
	}
	callInfo := struct {
		DatastorePath string
	}{
		DatastorePath: datastorePath,
	}
	lockClientMockGetDatastore.Lock()
	mock.calls.GetDatastore = append(mock.calls.GetDatastore, callInfo)
	lockClientMockGetDatastore.Unlock()
	return mock.GetDatastoreFunc(datastorePath)
}

// GetDatastoreCalls gets all the calls that were made to GetDatastore.
// Check the length with:
//     len(mockedClient.GetDatastoreCalls())
func (mock *ClientMock) GetDatastoreCalls() []struct {
	DatastorePath string
} {
	var calls []struct {
		DatastorePath string
	}
	lockClientMockGetDatastore.RLock()
	calls = mock.calls.GetDatastore
	lockClientMockGetDatastore.RUnlock()
	return calls
}

// GetFolder calls GetFolderFunc.
func (mock *ClientMock) GetFolder(folderPath string) (*object.Folder, error) {
	if mock.GetFolderFunc == nil {
		panic("ClientMock.GetFolderFunc: method is nil but Client.GetFolder was just called")
	}
	callInfo := struct {
		FolderPath string
	}{
		FolderPath: folderPath,
	}
	lockClientMockGetFolder.Lock()
	mock.calls.GetFolder = append(mock.calls.GetFolder, callInfo)
	lockClientMockGetFolder.Unlock()
	return mock.GetFolderFunc(folderPath)
}

// GetFolderCalls gets all the calls that were made to GetFolder.
// Check the length with:
//     len(mockedClient.GetFolderCalls())
func (mock *ClientMock) GetFolderCalls() []struct {
	FolderPath string
} {
	var calls []struct {
		FolderPath string
	}
	lockClientMockGetFolder.RLock()
	calls = mock.calls.GetFolder
	lockClientMockGetFolder.RUnlock()
	return calls
}

// GetNetwork calls GetNetworkFunc.
func (mock *ClientMock) GetNetwork(networkPath string) (object.NetworkReference, error) {
	if mock.GetNetworkFunc == nil {
		panic("ClientMock.GetNetworkFunc: method is nil but Client.GetNetwork was just called")
	}
	callInfo := struct {
		NetworkPath string
	}{
		NetworkPath: networkPath,
	}
	lockClientMockGetNetwork.Lock()
	mock.calls.GetNetwork = append(mock.calls.GetNetwork, callInfo)
	lockClientMockGetNetwork.Unlock()
	return mock.GetNetworkFunc(networkPath)
}

// GetNetworkCalls gets all the calls that were made to GetNetwork.
// Check the length with:
//     len(mockedClient.GetNetworkCalls())
func (mock *ClientMock) GetNetworkCalls() []struct {
	NetworkPath string
} {
	var calls []struct {
		NetworkPath string
	}
	lockClientMockGetNetwork.RLock()
	calls = mock.calls.GetNetwork
	lockClientMockGetNetwork.RUnlock()
	return calls
}

// GetResourcePool calls GetResourcePoolFunc.
func (mock *ClientMock) GetResourcePool(datacenterPath string, resourcePoolPath string) (*object.ResourcePool, error) {
	if mock.GetResourcePoolFunc == nil {
		panic("ClientMock.GetResourcePoolFunc: method is nil but Client.GetResourcePool was just called")
	}
	callInfo := struct {
		DatacenterPath   string
		ResourcePoolPath string
	}{
		DatacenterPath:   datacenterPath,
		ResourcePoolPath: resourcePoolPath,
	}
	lockClientMockGetResourcePool.Lock()
	mock.calls.GetResourcePool = append(mock.calls.GetResourcePool, callInfo)
	lockClientMockGetResourcePool.Unlock()
	return mock.GetResourcePoolFunc(datacenterPath, resourcePoolPath)
}

// GetResourcePoolCalls gets all the calls that were made to GetResourcePool.
// Check the length with:
//     len(mockedClient.GetResourcePoolCalls())
func (mock *ClientMock) GetResourcePoolCalls() []struct {
	DatacenterPath   string
	ResourcePoolPath string
} {
	var calls []struct {
		DatacenterPath   string
		ResourcePoolPath string
	}
	lockClientMockGetResourcePool.RLock()
	calls = mock.calls.GetResourcePool
	lockClientMockGetResourcePool.RUnlock()
	return calls
}

// IsVC calls IsVCFunc.
func (mock *ClientMock) IsVC() bool {
	if mock.IsVCFunc == nil {
		panic("ClientMock.IsVCFunc: method is nil but Client.IsVC was just called")
	}
	callInfo := struct {
	}{}
	lockClientMockIsVC.Lock()
	mock.calls.IsVC = append(mock.calls.IsVC, callInfo)
	lockClientMockIsVC.Unlock()
	return mock.IsVCFunc()
}

// IsVCCalls gets all the calls that were made to IsVC.
// Check the length with:
//     len(mockedClient.IsVCCalls())
func (mock *ClientMock) IsVCCalls() []struct {
} {
	var calls []struct {
	}
	lockClientMockIsVC.RLock()
	calls = mock.calls.IsVC
	lockClientMockIsVC.RUnlock()
	return calls
}
